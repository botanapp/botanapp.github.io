{"version":3,"sources":["reportWebVitals.ts","components/ErrorsAlerts/ErrorsAlerts.tsx","state/bots/BotsReducer.tsx","state/deals/DealsReducer.tsx","utils/ApiUtils.tsx","components/NavBar/NavBar.tsx","state/gridBots/GridBotsReducer.tsx","state/smartTrades/SmartTradesReducer.tsx","state/accounts/AccountsReducer.tsx","state/accounts/AccountsActions.tsx","state/accounts/AccountsEffects.tsx","utils/UserUtils.tsx","components/Consent/Consent.tsx","App.tsx","state/deals/DealsSelectors.tsx","utils/DealsUtils.tsx","utils/GeneralUtils.tsx","utils/BotsUtils.tsx","components/Accounts/AccountsList/AccountPreview/AccountPreview.tsx","utils/ChartsUtils.tsx","components/Accounts/AccountDetails/AccountDetails.tsx","components/Accounts/AccountsList/AccountsList.tsx","components/Accounts/AccountsSummaryPreview/AccountsSummaryPreview.tsx","components/Accounts/Accounts.tsx","state/bots/BotsActions.tsx","state/bots/BotsEffects.tsx","state/deals/DealsActions.tsx","state/deals/DealsEffects.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsSafety/DCABotDetailsSafetyCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsCharts/DCABotDetailsCharts.tsx","components/DCABots/DCABotDetails/DCABotDetailsDealsTable/DCABotDetailsDealsTable.tsx","components/CommonComponents/CurrencyIcon/CurrencyIcon.tsx","components/DCABots/BotsList/BotPreview/BotPreview.tsx","components/DCABots/DCABotDetails/DCABotDetailsMain/DCABotDetailsMainInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsProfits/DCABotDetailsProfitsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsSettings/DCABotDetailsSettingsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsSafety/DCABotDetailsSafetyInfo.tsx","components/DCABots/DCABotDetails/DCABotDetailsInfo/DCABotDetailsInfo.tsx","components/DCABots/DCABotDetails/DCABotDetails.tsx","components/DCABots/BotsFilters/BotsFilters.tsx","components/DCABots/BotsList/BotsListCharts/BotsListCharts.tsx","components/DCABots/BotsList/BotsList.tsx","components/DCABots/DCABots.tsx","utils/GridBotsUtils.tsx","state/gridBots/GridBotsActions.tsx","state/gridBots/GridBotsEffects.tsx","components/GridBots/GridBotsList/GridBotsListTable/GridBotsListTable.tsx","components/GridBots/GridBotDetails/GridBotDetailsCharts/GridBotDetailsCharts.tsx","components/GridBots/GridBotDetails/GridBotDetailsTable/GridBotDetailsTable.tsx","components/GridBots/GridBotDetails/GridBotDetails.tsx","components/GridBots/GridBotsList/GridBotsList.tsx","components/GridBots/GridBots.tsx","state/smartTrades/SmartTradesActions.tsx","state/smartTrades/SmartTradesEffects.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetailsTable/SmartTradeDetailsTable.tsx","components/SmartTrades/SmartTradeDetails/SmartTradeDetails.tsx","utils/SmartTradesUtil.tsx","components/SmartTrades/SmartTradesList/SmartTradesCharts/SmartTradesCharts.tsx","components/SmartTrades/SmartTradesList/SmartTradesFilters/SmartTradesFilters.tsx","components/SmartTrades/SmartTradesList/SmartTradesTable/SmartTradesTable.tsx","components/SmartTrades/SmartTradesList/SmartTradesList.tsx","components/SmartTrades/SmartTrades.tsx","Router.tsx","i18n.js","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorsAlerts","useContext","ErrorsContext","errors","errorsState","errorsDispatch","className","length","Alert","variant","onClose","type","dismissible","Heading","map","error","Link","onClick","window","open","botsStateInitializer","initialValue","initialBotsState","storedFilters","JSON","parse","localStorage","getItem","filters","list","hasMore","limit","offset","scope","account","sorting","bots","botsReducer","state","action","newList","payload","bot","id","newBots","_","keyBy","botId","Error","initialDealsState","deals","activeDeals","dealsReducer","period","periodInDays","newDeals","omit","commonLimiter","Bottleneck","reservoir","reservoirRefreshAmount","reservoirRefreshInterval","DEAL_LIMITER_SETTINGS","minTime","maxConcurrent","clearDatastore","timeout","API_KEY","URLSearchParams","location","search","get","SECRET","dealsLimiter","setDealsLimiter","limiterId","getDealsLimiter","getSig","path","secret","CryptoJS","algo","HMAC","create","SHA256","update","finalize","toString","enc","Hex","callApi","method","limiter","schedule","fetch","headers","APIKEY","Signature","getBots","accountId","a","resetOffset","split","sortBy","sortDirection","getBotsUrl","response","json","getGridBots","accountTypes","accountTypesParams","accountType","join","getSmartTrades","page","perPage","pair","status","from","getSmartTradesUrl","getSmartTradeTrades","smartTradeId","getBot","getGridBotsProfits","gridBotId","getGridBotsMarketOrders","getDeal","dealId","getAccounts","getAccount","getAccountTableData","getAccountPieChartData","getAccountActiveTradingEntities","getAccountBalanceChartData","dateFrom","getDeals","order","getStrategies","getBotStats","getStorage","key","setStorage","data","encodeURI","stringify","NavBar","useState","activeKey","setActiveKey","navigate","useNavigate","useLocation","useEffect","pathname","src","alt","Nav","Item","active","href","gridBotsStateInitializer","initialGridBotsState","gridBots","gridBotsReducer","gridBot","newGridBots","smartTradesStateInitializer","initialSmartTradesState","label","to","smartTrades","smartTradesReducer","smartTrade","newSmartTrades","initialAccountsState","accounts","accountTableData","accountPieChartData","accountActiveTradingEntities","accountsReducer","newAccounts","setNewAccountsList","accountsList","setHasMore","addToAccountsList","setAccount","setAccountTableData","setAccountPieChartData","setAccountActiveTradingEntities","accountsDispatch","accountsState","customLimit","fetchAccount","fetchAccountTableData","fetchAccountPieChartData","TERMS_OF_USE","Consent","show","handleClose","Modal","backdrop","keyboard","size","Header","Title","Body","Footer","Button","ChartJS","register","CategoryScale","PointElement","LinearScale","BarElement","Tooltip","LineElement","Legend","TimeScale","Filler","ArcElement","initialStrategiesState","strategies","initialErrorsState","errorsReducer","Set","add","Array","strategiesReducer","AccountsContext","createContext","StrategiesContext","strategiesState","strategiesDispatch","BotsContext","botsState","botsDispatch","GridBotsContext","gridBotsState","gridBotsDispatch","SmartTradesContext","smartTradesState","smartTradesDispatch","DealsContext","dealsState","dealsDispatch","App","useReducer","getStrategiesData","showConsent","setShowConsent","text","consent","setConsent","replaceAll","catch","fetchAccounts","postConsent","date","Date","request","console","log","Provider","value","Spinner","animation","INFINITY_IN_DAYS","is30daysDealsLoaded","isAllDealsLoaded","selectAllDealsWithin30Days","filter","deal","getDealAgeInHours","selectAllDeals","filterAllSuccessfulDeals","differenceInHours","b","Math","ceil","diff","differenceInDays","moment","closed_at","getAllDealsForOneBot","daysWithin","ofsetCallback","hoursWithin","fetchAllDealsInLoop","slice","lastDeal","filteredDeals","getObjectOfProfitPerDay","result","groupBy","item","format","mapValues","sum","parseFloat","usd_final_profit","getObjectOfSOPerPair","mean","completed_safety_orders_count","calculateProfitPerBot","botsDeals","getLastNDays","n","i","idx","startOf","subtract","reverse","getProfitChartData","profitObject","nDays","lastDays","profits","day","labels","getAccumulativeProfitChartData","currentvalue","accProfits","profit","acc","getOneBotProfitsChartData","difference","getOneBotCurrencyLeaderbord","profitsByPair","getObjectOfProfitPerPair","sortedProfits","toPairs","orderBy","getOneBotSOLeaderbord","dir","values","getAverageDailyProfitFromAllDeals","profitsData","unzip","zip","currency","usePrevious","ref","useRef","current","convertFilterValueToDate","filterFrom","dateFormat","filterValue","getCurrencyValueInUsd","market_code","valueInCurrency","includes","Promise","resolve","marketInfo","last","responseUsdt","responseUsd","responseUsdBack","responseUsdtBack","NaN","getMaxUsage","maxActiveDeals","parseInt","max_active_deals","baseOrderVolume","base_order_volume","maxSafetyOrders","max_safety_orders","safetyOrderVolume","safety_order_volume","leverage","leverage_custom_value","martingale","martingale_volume_coefficient","quoteCurrency","pairs","baseCurrency","base_order_volume_type","convertOrderVolumesToUsdFromOtherCurrencies","orderVolums","convertOrderVolumesToUsdFromPercents","account_id","strategy","maxUsage","safetyOrderVolumes","baseCurency","marketCode","botStrategy","currencyForCalc","isSpotAccount","accountBalances","balance","find","accountBalance","currency_code","available","equity","on_orders","current_price_usd","indexOf","getFundsLocked","fundsLocked","getSafetyOrderSize","additionalCurrency","safety_order_volume_type","getCurrencyFormat","signDisplay","Intl","NumberFormat","maximumFractionDigits","maxUsageInUsd","currencyPriceInUsd","getReturns","reduce","currDeal","nextDeal","marketTypes","spot","margin","futures","AccountIcons","accountPieChart","supported_market_types","style","backgroundImage","market_icon","AccountPieChart","dataItem","code","datasets","y","backgroundColor","str","hash","charCodeAt","colour","substr","stringToColour","borderWidth","options","plugins","legend","display","tooltip","callbacks","tooltipItem","currentValue","dataset","dataIndex","bodyFont","AccountInfo","created_at","updated_at","api_key_invalid","AccountPreview","setAccountPieChart","accountActiveTrading","setAccountActiveTrading","fetchAccountActiveTradingEntities","flexGrow","marginLeft","name","Table","fontSize","fontWeight","usd_amount","day_profit_usd","btc_amount","day_profit_btc","marginTop","active_bots_count","active_deals_count","active_smart_trades_count","active_grid_bots_count","ProfitChartOptions","tooltipCustomVaueFormat","scales","x","time","unit","tooltipFormat","ticks","source","beginAtZero","responsive","title","intersect","mode","AccumulativeChartOptions","lineTension","gridLines","offsetGridLines","filler","propagate","drawTime","TimeLineChartOptions","maintainAspectRatio","LeaderbordChartOptions","indexAxis","autoSkip","stacked","callback","DealsCountBarChartOptions","isWeekUnit","stepSize","AccountBalancesTable","accountTable","accountFilteredTable","setAccountFilteredTable","accountFilter","setAccountFilter","hideSmallBalances","setHideSmallBalances","balancesCurrency","setBalancesCurrency","tableData","toUpperCase","usd_value","percentage","FormControl","onChange","e","target","width","marginRight","FormCheck","checked","ButtonGroup","ToggleButton","currentTarget","row","currency_name","current_price","day_change_percent_usd","day_change_percent_btc","position","btc_value","AccountDetails","setAccountId","setAccountTable","accountHistoryData","setAccountHistoryData","accountMode","setAccountMode","historyCurrency","setHistoryCurrency","toDate","historyDate","setHistoryDate","params","useParams","selected","selectsStart","strictParsing","usd_profit","usd_profit_percentage","total_usd_profit","btc_profit","btc_profit_percentage","total_btc_profit","parsed","historyData","unix","usd","btc","borderColor","AccountsList","AccountsSummaryPreview","summary","setSummary","summaryPieChart","setSummaryPieChart","summaryTableData","setSummaryTableData","asset","Accounts","setNewBotsList","botsList","addToBotsList","setBotsOffset","setBot","fetchBots","offsetLimit","botItem","profits_in_usd","today_usd_profit","funds_locked_in_active_deals","todayUsdProfit","deals30daysForBot","avgProfit","returns","getDealsList","getActiveDealsList","setOffset","resetDeals","resetActiveDeals","fetchDealsForBotFor30Days","message","fetchAllDealsForBot","reset","getAllActiveDeals","DCABotDetailsMainCharts","xLabel","yLabel","dateLabelsDays","timeRangeValue","setFilteredDeals","countsValues","setCountsValues","dealsDurationHistogramData","setDealsDurationHistogramData","dealsStatusData","countsObj","countBy","localized_status","keys","dealsStatusesCounts","dates","delsGrouped","getDealsCountPerDay","dealDurations","start","end","getDealsDurationHistogramData","aspectRatio","total","previousValue","floor","legendItem","index","barPercentage","DCABotDetailsProfitsCharts","accumulativeProfitsData","setAccumulativeProfitsData","setProfitsData","pairsLeaderbordData","setPairsLeaderbordData","getOneBotAccumulativeProfitsChartData","fill","DCABotDetailsSafetyCharts","dealsSOHistogramData","setDealsSOHistogramData","antiPairsLeaderbordData","setAntiPairsLeaderbordData","dealSO","getDealsSOHistogramData","suggestedMin","DCABotDetailsCharts","infoKey","setDateLabelsDays","oldestDealAgeInDaysSinceOpened","pop","badgeVariant","Cancelled","StopLoss","Failed","Completed","Liquidated","Switched","DCABotDetailsDealsTable","dealStateSwitcher","columns","React","useMemo","accessor","disableSortBy","originalRow","rowIndex","Cell","cell","Badge","bg","sortType","utc","duration","days","asDays","daysFormatted","hours","hoursFormatted","minutes","minutesFormatted","bought_average_price","sold_average_price","amount","bought_amount","sold_amount","volume","bought_volume","sold_volume","completed_manual_safety_orders_count","Number","original","final_profit_percentage","actual_profit_percentage","actual_usd_profit","numberValue","color","useTable","disableSortRemove","autoResetPage","autoResetSortBy","initialState","pageSize","desc","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","pageCount","gotoPage","nextPage","previousPage","pageIndex","modalIsOpen","setModalIsOpen","selectedDeal","setSelectedDeal","striped","bordered","hover","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","cursor","isSorted","isSortedDesc","getRowProps","cells","getCellProps","TablePagination","range","renderPaginationNumberItem","Pagination","renderPaginationBeginning","First","Prev","renderPaginationEnd","Next","Last","DealModal","setDeal","dl","onHide","scrollable","closeButton","bot_events","event","CurrencyIcon","formattedCurrency","replace","icons","chain","iconsData","height","borderRadius","backgroundSize","strategyMap","nonstop","qfl","tv_custom_signal","trading_view","buy_or_strong_buy","strong_buy","sell_or_strong_sell","strong_sell","rsi","manual","ult","ta_preset","cqs_telegram","krypto_boss_free","getBotsStrategyName","botsStrategy","marketsStrategy","marketStrategy","strategy_key","BotPreview","statsLoaded","setStatsLoaded","t","useTranslation","getFundsLockedAndTodaysProfit","getMaxUsageEffect","getAvgProfitEffect","random","age","formatter","strategy_list","is_enabled","marginBottom","preventDefault","finished_deals_profit_usd","OverlayTrigger","delay","hide","overlay","active_deals_usd_profit","IconsSet","isMulti","BotName","BotInfo","BotAvgProfit","avgProfitCalculated","DCABotDetailsMainInfo","setFundsLocked","fundsLockedShare","setFundsLockedShare","avgDealDuration","setAvgDealDuration","setMaxUsage","reservedFunds","setReservedFunds","percentFormatter","minimumFractionDigits","botPairs","botMarket","startCondition","percent","points","getMaxUsageInBotCurrency","mxUsg","reserved_base_funds","reserved_quote_funds","getReservedFundsInBotCurrency","getFundsLockedInBotCurrency","avgDealDurationInMilliseconds","getAverageDealDuration","DCABotDetailsProfitsInfo","fromFilter","toFilter","averageTp","setAverageTp","averageProfitFromDeal","setAverageProfitFromDeal","averageDailyProfit","setAverageDailyProfit","setReturns","totalProfitUsd","setTotalProfitUsd","createdAt","startBotDate","fromFilterMoment","toFilterMoment","maxDate","max","chartData","isBefore","isAfter","getAverageDailyProfit","getTotalProfitUsd","getAverageTp","getAverageProfitFromDeal","DCABotDetailsSettingsInfo","baseOrderSize","setBaseOrderSize","setSafetyOrderSize","getBaseOrderSize","leverageType","leverage_type","profit_currency","take_profit","take_profit_type","trailing_enabled","trailing_deviation","stop_loss_percentage","stop_loss_timeout_in_seconds","start_order_type","DCABotDetailsSafetyInfo","safetyOrderSize","maxPriceDeviation","setMaxPriceDeviation","priceDeviation","stepScale","safety_order_step_percentage","martingale_step_coefficient","avgSOCompleted","setAvgSOCompleted","nonSOCompleted","setNonSOCompleted","allSOCompleted","setAllSOCompleted","active_safety_orders_count","DCABotDetailsInfo","setInfoKey","Tabs","onSelect","k","Tab","eventKey","tabClassName","statusFilterOptions","DCABotDetails","setTimeRangeValue","setBotId","previousBotId","setBotsDeals","isDataLoading","setIsDataLoading","isAllDataLoading","setIsAllDataLoading","percentLoadedDeals","setPercentLoadedDeals","statusFilter","setStatusFilter","setDealStateSwitcher","pairFilter","setPairFilter","pairFilterOptions","setPairFilterOptions","setFromFilter","setToFilter","clearFilters","refreshData","fetchBot","isSame","dateTo","filterTo","filterByStatus","filterByPair","loadedDeals","finished_deals_count","stop","dropWaitingJobs","disconnect","ProgressBar","now","animated","radio","option","theme","colors","primary25","primary","startDate","endDate","selectsEnd","minDate","BotsFilters","updateFilter","filterItem","accountsOptions","label_id","scopeOptions","typeOptions","sortingOptions","setItem","filterOption","candidate","input","BotsListCharts","dealsLoaded","setDealsLoaded","botsLoaded","setBotsLoaded","numberHandled","setNumberHandled","setAvgProfit","setActiveDeals","summirizedUpnl","setSummirizedUpnl","summirizedFundsLocked","setSummirizedFundsLocked","profitsChartData","setProfitsChartData","accumulativeProfitsChartData","setAccumulativeProfitsChartData","botsLeaderboardChartData","setBotsLeaderboardChartData","getBotsList","getBoatsDeals","profitsObject","botsIds","currentObj","mergeWith","profit1","profit2","calculateProfitPerDayForListOfBots","sortedAndSelected10FirstBots","round","EPSILON","getBotsLeaderboardChartData","getSummirizedUpnl","getSummirizedFundsLocked","botsWithLoadedDeals","BotsList","showCharts","setShowCharts","isNothingFound","previousFilters","every","haveAllBotsDealsFor30Days","textAlign","dataLength","next","loader","endMessage","DCABots","getProfitsWithin30days","getProfitAgeInHours","getMarketOrdersWithin30days","marketOrders","grid_lines_orders","marketOrder","getMarketOrderAgeInHours","tradingFee","resultProfits","resultMarketOrders","objectProfits","objectMarketOrders","setNewGridBotsList","gridBotsList","addToGridBotsList","setGridBot","spotAccountsTypes","fetchProfits","gridBotItem","profit_currency_type","sumProfits","sumProfitsUsd","fetchMarketOrders","fetchGridBotsMetrics","GridBotsListTable","investment","setModalGridBotId","accId","tipText","upper_price","lower_price","grids_quantity","grid_lines","sellOrdersNumber","line","order_placed","side","buyOrdersNumber","alignItems","justifyContent","rows","renderColumnHeader","GridBotDetailsCharts","chartTooltipFormatLabel","botsProfits","getOneGridBotAccumulativeProfitsChartData","getOneGridBotProfitsChartData","GridBotDetailsTable","setProfit","running","setRunning","summarizedProfits","realProfit","quoteInvestment","initialInvestments","allInQuote","realReturns","timeRangeRadios","GridBotDetails","setMarketOrders","setProfits","fetchDetails","status_string","GridBotsList","modalGridBotId","fetchGridBots","GridBots","setNewSmartTradesList","smartTradesList","addToSmartTradesList","setSmartTrade","fromDate","fetchTrades","smartTradeItem","trades","smartTradeTrades","SmartTradeDetailsStatusTable","price","average_enter_price","average_close_price","SmartTradeDetailsTable","triggerSignMap","less","less_or_equal","greater_or_equal","greater","trade","order_type","order_side","initial_price","realised_price","initial_amount","realised_amount","initial_total","realised_total","trigger_condition","trigger_price","trail_value","trail_percentage","purposeRadios","SmartTradeDetails","purpose","setPurpose","setTrades","trade_purpose","getObjectOfSmartTradesProfitsPerDay","filteredSmartTrades","SmartTradesCharts","pairProfitsLeaderboardData","setPairProfitsLeaderboardData","smartTradesProfitsByDays","oldestTradeDate","min","getSmartTradesAccumulativeProfitsChartData","getSmartTradesProfitsChartData","groupedResultProfits","groupedSmartTrades","getSmartTradesPairsLeaderboardChartData","SmartTradesFilters","statusOptions","disabled","isDisabled","smartTradeTypes","simple_buy","simple_sell","smart_sell","smart_trade","smart_cover","smart_buy","SmartTradesTable","setModalSmartTradeId","pnl_percent","pnl","pnl_usd","units","enabled","SmartTradesList","modalSmartTradeId","SmartTrades","fetchSmartTrades","Router","element","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.617fad25.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useContext } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { ErrorsContext } from \"../../App\";\nimport \"./ErrorsAlerts.css\";\n\nconst ErrorsAlerts = () => {\n  const {\n    errorsState: { errors },\n    errorsDispatch,\n  } = useContext(ErrorsContext);\n\n  const closeError = () => {\n    errorsDispatch({ type: \"cleanErrors\" });\n  };\n  return (\n    <div className=\"ErrorsAlerts\">\n      {errors.length > 0 && (\n        <Alert variant=\"danger\" onClose={closeError} dismissible>\n          <Alert.Heading>Ups! Something went wrong!</Alert.Heading>\n          {errors.map((error: string) => (\n            <p key={error}>{`— ${error}`}</p>\n          ))}\n          Contact us via{\" \"}\n          <Alert.Link\n            onClick={() => {\n              window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n            }}\n          >\n            Telegram\n          </Alert.Link>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorsAlerts;\n","import _ from \"lodash\";\nimport { IBot, IBotFilters } from \"../../interfaces/Bot\";\nimport { BotsAction } from \"./BotsActions\";\n\nexport interface IBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IBotFilters;\n  limit: number;\n  bots: { [key: number]: IBot };\n}\n\nexport const botsStateInitializer = (\n  initialValue = initialBotsState\n): IBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"botsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  scope: \"enabled\",\n  type: \"\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 15,\n  offset: 0,\n  filters: initialFiltersState,\n  bots: {},\n};\n\nexport function botsReducer(\n  state: IBotsState = initialBotsState,\n  action: BotsAction\n): IBotsState {\n  switch (action.type) {\n    case \"setNewBotsList\":\n      const newList = action.payload.map((bot) => bot.id);\n      const newBots = _.keyBy(action.payload, \"id\");\n      if (newList.length > 0) {\n        return { ...state, list: [newList[0]], bots: newBots };\n      } else {\n        return { ...state, list: newList, bots: newBots };\n      }\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToBotsList\":\n      const list = action.payload.map((bot) => bot.id);\n      const bots = _.keyBy(action.payload, \"id\");\n      if (list.length > 0) {\n        return {\n          ...state,\n          list: [list[0]],\n          bots: { ...state.bots, ...bots },\n        };\n      } else {\n        return {\n          ...state,\n          list: list,\n          bots: { ...state.bots, ...bots },\n        };\n      }\n    case \"setBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setBot\":\n      return {\n        ...state,\n        bots: { ...state.bots, [action.payload.botId]: action.payload.bot },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { DealsAction } from \"./DealsActions\";\nimport { IDeal } from \"../../interfaces/Deal\";\nimport _ from \"lodash\";\n\nexport interface IDealsState {\n  deals: {\n    [key: string]: { list: Array<IDeal>; period: number; offset?: number };\n  };\n  activeDeals: {\n    [key: string]: { list: Array<IDeal> };\n  };\n}\n\nexport const initialDealsState: IDealsState = {\n  deals: {},\n  activeDeals: {},\n};\n\nexport function dealsReducer(\n  state: IDealsState = initialDealsState,\n  action: DealsAction\n): IDealsState {\n  switch (action.type) {\n    case \"getDealsList\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            list: action.payload.deals,\n            period: action.payload.periodInDays,\n          },\n        },\n      };\n    case \"getActiveDealsList\":\n      return {\n        ...state,\n        activeDeals: {\n          ...state.activeDeals,\n          [action.payload.botId]: {\n            ...state.activeDeals[action.payload.botId],\n            list: action.payload.activeDeals,\n          },\n        },\n      };\n    case \"setOffset\":\n      return {\n        ...state,\n        deals: {\n          ...state.deals,\n          [action.payload.botId]: {\n            ...state.deals[action.payload.botId],\n            offset: action.payload.offset,\n          },\n        },\n      };\n    case \"resetDeals\":\n      if (action.payload.botId in state.deals) {\n        const newDeals = _.omit(state.deals, [action.payload.botId]);\n        return {\n          ...state,\n          deals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    case \"resetActiveDeals\":\n      if (action.payload.botId in state.activeDeals) {\n        const newDeals = _.omit(state.activeDeals, [action.payload.botId]);\n        return {\n          ...state,\n          activeDeals: newDeals,\n        };\n      } else {\n        return { ...state };\n      }\n\n    default:\n      throw new Error();\n  }\n}\n","import CryptoJS from \"crypto-js\";\nimport Bottleneck from \"bottleneck\";\nimport { IBotApi } from \"../interfaces/Bot\";\nimport { IDealApi } from \"../interfaces/Deal\";\nimport { IGridBotApi } from \"../interfaces/GridBot\";\n\nconst commonLimiter = new Bottleneck({\n  reservoir: 13,\n  reservoirRefreshAmount: 13,\n  reservoirRefreshInterval: 1000,\n});\n\nexport const DEAL_LIMITER_SETTINGS = {\n  id: \"DEAL_LIMITER\",\n  reservoir: 0,\n  reservoirRefreshAmount: 1,\n  reservoirRefreshInterval: 1000,\n  minTime: 1000,\n  maxConcurrent: 1,\n  clearDatastore: true,\n  timeout: 2000,\n};\n\nconst API_KEY =\n  new URLSearchParams(window.location.search).get(\"api_key\") || \"\";\nconst SECRET = new URLSearchParams(window.location.search).get(\"secret\") || \"\";\n\n//we need that hack for stopping loading heavy deals request\nexport let dealsLimiter = new Bottleneck(DEAL_LIMITER_SETTINGS);\n\nexport function setDealsLimiter(limiterId: any) {\n  dealsLimiter = new Bottleneck({ ...DEAL_LIMITER_SETTINGS, id: limiterId });\n}\n\nexport function getDealsLimiter() {\n  return dealsLimiter;\n}\n\nexport function getSig(path: string, secret: string) {\n  return CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, secret)\n    .update(path)\n    .finalize()\n    .toString(CryptoJS.enc.Hex);\n}\nexport const callApi = (\n  method: string,\n  path: string,\n  limiter: any = commonLimiter\n) => {\n  return limiter.schedule(() =>\n    fetch(`https://api.3commas.io${path}`, {\n      method: method,\n      headers: {\n        APIKEY: API_KEY,\n        Signature: getSig(path, SECRET),\n      },\n    })\n  );\n};\n\nexport const getBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  scope: string,\n  type: string,\n  accountId: string,\n  resetOffset = false\n): Promise<Array<IBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/bots?offset=${\n      resetOffset ? 0 : offset\n    }&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      scope ? `&scope=${scope}` : \"\"\n    }${type ? `&strategy=${type}` : \"\"}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getGridBots = async (\n  offset: number,\n  limit: number,\n  sorting: string,\n  accountId: string,\n  accountTypes: string[],\n  state = \"enabled\"\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const accountTypesParams = accountTypes\n    .map((accountType) => `&account_types[]=${accountType}`)\n    .join(\"\");\n\n  const getBotsUrl = () =>\n    `/public/api/ver1/grid_bots?offset=${offset}&limit=${limit}&sort_by=${sortBy}&sort_direction=${sortDirection}${\n      accountId ? `&account_ids[]=${accountId}` : accountTypesParams\n    }${state ? `&state=${state}` : \"\"}`;\n\n  return callApi(\"GET\", getBotsUrl()).then((response: any) => response.json());\n};\n\nexport const getSmartTrades = async (\n  page: number,\n  perPage: number,\n  sorting: string,\n  accountId: string,\n  type: string,\n  pair: string,\n  status: string,\n  from: string\n): Promise<Array<IGridBotApi>> => {\n  const [sortBy, sortDirection] = sorting.split(\"-\");\n\n  const getSmartTradesUrl = () =>\n    `/public/api/v2/smart_trades?page=${page}&per_page=${perPage}&order_by=${sortBy}&order_direction=${sortDirection}${\n      accountId ? `&account_id=${accountId}` : \"\"\n    }${type ? `&type=${type}` : \"\"}${\n      pair ? `&pair=${pair}` : \"\"\n    }&status=${status}${from ? `&from=${from}` : \"\"}`;\n\n  return callApi(\"GET\", getSmartTradesUrl()).then((response: any) =>\n    response.json()\n  );\n};\n\nexport const getSmartTradeTrades = async (\n  smartTradeId: number\n): Promise<IBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/v2/smart_trades/${smartTradeId}/trades`\n  ).then((response: any) => response.json());\n};\nexport const getBot = async (botId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/bots/${botId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBot = async (gridBotId: number): Promise<IGridBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsProfits = async (gridBotId: number): Promise<any[]> => {\n  return callApi(\"GET\", `/public/api/ver1/grid_bots/${gridBotId}/profits`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getGridBotsMarketOrders = async (\n  gridBotId: number\n): Promise<IGridBotApi> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/grid_bots/${gridBotId}/market_orders`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeal = async (dealId: number): Promise<IBotApi> => {\n  return callApi(\"GET\", `/public/api/ver1/deals/${dealId}/show`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccounts = async (page: any, perPage: any) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts?page=${page}&per_page=${perPage}`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccount = async (accountId: number | string) => {\n  return callApi(\"GET\", `/public/api/ver1/accounts/${accountId}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const getAccountTableData = async (accountId: number | string) => {\n  return callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountPieChartData = async (accountId: number | string) => {\n  return callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/pie_chart_data`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountActiveTradingEntities = async (\n  accountId: number | string\n) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts/${accountId}/active_trading_entities`\n  ).then((response: any) => response.json());\n};\n\nexport const getAccountBalanceChartData = async (\n  accountId: number | string,\n  dateFrom: string\n) => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/accounts/${accountId}/balance_chart_data?date_from=${dateFrom}`\n  ).then((response: any) => response.json());\n};\n\nexport const getDeals = async (\n  botId: number,\n  offset: number,\n  limit: number,\n  scope: string,\n  order: string\n): Promise<Array<IDealApi>> => {\n  return callApi(\n    \"GET\",\n    `/public/api/ver1/deals?bot_id=${botId}&offset=${offset}&limit=${limit}&scope=${scope}&order=${order}`,\n    dealsLimiter\n  ).then((response: any) => response.json());\n};\n\nexport const getStrategies = async () => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/marketplace/items?&limit=1000`\n  ).then((response: any) => response.json());\n};\n\nexport const getBotStats = async (botId: number) => {\n  return await callApi(\n    \"GET\",\n    `/public/api/ver1/bots/stats?bot_id=${botId}`\n  ).then((response: any) => response.json());\n};\n\nexport const getStorage = async (key: string) => {\n  return callApi(\"GET\", `/public/api/ver1/mini_apps/storage?key=${key}`).then(\n    (response: any) => response.json()\n  );\n};\n\nexport const setStorage = async (key: any, data: any) => {\n  return callApi(\n    \"POST\",\n    `/public/api/ver1/mini_apps/storage?key=${key}&data=${encodeURI(\n      JSON.stringify(data)\n    )}`\n  ).then((response: any) => response.json());\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"./NavBar.css\";\n\nexport const NavBar = () => {\n  const [activeKey, setActiveKey] = useState(\"DCA\");\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const goToGridbots = () => {\n    navigate({\n      pathname: `/gridbots`,\n      search: window.location.search,\n    });\n  };\n  const goToDCABots = () => {\n    navigate({\n      pathname: `/`,\n      search: window.location.search,\n    });\n  };\n  const goToSmartTrades = () => {\n    navigate({\n      pathname: `/smarttrades`,\n      search: window.location.search,\n    });\n  };\n\n  const goToSmartAccounts = () => {\n    navigate({\n      pathname: `/accounts`,\n      search: window.location.search,\n    });\n  };\n\n  useEffect(() => {\n    if (location.pathname === \"/\") {\n      setActiveKey(\"DCA\");\n    } else if (location.pathname === \"/gridbots\") {\n      setActiveKey(\"grid\");\n    } else if (location.pathname === \"/smarttrades\") {\n      setActiveKey(\"smarttrades\");\n    } else if (location.pathname === \"/accounts\") {\n      setActiveKey(\"accounts\");\n    }\n  }, [location]);\n\n  return (\n    <div className=\"NavBar\">\n      <div className=\"NavBarContainer\">\n        <div className=\"LogoContainer\">\n          <img className=\"Logo\" src={`/BotAn__icon.png`} alt=\"logo\" />\n        </div>\n        <div className=\"Navigation\">\n          <Nav>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"DCA\"} onClick={goToDCABots}>\n                DCA Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link active={activeKey === \"grid\"} onClick={goToGridbots}>\n                Grid Bots\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                active={activeKey === \"smarttrades\"}\n                onClick={goToSmartTrades}\n              >\n                Smart Trades\n              </Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n              <Nav.Link\n                active={activeKey === \"accounts\"}\n                onClick={goToSmartAccounts}\n              >\n                Accounts\n              </Nav.Link>\n            </Nav.Item>\n          </Nav>\n        </div>\n        <div\n          className=\"CommunityLink\"\n          onClick={() => {\n            window.open(\"https://t.me/BotAnMainChat\", \"_blank\");\n          }}\n        >\n          <span className=\"SupportLabel\">Community</span>\n          <img className=\"TelegramIcon\" src={`image 8.png`} alt=\"logo\" />\n        </div>\n      </div>\n      <Alert key=\"warning\" variant=\"warning\">\n        This is the FREE version of the BotAn App - the best bot analysis tool\n        for 3Commas. Free version is limited to show only one bot/trade. Please\n        subscribe to the BotAn PRO to get all benefits here:{\" \"}\n        <Alert.Link href=\"#\">https://3commas.io/d/apps/119</Alert.Link>.\n      </Alert>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\nimport { GridBotsAction } from \"./GridBotsActions\";\n\nexport interface IGridBotsState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: IGridBotFilters;\n  limit: number;\n  gridBots: { [key: number]: IGridBot };\n}\n\nexport const gridBotsStateInitializer = (\n  initialValue = initialGridBotsState\n): IGridBotsState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"GridBotsFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountType: \"spot\",\n  account: \"\",\n  sorting: \"created_at-desc\",\n};\n\nexport const initialGridBotsState: any = {\n  list: [],\n  hasMore: true,\n  limit: 10,\n  offset: 0,\n  filters: initialFiltersState,\n  gridBots: {},\n};\n\nexport function gridBotsReducer(\n  state: IGridBotsState = initialGridBotsState,\n  action: GridBotsAction\n): IGridBotsState {\n  switch (action.type) {\n    case \"setNewGridBotsList\":\n      const newList = action.payload.map((gridBot) => gridBot.id);\n      const newGridBots = _.keyBy(action.payload, \"id\");\n      if (newList.length > 0) {\n        return { ...state, list: [newList[0]], gridBots: newGridBots };\n      } else {\n        return { ...state, list: newList, gridBots: newGridBots };\n      }\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToGridBotsList\":\n      const list = action.payload.map((gridBot) => gridBot.id);\n      const gridBots = _.keyBy(action.payload, \"id\");\n      if (list.length > 0) {\n        return {\n          ...state,\n          list: [list[0]],\n          gridBots: { ...state.gridBots, ...gridBots },\n        };\n      } else {\n        return {\n          ...state,\n          list: list,\n          gridBots: { ...state.gridBots, ...gridBots },\n        };\n      }\n    case \"setGridBotsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setGridBotsFilters\":\n      return { ...state, filters: action.payload };\n    case \"setGridBot\":\n      return {\n        ...state,\n        gridBots: {\n          ...state.gridBots,\n          [action.payload.gridBotId]: action.payload.gridBot,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import _ from \"lodash\";\nimport { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\nimport { SmartTradesAction } from \"./SmartTradesActions\";\n\nexport interface ISmartTradesState {\n  list: Array<number>;\n  hasMore: boolean;\n  offset: number;\n  filters: ISmartTradeFilters;\n  limit: number;\n  smartTrades: { [key: number]: ISmartTrade };\n}\n\nexport const smartTradesStateInitializer = (\n  initialValue = initialSmartTradesState\n): ISmartTradesState => {\n  let storedFilters = null;\n  try {\n    storedFilters = JSON.parse(\n      (localStorage as any).getItem(\"smartTradesFiltersState\")\n    );\n  } catch {}\n  if (storedFilters) {\n    return { ...initialValue, filters: storedFilters };\n  } else {\n    return initialValue;\n  }\n};\n\nconst initialFiltersState = {\n  accountId: \"\",\n  sorting: \"created_at-desc\",\n  type: \"\",\n  status: \"all\",\n  from: { label: \"month\", from: \"\", to: \"\" },\n  pair: \"\",\n};\n\nexport const initialSmartTradesState: any = {\n  list: [],\n  hasMore: true,\n  limit: 100,\n  offset: 1,\n  filters: initialFiltersState,\n  smartTrades: {},\n};\n\nexport function smartTradesReducer(\n  state: ISmartTradesState = initialSmartTradesState,\n  action: SmartTradesAction\n): ISmartTradesState {\n  switch (action.type) {\n    case \"setNewSmartTradesList\":\n      const newList = action.payload.map((smartTrade) => smartTrade.id);\n      const newSmartTrades = _.keyBy(action.payload, \"id\");\n      if (newList.length > 0) {\n        return { ...state, list: [newList[0]], smartTrades: newSmartTrades };\n      } else {\n        return { ...state, list: newList, smartTrades: newSmartTrades };\n      }\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToSmartTradesList\":\n      const list = action.payload.map((smartTrade) => smartTrade.id);\n      const smartTrades = _.keyBy(action.payload, \"id\");\n      if (list.length > 0) {\n        return {\n          ...state,\n          list: [list[0]],\n          smartTrades: { ...state.smartTrades, ...smartTrades },\n        };\n      } else {\n        return {\n          ...state,\n          list: list,\n          smartTrades: { ...state.smartTrades, ...smartTrades },\n        };\n      }\n    case \"setSmartTradesOffset\":\n      return { ...state, offset: action.payload };\n    case \"setSmartTradesFilters\":\n      return { ...state, filters: action.payload };\n    case \"setSmartTrade\":\n      return {\n        ...state,\n        smartTrades: {\n          ...state.smartTrades,\n          [action.payload.smartTradeId]: action.payload.smartTrade,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import _ from \"lodash\";\nimport { IAccount } from \"../../interfaces/Account\";\nimport { AccountsAction } from \"./AccountsActions\";\n\nexport interface IAccountsState {\n  list: Array<number>;\n  accounts: { [key: number]: IAccount };\n  accountTableData: { [key: number]: IAccount };\n  accountPieChartData: { [key: number]: IAccount };\n  accountActiveTradingEntities: { [key: number]: IAccount };\n  hasMore: boolean;\n  offset: number;\n  limit: number;\n}\n\nexport const initialAccountsState: any = {\n  offset: 0,\n  hasMore: false,\n  list: [],\n  limit: 100,\n  accounts: {},\n  accountTableData: {},\n  accountPieChartData: {},\n  accountActiveTradingEntities: {},\n};\n\nexport function accountsReducer(\n  state: IAccountsState,\n  action: AccountsAction\n): IAccountsState {\n  switch (action.type) {\n    case \"setNewAccountsList\":\n      const newList = action.payload.map((account: any) => account.id);\n      const newAccounts = _.keyBy(action.payload, \"id\");\n      return { ...state, list: newList, accounts: newAccounts };\n    case \"setHasMore\":\n      return { ...state, hasMore: action.payload };\n    case \"addToAccountsList\":\n      const list = action.payload.map((account) => account.id);\n      const accounts = _.keyBy(action.payload, \"id\");\n      return {\n        ...state,\n        list: [...state.list, ...list],\n        accounts: { ...state.accounts, ...accounts },\n      };\n    case \"setAccountsOffset\":\n      return { ...state, offset: action.payload };\n    case \"setAccount\":\n      return {\n        ...state,\n        accounts: {\n          ...state.accounts,\n          [action.payload.accountId]: action.payload.account,\n        },\n      };\n    case \"setAccountTableData\":\n      return {\n        ...state,\n        accountTableData: {\n          ...state.accountTableData,\n          [action.payload.accountId]: action.payload.accountTableData,\n        },\n      };\n    case \"setAccountPieChartData\":\n      return {\n        ...state,\n        accountPieChartData: {\n          ...state.accountPieChartData,\n          [action.payload.accountId]: action.payload.accountPieChartData,\n        },\n      };\n    case \"setAccountActiveTradingEntities\":\n      return {\n        ...state,\n        accountActiveTradingEntities: {\n          ...state.accountActiveTradingEntities,\n          [action.payload.accountId]:\n            action.payload.accountActiveTradingEntities,\n        },\n      };\n    default:\n      throw new Error();\n  }\n}\n","import { IAccount } from \"../../interfaces/Account\";\n\ninterface ISetNewAccountsList {\n  type: \"setNewAccountsList\";\n  payload: Array<IAccount>;\n}\n\nexport const setNewAccountsList = (\n  accountsList: Array<IAccount>\n): ISetNewAccountsList => ({\n  type: \"setNewAccountsList\",\n  payload: accountsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToAccountsList {\n  type: \"addToAccountsList\";\n  payload: Array<IAccount>;\n}\n\nexport const addToAccountsList = (\n  accountsList: Array<IAccount>\n): IAddToAccountsList => ({\n  type: \"addToAccountsList\",\n  payload: accountsList,\n});\n\ninterface ISetAccountsOffset {\n  type: \"setAccountsOffset\";\n  payload: number;\n}\n\nexport const setAccountsOffset = (offset: number): ISetAccountsOffset => ({\n  type: \"setAccountsOffset\",\n  payload: offset,\n});\n\ninterface ISetAccount {\n  type: \"setAccount\";\n  payload: { accountId: number | string; account: any };\n}\n\nexport const setAccount = (\n  accountId: number | string,\n  account: any\n): ISetAccount => ({\n  type: \"setAccount\",\n  payload: { accountId, account },\n});\n\ninterface ISetAccountTableData {\n  type: \"setAccountTableData\";\n  payload: { accountId: number | string; accountTableData: any };\n}\n\nexport const setAccountTableData = (\n  accountId: number | string,\n  accountTableData: any\n): ISetAccountTableData => ({\n  type: \"setAccountTableData\",\n  payload: { accountId, accountTableData },\n});\n\ninterface ISetAccountPieChartData {\n  type: \"setAccountPieChartData\";\n  payload: { accountId: number | string; accountPieChartData: any };\n}\n\nexport const setAccountPieChartData = (\n  accountId: number | string,\n  accountPieChartData: any\n): ISetAccountPieChartData => ({\n  type: \"setAccountPieChartData\",\n  payload: { accountId, accountPieChartData },\n});\n\ninterface ISetAccountActiveTradingEntities {\n  type: \"setAccountActiveTradingEntities\";\n  payload: { accountId: number | string; accountActiveTradingEntities: any };\n}\n\nexport const setAccountActiveTradingEntities = (\n  accountId: number | string,\n  accountActiveTradingEntities: any\n): ISetAccountActiveTradingEntities => ({\n  type: \"setAccountActiveTradingEntities\",\n  payload: { accountId, accountActiveTradingEntities },\n});\n\nexport type AccountsAction =\n  | ISetAccountTableData\n  | ISetNewAccountsList\n  | ISetAccountActiveTradingEntities\n  | ISetAccountPieChartData\n  | ISetAccount\n  | IAddToAccountsList\n  | ISetAccountsOffset\n  | ISetHasMore;\n","import {\n  getAccount,\n  getAccountActiveTradingEntities,\n  getAccountPieChartData,\n  getAccounts,\n  getAccountTableData,\n} from \"../../utils/ApiUtils\";\n\nimport {\n  setNewAccountsList,\n  setAccountTableData,\n  setAccountPieChartData,\n  setAccountActiveTradingEntities,\n  setHasMore,\n  addToAccountsList,\n  setAccount,\n} from \"./AccountsActions\";\nimport { IAccountsState } from \"./AccountsReducer\";\n\nexport async function fetchAccounts(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  accountsDispatch(setHasMore(true));\n  accountsDispatch(setNewAccountsList([]));\n  const { limit } = accountsState;\n\n  const perPage = customLimit ? customLimit : limit;\n  try {\n    let hasMore = true;\n    let page = 1;\n\n    while (hasMore) {\n      const data: any = await getAccounts(page, perPage);\n      if (data.error) {\n        break;\n      }\n      accountsDispatch(addToAccountsList(data));\n      page = page + 1;\n      if (data.length < perPage) {\n        hasMore = false;\n      }\n    }\n    accountsDispatch(setHasMore(false));\n  } catch {\n    accountsDispatch(setNewAccountsList([]));\n    accountsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching accounts list\",\n    });\n  }\n}\n\nexport async function fetchAccount(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  try {\n    const account = await getAccount(accountId);\n    accountsDispatch(setAccount(accountId, account));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account ${accountId}`,\n    });\n  }\n}\n\nexport async function fetchAccountTableData(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountTableData } = accountsState;\n  try {\n    if (!(accountId in accountTableData)) {\n      const accountTableData = await getAccountTableData(accountId);\n      accountsDispatch(setAccountTableData(accountId, accountTableData));\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account table data`,\n    });\n  }\n}\nexport async function fetchAccountPieChartData(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountPieChartData } = accountsState;\n  try {\n    if (!(accountId in accountPieChartData)) {\n      const accountPieChartData = await getAccountPieChartData(accountId);\n      accountsDispatch(setAccountPieChartData(accountId, accountPieChartData));\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account pie chart data`,\n    });\n  }\n}\nexport async function fetchAccountActiveTradingEntities(\n  accountsDispatch: any,\n  accountsState: IAccountsState,\n  errorsDispatch: any,\n  accountId: number | string\n) {\n  const { accountActiveTradingEntities } = accountsState;\n  try {\n    if (!(accountId in accountActiveTradingEntities)) {\n      const accountActiveTradingEntities =\n        await getAccountActiveTradingEntities(accountId);\n      accountsDispatch(\n        setAccountActiveTradingEntities(accountId, accountActiveTradingEntities)\n      );\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching account active trading entities data`,\n    });\n  }\n}\n","export const TERMS_OF_USE =\n  \" DISCLAIMER: This application and all of its content is provided for informational and entertainment purposes only. We do not provide financial, investment, legal or tax advice. We are not a broker/dealer and we are not an investment advisor. All content on this website is not, and should not be regarded as “investment advice” or as a “recommendation” regarding a course of action. Always consult an independent financial professional before adopting any suggestion contained in, drawing any inference from or taking any other action in reliance on any content on this website that addresses financial, investment, tax and legal issues. We are not responsible for any adverse consequences of any financial, investment, tax and legal decision made based on the content on this website, including without limitation any loss of profit, which may arise directly or indirectly from use of or reliance on such content. RISK WARNING: Trading of and investing in cryptocurrencies and other investment products can carry a high level of risk, and may not be suitable for all investors. Trading and investing generally is not appropriate for someone with limited resources and limited investment or trading experience and low risk tolerance. You could sustain a total loss of your investment. Therefore, you should not speculate with capital that you cannot afford to lose. You should always understand that past performance is not necessarily indicative of future performance. Before trading and investing you should carefully consider your objectives, risk tolerance, financial resources, needs, your level of experience and other circumstances. Always seek advice from an independent financial advisor before making any trade or investment.\";\n","import React, { FC } from \"react\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { TERMS_OF_USE } from \"../../utils/UserUtils\";\nimport \"./Consent.css\";\n\nconst Consent = ({ show, handleClose }: any) => (\n  <div className=\"Consent\">\n    <Modal show={show} backdrop=\"static\" keyboard={false} size=\"lg\">\n      <Modal.Header>\n        <Modal.Title>Terms of use</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{TERMS_OF_USE}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"primary\" onClick={handleClose}>\n          I understand\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  </div>\n);\n\nexport default Consent;\n","import React, { createContext, useEffect, useReducer, useState } from \"react\";\nimport \"./App.css\";\nimport ErrorsAlerts from \"./components/ErrorsAlerts/ErrorsAlerts\";\nimport {\n  botsReducer,\n  botsStateInitializer,\n  initialBotsState,\n} from \"./state/bots/BotsReducer\";\nimport { dealsReducer, initialDealsState } from \"./state/deals/DealsReducer\";\nimport { getStorage, getStrategies, setStorage } from \"./utils/ApiUtils\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement,\n} from \"chart.js\";\nimport \"chartjs-adapter-moment\";\nimport { NavBar } from \"./components/NavBar/NavBar\";\nimport { Outlet } from \"react-router-dom\";\nimport {\n  gridBotsReducer,\n  gridBotsStateInitializer,\n  initialGridBotsState,\n} from \"./state/gridBots/GridBotsReducer\";\nimport {\n  initialSmartTradesState,\n  smartTradesReducer,\n  smartTradesStateInitializer,\n} from \"./state/smartTrades/SmartTradesReducer\";\nimport {\n  accountsReducer,\n  initialAccountsState,\n} from \"./state/accounts/AccountsReducer\";\nimport { fetchAccounts } from \"./state/accounts/AccountsEffects\";\nimport { Spinner } from \"react-bootstrap\";\nimport { TERMS_OF_USE } from \"./utils/UserUtils\";\nimport Consent from \"./components/Consent/Consent\";\n\nChartJS.register(\n  CategoryScale,\n  PointElement,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  LineElement,\n  Legend,\n  TimeScale,\n  Filler,\n  ArcElement\n);\n\nconst initialStrategiesState: any = {\n  strategies: [],\n};\n\nconst initialErrorsState: any = {\n  errors: [],\n};\n\nfunction errorsReducer(state = initialErrorsState, action: any) {\n  switch (action.type) {\n    case \"addError\":\n      const errors = new Set(state.errors);\n      errors.add(action.payload);\n      return { errors: [...Array.from(errors)] };\n    case \"cleanErrors\":\n      return { errors: [] };\n    default:\n      throw new Error();\n  }\n}\n\nfunction strategiesReducer(state = initialStrategiesState, action: any) {\n  switch (action.type) {\n    case \"setStrategies\":\n      return { strategies: [...action.payload] };\n    default:\n      throw new Error();\n  }\n}\n\nexport const AccountsContext = createContext({\n  accountsState: initialAccountsState,\n  accountsDispatch: (state: any) => {},\n});\n\nexport const StrategiesContext = createContext({\n  strategiesState: initialStrategiesState,\n  strategiesDispatch: (state: any) => {},\n});\n\nexport const ErrorsContext = createContext({\n  errorsState: initialErrorsState,\n  errorsDispatch: (state: any) => {},\n});\n\nexport const BotsContext = createContext({\n  botsState: initialBotsState,\n  botsDispatch: (state: any) => {},\n});\nexport const GridBotsContext = createContext({\n  gridBotsState: initialGridBotsState,\n  gridBotsDispatch: (state: any) => {},\n});\nexport const SmartTradesContext = createContext({\n  smartTradesState: initialSmartTradesState,\n  smartTradesDispatch: (state: any) => {},\n});\nexport const DealsContext = createContext({\n  dealsState: initialDealsState,\n  dealsDispatch: (state: any) => {},\n});\n\nfunction App() {\n  const [botsState, botsDispatch] = useReducer(\n    botsReducer,\n    initialBotsState,\n    botsStateInitializer\n  );\n  const [gridBotsState, gridBotsDispatch] = useReducer(\n    gridBotsReducer,\n    initialGridBotsState,\n    gridBotsStateInitializer\n  );\n\n  const [accountsState, accountsDispatch] = useReducer(\n    accountsReducer,\n    initialAccountsState\n  );\n  const [strategiesState, strategiesDispatch] = useReducer(\n    strategiesReducer,\n    initialStrategiesState\n  );\n  const [errorsState, errorsDispatch] = useReducer(\n    errorsReducer,\n    initialErrorsState\n  );\n  const [smartTradesState, smartTradesDispatch] = useReducer(\n    smartTradesReducer,\n    initialSmartTradesState,\n    smartTradesStateInitializer\n  );\n  const [dealsState, dealsDispatch] = useReducer(\n    dealsReducer,\n    initialDealsState\n  );\n\n  const getStrategiesData = async () => {\n    try {\n      const data = await getStrategies();\n      strategiesDispatch({ type: \"setStrategies\", payload: data });\n    } catch {\n      strategiesDispatch({ type: \"setStrategies\", payload: [] });\n      errorsDispatch({\n        type: \"addError\",\n        payload: \"Error when fetching strategies list\",\n      });\n    }\n  };\n\n  const [showConsent, setShowConsent] = useState(false);\n  const [consent, setConsent] = useState({ text: \"empty\" });\n\n  useEffect(() => {\n    getStorage(\"consent\")\n      .then((data) => {\n        setConsent(JSON.parse(data.data.replaceAll(\"=>\", \":\")));\n      })\n      .catch(() => {\n        setShowConsent(true);\n      });\n\n    fetchAccounts(accountsDispatch, accountsState, errorsDispatch);\n    getStrategiesData();\n  }, []);\n\n  useEffect(() => {\n    if (consent.text === \"empty\") {\n      return;\n    }\n    if (consent.text !== TERMS_OF_USE) {\n      setShowConsent(true);\n    }\n  }, [consent]);\n\n  const postConsent = async () => {\n    const request = await setStorage(\"consent\", {\n      text: TERMS_OF_USE,\n      date: new Date().toString(),\n    });\n    console.log(request);\n    if (!request.error) {\n      setShowConsent(false);\n    }\n  };\n\n  const { list } = accountsState;\n\n  return (\n    <ErrorsContext.Provider value={{ errorsState, errorsDispatch }}>\n      <StrategiesContext.Provider\n        value={{ strategiesState, strategiesDispatch }}\n      >\n        <AccountsContext.Provider value={{ accountsState, accountsDispatch }}>\n          <BotsContext.Provider value={{ botsState, botsDispatch }}>\n            <SmartTradesContext.Provider\n              value={{ smartTradesState, smartTradesDispatch }}\n            >\n              <GridBotsContext.Provider\n                value={{ gridBotsState, gridBotsDispatch }}\n              >\n                <DealsContext.Provider value={{ dealsState, dealsDispatch }}>\n                  <Consent show={showConsent} handleClose={postConsent} />\n                  <div className=\"App\">\n                    <NavBar />\n                    {list.length > 0 ? (\n                      <Outlet />\n                    ) : (\n                      <div className=\"SpinnerContainer\">\n                        <Spinner animation=\"grow\" />\n                      </div>\n                    )}\n                    <ErrorsAlerts />\n                  </div>\n                </DealsContext.Provider>\n              </GridBotsContext.Provider>\n            </SmartTradesContext.Provider>\n          </BotsContext.Provider>\n        </AccountsContext.Provider>\n      </StrategiesContext.Provider>\n    </ErrorsContext.Provider>\n  );\n}\n\nexport default App;\n","import { IDeal } from \"../../interfaces/Deal\";\nimport { getDealAgeInHours } from \"../../utils/DealsUtils\";\nimport { IDealsState } from \"./DealsReducer\";\n\nexport const INFINITY_IN_DAYS = 100000;\nconst hoursWithin30Days = 24 * 30;\n\nexport const is30daysDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals && state.deals[botId] && state.deals[botId].period >= 30;\n\nexport const isAllDealsLoaded = (state: IDealsState, botId: number) =>\n  botId in state.deals &&\n  state.deals[botId] &&\n  state.deals[botId].period >= INFINITY_IN_DAYS;\n\nexport const selectAllDealsWithin30Days = (\n  state: IDealsState,\n  botId: number\n) => {\n  return is30daysDealsLoaded(state, botId)\n    ? state.deals[botId].list.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin30Days\n      )\n    : [];\n};\n\nexport const selectAllDeals = (state: IDealsState, botId: number) => {\n  return isAllDealsLoaded(state, botId) ? state.deals[botId].list : [];\n};\n\nexport const filterAllSuccessfulDeals = (deals: IDeal[]) => {\n  return deals.filter(\n    (deal: IDeal) => deal.status !== \"failed\" && deal.status !== \"cancelled\"\n  );\n};\n","import { getDeals } from \"./ApiUtils\";\nimport moment from \"moment\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport _ from \"lodash\";\nimport { IDealsState } from \"../state/deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../state/deals/DealsSelectors\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\n\nexport const differenceInHours = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60));\n\nexport const differenceInDays = (a: any, b: any) =>\n  Math.ceil(a.diff(b) / (1000 * 60 * 60 * 24));\n\nexport const getDealAgeInHours = (deal: any) =>\n  differenceInHours(moment(), moment(deal.closed_at));\n\nexport const getDealAgeInDaysSinceOpened = (deal: any) =>\n  differenceInDays(moment(), moment(deal.created_at));\n\nexport const getAllDealsForOneBot = async (\n  botId: number,\n  daysWithin = 30,\n  ofsetCallback = (offset: number) => {}\n) => {\n  const hoursWithin = 24 * daysWithin;\n  const limit = 1000;\n  let offset = 0;\n  let deals: any = [];\n\n  const fetchAllDealsInLoop = async () => {\n    const newDeals = await getDeals(\n      botId,\n      offset,\n      limit,\n      \"finished\",\n      \"closed_at\"\n    );\n\n    if (newDeals.length === 0) {\n      return;\n    }\n\n    const [lastDeal] = newDeals.slice(-1);\n\n    if (\n      newDeals.length === limit &&\n      getDealAgeInHours(lastDeal) <= hoursWithin\n    ) {\n      offset = offset + limit;\n      deals = [...deals, ...newDeals];\n      ofsetCallback(offset);\n      await fetchAllDealsInLoop();\n    } else {\n      const filteredDeals = newDeals.filter(\n        (deal: any) => getDealAgeInHours(deal) <= hoursWithin\n      );\n      deals = [...deals, ...filteredDeals];\n    }\n  };\n\n  await fetchAllDealsInLoop();\n\n  return deals;\n};\n\nexport const getObjectOfProfitPerDay = (deals: Array<IDeal>) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  let result = _.groupBy(deals, dateString);\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfProfitPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.sum(deals.map((deal: IDeal) => parseFloat(deal.usd_final_profit)))\n  );\n};\n\nexport const getObjectOfSOPerPair = (deals: Array<IDeal>) => {\n  let result = _.groupBy(deals, \"pair\");\n  return _.mapValues(result, (deals: Array<IDeal>) =>\n    _.mean(deals.map((deal: IDeal) => deal.completed_safety_orders_count))\n  );\n};\n\nexport const calculateProfitPerDayForListOfBots = (\n  dealsState: IDealsState,\n  botsIds: Array<number>\n) => {\n  return botsIds.reduce((currentObj: any, botId: number) => {\n    const botsDeals = getObjectOfProfitPerDay(\n      selectAllDealsWithin30Days(dealsState, botId)\n    );\n\n    return _.mergeWith(\n      botsDeals,\n      currentObj,\n      (profit1: number, profit2: number) => {\n        profit1 = profit1 || 0;\n        profit2 = profit2 || 0;\n        return profit1 + profit2;\n      }\n    );\n  }, {});\n};\n\nexport const calculateProfitPerBot = (\n  dealsState: IDealsState,\n  botId: number\n) => {\n  const botsDeals = selectAllDealsWithin30Days(dealsState, botId);\n  return _.sum(\n    botsDeals.map((deal: IDeal) => parseFloat(deal.usd_final_profit))\n  );\n};\n\nexport const getLastNDays = (n: number = 30) =>\n  [...new Array(n)]\n    .map((i, idx) => moment().startOf(\"day\").subtract(idx, \"days\"))\n    .map((date: any) => date.format(\"YYYY-MM-DD\"))\n    .reverse();\n\nexport const getProfitChartData = (profitObject: any, nDays = 30) => {\n  const lastDays = getLastNDays(nDays);\n\n  const profits = lastDays.map((day: string) => {\n    return day in profitObject ? profitObject[day] : 0;\n  });\n\n  const labels = lastDays.map((day: any) => moment(day, \"YYYY-MM-DD\"));\n  return [labels, profits];\n};\n\nexport const getAccumulativeProfitChartData = (\n  profitObject: any,\n  nDays = 30\n) => {\n  const profits = getProfitChartData(profitObject, nDays);\n  let currentvalue = 0;\n  const accProfits = profits[1].map((profit: any) => {\n    const acc = currentvalue + profit;\n    currentvalue = acc;\n    return acc;\n  });\n  return [profits[0], accProfits];\n};\n\nexport const getDealsCountPerDay = (deals: IDeal[], dates: string[]) => {\n  const dateString = (item: IDeal) =>\n    moment(item.closed_at).format(\"YYYY-MM-DD\");\n\n  const delsGrouped = _.groupBy(deals, dateString);\n  const result = _.mapValues(\n    delsGrouped,\n    (deals: Array<IDeal>) => deals.length\n  );\n\n  return dates.map((day: string) => {\n    return day in result ? result[day] : 0;\n  });\n};\n\nexport const dealsStatusesCounts = (deals: IDeal[]) => {\n  const countsObj = _.countBy(deals, (deal) => deal.localized_status);\n  const keys = [\n    \"Cancelled\",\n    \"StopLoss\",\n    \"Failed\",\n    \"Completed\",\n    \"Closed at Market Price\",\n    \"Liquidated\",\n    \"Switched\",\n  ];\n  const values = keys.map((key) => countsObj[key]);\n  return [keys, values];\n};\n\nexport const getDealsDurationHistogramData = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return differenceInHours(end, start);\n  });\n  const countsObj = _.countBy(dealDurations);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getDealsSOHistogramData = (deals: IDeal[]) => {\n  const dealSO = deals.map((deal) => deal.completed_safety_orders_count);\n  const countsObj = _.countBy(dealSO);\n\n  const keys = _.keys(countsObj).map((key) => parseInt(key));\n  const values = keys.map((key) => countsObj[key]);\n\n  return [keys, values];\n};\n\nexport const getAverageDealDuration = (deals: IDeal[]) => {\n  const dealDurations = deals.map((deal) => {\n    let start = moment(deal.created_at);\n    let end = deal.closed_at ? moment(deal.closed_at) : moment();\n    return end.diff(start);\n  });\n\n  const avgDealDurationInMilliseconds =\n    _.sum(dealDurations) / dealDurations.length || 0;\n\n  const duration = moment.duration(avgDealDurationInMilliseconds);\n  const days = Math.floor(duration.asDays());\n  const daysFormatted = days ? `${days}d ` : \"\";\n\n  //Get Hours\n  const hours = duration.hours();\n  const hoursFormatted = `${hours}h `;\n\n  //Get Minutes\n  const minutes = duration.minutes();\n  const minutesFormatted = `${minutes}m`;\n\n  return `${daysFormatted} ${hoursFormatted} ${minutesFormatted}`;\n};\n\nexport const getOneBotAccumulativeProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getAccumulativeProfitChartData(botsDeals, 30)\n    : getAccumulativeProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotProfitsChartData = (deals: IDeal[]) => {\n  const botsDeals = getObjectOfProfitPerDay(deals);\n  const difference =\n    deals.length > 0\n      ? differenceInDays(\n          moment(),\n          moment(deals.map((deal) => deal).reverse()[0].closed_at)\n        )\n      : 0;\n  return difference < 30\n    ? getProfitChartData(botsDeals, 30)\n    : getProfitChartData(botsDeals, difference + 1);\n};\n\nexport const getOneBotCurrencyLeaderbord = (deals: IDeal[]) => {\n  const profitsByPair = getObjectOfProfitPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getOneBotSOLeaderbord = (deals: IDeal[], dir = \"desc\") => {\n  const profitsByPair = getObjectOfSOPerPair(deals);\n  const sortedProfits = _(profitsByPair)\n    .toPairs()\n    .orderBy([1], [dir as any])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n\nexport const getAverageTp = (deals: IDeal[]) => {\n  return {\n    value:\n      _.mean(deals.map((deal) => parseFloat(deal.final_profit_percentage))) ||\n      0,\n    currency: \"%\",\n  };\n};\n\nexport const getAverageProfitFromDeal = (deals: IDeal[]) => {\n  return {\n    value: _.mean(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0,\n    currency: \"$\",\n  };\n};\n\nexport const getTotalProfitUsd = (deals: IDeal[]) => {\n  return _.sum(deals.map((deal) => parseFloat(deal.usd_final_profit))) || 0;\n};\n\nexport const getAverageDailyProfit = (\n  createdAt: string,\n  deals: IDeal[],\n  fromFilter: any,\n  toFilter: any\n) => {\n  const startBotDate = moment.utc(createdAt);\n  const fromFilterMoment = moment.utc(fromFilter).startOf(\"day\");\n  const toFilterMoment = moment.utc(toFilter).startOf(\"day\");\n\n  const maxDate = moment.max([fromFilterMoment, startBotDate]);\n\n  const profitsData = _.unzip(\n    _.zip(...getOneBotProfitsChartData(deals)).filter(\n      (chartData) =>\n        !chartData[0].isBefore(maxDate, \"day\") &&\n        !chartData[0].isAfter(toFilterMoment, \"day\")\n    )\n  );\n\n  return {\n    value: _.mean(profitsData[1]),\n    currency: \"$\",\n  };\n};\n\nexport const getAverageDailyProfitFromAllDeals = (deals: IDeal[]) => {\n  const profitsData = _.unzip(_.zip(...getOneBotProfitsChartData(deals)));\n\n  return {\n    value: _.mean(profitsData[1]),\n    currency: \"$\",\n  };\n};\n","import moment from \"moment\";\nimport React, { useEffect, useRef } from \"react\";\nimport { callApi } from \"./ApiUtils\";\n\nexport const usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const convertFilterValueToDate = (filterFrom: any) => {\n  const dateFormat = \"YYYY-MM-DD\";\n\n  const filterValue = filterFrom.label;\n\n  if (filterValue === \"today\") {\n    return moment().subtract(1, \"day\").format(dateFormat);\n  } else if (filterValue === \"week\") {\n    return moment().subtract(1, \"week\").format(dateFormat);\n  } else if (filterValue === \"month\") {\n    return moment().subtract(1, \"months\").format(dateFormat);\n  } else if (filterValue === \"custom\") {\n    return filterFrom.from\n      ? moment(filterFrom.from).format(dateFormat)\n      : moment().format(dateFormat);\n  }\n  return \"\";\n};\n\nexport const getCurrencyValueInUsd = async (\n  market_code: any,\n  currency: any,\n  valueInCurrency: any\n) => {\n  if (currency.includes(\"USD\")) {\n    return Promise.resolve(valueInCurrency);\n  } else {\n    const responseUsdt = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USDT_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n\n    if (responseUsdt) {\n      return responseUsdt * valueInCurrency;\n    }\n\n    const responseUsd = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=USD_${currency}`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n\n    if (responseUsd) {\n      return responseUsd * valueInCurrency;\n    }\n\n    const responseUsdBack = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=${currency}_USD`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n    if (responseUsdBack) {\n      return valueInCurrency / responseUsdBack;\n    }\n\n    const responseUsdtBack = await callApi(\n      \"GET\",\n      `/public/api/ver1/accounts/currency_rates?market_code=${market_code}&pair=${currency}_USDT`\n    )\n      .then((response: any) => response.json())\n      .then((marketInfo: any) => parseFloat(marketInfo.last));\n    if (responseUsdtBack) {\n      return valueInCurrency / responseUsdtBack;\n    }\n\n    return NaN;\n  }\n};\n","import _ from \"lodash\";\nimport { IBot } from \"../interfaces/Bot\";\nimport { IDeal } from \"../interfaces/Deal\";\nimport { IBotsState } from \"../state/bots/BotsReducer\";\nimport { callApi } from \"./ApiUtils\";\nimport { calculateProfitPerBot } from \"./DealsUtils\";\nimport { getCurrencyValueInUsd } from \"./GeneralUtils\";\n\nexport async function getMaxUsage(bot: any, account: any) {\n  if (!bot || !account || !account.id) {\n    return 0;\n  }\n\n  const maxActiveDeals = parseInt(bot.max_active_deals);\n  let baseOrderVolume = parseFloat(bot.base_order_volume);\n  const maxSafetyOrders = parseInt(bot.max_safety_orders);\n  let safetyOrderVolume = parseFloat(bot.safety_order_volume);\n  const leverage = parseFloat(bot.leverage_custom_value);\n  const martingale = parseFloat(bot.martingale_volume_coefficient);\n\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n\n  if (bot.base_order_volume_type === \"quote_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      quoteCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"base_currency\") {\n    const orderVolums = await convertOrderVolumesToUsdFromOtherCurrencies(\n      account.market_code,\n      baseCurrency,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  } else if (bot.base_order_volume_type === \"percent\") {\n    const orderVolums = await convertOrderVolumesToUsdFromPercents(\n      bot.account_id,\n      quoteCurrency,\n      baseCurrency,\n      account.market_code,\n      bot.strategy,\n      baseOrderVolume,\n      safetyOrderVolume\n    );\n    baseOrderVolume = orderVolums.baseOrderVolume;\n    safetyOrderVolume = orderVolums.safetyOrderVolume;\n  }\n\n  if (leverage) {\n    baseOrderVolume = baseOrderVolume / leverage;\n    safetyOrderVolume = safetyOrderVolume / leverage;\n  }\n  let maxUsage = 0;\n  if (martingale !== 1 && maxSafetyOrders > 1) {\n    const safetyOrderVolumes =\n      (safetyOrderVolume * (1 - martingale ** maxSafetyOrders)) /\n      (1 - martingale);\n    maxUsage = (safetyOrderVolumes + baseOrderVolume) * maxActiveDeals;\n  } else {\n    maxUsage =\n      (maxSafetyOrders * safetyOrderVolume + baseOrderVolume) * maxActiveDeals;\n  }\n\n  return maxUsage;\n}\n\nconst convertOrderVolumesToUsdFromOtherCurrencies = async (\n  market_code: any,\n  currency: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  return {\n    baseOrderVolume: await getCurrencyValueInUsd(\n      market_code,\n      currency,\n      baseOrderVolume\n    ),\n    safetyOrderVolume: await getCurrencyValueInUsd(\n      market_code,\n      currency,\n      safetyOrderVolume\n    ),\n  };\n};\n\nconst convertOrderVolumesToUsdFromPercents = async (\n  accountId: any,\n  quoteCurrency: any,\n  baseCurency: any,\n  marketCode: any,\n  botStrategy: any,\n  baseOrderVolume: any,\n  safetyOrderVolume: any\n) => {\n  const currencyForCalc =\n    isSpotAccount(marketCode) && botStrategy === \"short\"\n      ? baseCurency\n      : quoteCurrency;\n\n  const accountBalances = await callApi(\n    \"POST\",\n    `/public/api/ver1/accounts/${accountId}/account_table_data`\n  ).then((response: any) => response.json());\n  const balance = accountBalances.find(\n    (accountBalance: any) => accountBalance.currency_code === currencyForCalc\n  );\n\n  let available = 0;\n  if (balance) {\n    available =\n      (parseFloat(balance.equity) - parseFloat(balance.on_orders)) *\n      parseFloat(balance.current_price_usd);\n  }\n\n  return {\n    baseOrderVolume: (baseOrderVolume * available) / 100,\n    safetyOrderVolume: (safetyOrderVolume * available) / 100,\n  };\n};\n\nexport const isSpotAccount = (marketCode: any) =>\n  [\n    \"binance_futures\",\n    \"binance_futures_coin\",\n    \"bybit_usdt_perpetual\",\n    \"bybit\",\n    \"ftx_futures\",\n    \"bitmex\",\n  ].indexOf(marketCode) === -1;\n\nexport function getFundsLocked(bot: any) {\n  const leverage = parseFloat(bot.leverage_custom_value);\n  return leverage ? bot.fundsLocked / leverage : bot.fundsLocked;\n}\n\nexport function getFundsLockedInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let fundsLocked = 0;\n  let currency = quoteCurrency;\n\n  if (bot.strategy === \"long\") {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.bought_volume),\n      0\n    );\n    currency = quoteCurrency;\n  } else if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_amount),\n      0\n    );\n    currency = baseCurrency;\n  } else if (bot.strategy === \"short\" && !isSpotAccount(account.market_code)) {\n    fundsLocked = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.sold_volume),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  const leverage = parseFloat(bot.leverage_custom_value);\n\n  return {\n    value: leverage ? fundsLocked / leverage : fundsLocked,\n    currency,\n  };\n}\n\nexport const getBaseOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let additionalCurrency = \"\";\n\n  if (bot.base_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.base_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.base_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getSafetyOrderSize = (bot: IBot, account: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n\n  let additionalCurrency = \"\";\n\n  if (bot.safety_order_volume_type === \"percent\") {\n    currency = \"%\";\n    additionalCurrency =\n      bot.strategy === \"short\" && isSpotAccount(account.market_code)\n        ? baseCurrency\n        : \"\";\n  } else {\n    currency =\n      bot.safety_order_volume_type === \"quote_currency\"\n        ? quoteCurrency\n        : baseCurrency;\n  }\n  return {\n    value: parseFloat(bot.safety_order_volume),\n    currency,\n    additionalCurrency,\n  };\n};\n\nexport const getCurrencyFormat = (\n  { value, currency }: any,\n  signDisplay: any = \"auto\"\n) => {\n  if (currency.includes(\"BTC\")) {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 6,\n      signDisplay,\n    }).format(value);\n  } else if (currency === \"marketPrice\") {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 8,\n      signDisplay,\n    }).format(value);\n  } else {\n    return new Intl.NumberFormat(\"en-US\", {\n      maximumFractionDigits: 2,\n      signDisplay,\n    }).format(value);\n  }\n};\n\nexport async function getMaxUsageInBotCurrency(bot: IBot, account: any) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let maxUsageInUsd = 0;\n\n  if (bot.maxUsage) {\n    maxUsageInUsd = bot.maxUsage;\n  } else {\n    maxUsageInUsd = await getMaxUsage(bot, account);\n  }\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    currency = baseCurrency;\n  } else {\n    currency = quoteCurrency;\n  }\n  const currencyPriceInUsd = await getCurrencyValueInUsd(\n    account.market_code,\n    currency,\n    1\n  );\n  return {\n    value: maxUsageInUsd / currencyPriceInUsd,\n    currency,\n  };\n}\n\nexport function getReservedFundsInBotCurrency(\n  activeDeals: IDeal[],\n  bot: IBot,\n  account: any\n) {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  let currency = quoteCurrency;\n  let reservedFunds = 0;\n\n  if (bot.strategy === \"short\" && isSpotAccount(account.market_code)) {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_base_funds.toString()),\n      0\n    );\n    currency = baseCurrency;\n  } else {\n    reservedFunds = activeDeals.reduce(\n      (sum, deal) => sum + parseFloat(deal.reserved_quote_funds.toString()),\n      0\n    );\n    currency = quoteCurrency;\n  }\n  return {\n    value: reservedFunds,\n    currency,\n  };\n}\n\nexport function getReturns(maxUsage: any, deals: any) {\n  if (maxUsage === 0) {\n    return 0;\n  }\n  const profit30Days = deals.reduce(\n    (currDeal: any, nextDeal: any) => ({\n      usd_final_profit:\n        parseFloat(currDeal.usd_final_profit) +\n        parseFloat(nextDeal.usd_final_profit),\n    }),\n    { usd_final_profit: 0 }\n  )[\"usd_final_profit\"];\n\n  return profit30Days / maxUsage;\n}\n\nexport function getBotsLeaderboardChartData(\n  botsState: IBotsState,\n  dealsState: any\n) {\n  const bots = botsState.list.map((botId: number) => {\n    const bot = botsState.bots[botId];\n    return {\n      profit: calculateProfitPerBot(dealsState, botId) || 0,\n      name: bot.name,\n    };\n  });\n  const sortedAndSelected10FirstBots = _.sortBy(bots, [\"profit\"])\n    .reverse()\n    .slice(0, 10);\n  return [\n    sortedAndSelected10FirstBots.map((bot) => bot.name),\n    sortedAndSelected10FirstBots.map(\n      (bot) => Math.round((bot.profit + Number.EPSILON) * 100) / 100\n    ),\n  ];\n}\n\nexport function getAllActiveDeals(botsState: IBotsState) {\n  return botsState.list.reduce((acc, botId: number) => {\n    const bot = botsState.bots[botId];\n    return acc + bot.active_deals_count;\n  }, 0);\n}\n\nexport function getSummirizedUpnl(botsState: IBotsState) {\n  return botsState.list.reduce((acc, botId: number) => {\n    const bot = botsState.bots[botId];\n    return acc + parseFloat(bot.active_deals_usd_profit);\n  }, 0);\n}\n\nexport function getSummirizedFundsLocked(botsState: IBotsState) {\n  return botsState.list.reduce((acc, botId: number) => {\n    const bot = botsState.bots[botId];\n    return acc + getFundsLocked(bot);\n  }, 0);\n}\n","import moment from \"moment\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext } from \"../../../../App\";\nimport { IAccount } from \"../../../../interfaces/Account\";\nimport {\n  fetchAccountActiveTradingEntities,\n  fetchAccountPieChartData,\n} from \"../../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./AccountPreview.css\";\n\nvar stringToColour = function (str: any) {\n  var hash = 0;\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  var colour = \"#\";\n  for (var i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n};\n\nconst AccountPreview: FC<any> = ({ accountId }: any) => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountActiveTradingEntities } =\n    accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [account, setAccount] = useState<IAccount | null>(null);\n  const [accountPieChart, setAccountPieChart] = useState<any>(null);\n  const [accountActiveTrading, setAccountActiveTrading] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchAccountPieChartData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      accountId\n    );\n    fetchAccountActiveTradingEntities(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      accountId\n    );\n    setAccount(accounts[accountId]);\n  }, [accountId]);\n\n  useEffect(() => {\n    if (accountId in accountPieChartData) {\n      setAccountPieChart(accountPieChartData[accountId]);\n    }\n  }, [accountPieChartData]);\n\n  useEffect(() => {\n    if (accountId in accountActiveTradingEntities) {\n      setAccountActiveTrading(accountActiveTradingEntities[accountId]);\n    }\n  }, [accountActiveTradingEntities]);\n\n  return (\n    <div className=\"AccountPreview\">\n      <div className=\"AccountPreviewColumn\">\n        {account && accountPieChart && (\n          <AccountIcons account={account} accountPieChart={accountPieChart} />\n        )}\n        {account && <AccountInfo account={account} />}\n      </div>\n      <div\n        className=\"AccountPreviewColumn\"\n        style={{ flexGrow: 1, marginLeft: \"16px\" }}\n      >\n        {account && (\n          <>\n            <div className=\"AccountNameContainer\">\n              <span className=\"AccountName\">{account.name}</span>\n            </div>\n\n            <div className=\"AccountPreviewTable\">\n              <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                <thead>\n                  <tr>\n                    <th>Balance value</th>\n                    <th>24 hr change</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>{`${getCurrencyFormat({\n                      value: parseFloat(account.usd_amount),\n                      currency: \"USD\",\n                    })} $`}</td>\n                    <td\n                      className={\n                        parseFloat(account.day_profit_usd) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(account.day_profit_usd),\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                  <tr>\n                    <td style={{ fontWeight: \"bold\" }}>{`${getCurrencyFormat({\n                      value: parseFloat(account.btc_amount),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                    <td\n                      className={\n                        parseFloat(account.day_profit_btc) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(account.day_profit_btc),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          </>\n        )}\n        {accountActiveTrading && accountActiveTrading.data && (\n          <div className=\"AccountPreviewTable\" style={{ marginTop: \"16px\" }}>\n            <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n              <thead>\n                <tr>\n                  <th>DCA bots</th>\n                  <th>Deals</th>\n                  <th>Smart Trades</th>\n                  <th>Grid Bots</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>{accountActiveTrading.data.active_bots_count}</td>\n                  <td>{accountActiveTrading.data.active_deals_count}</td>\n                  <td>{accountActiveTrading.data.active_smart_trades_count}</td>\n                  <td>{accountActiveTrading.data.active_grid_bots_count}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </div>\n        )}\n        <div className=\"AccountPreviewButtonContainer\">\n          <Button\n            className=\"AccountPreviewButton\"\n            onClick={() => {\n              navigate({\n                pathname: `/accounts/${accountId}`,\n                search: window.location.search,\n              });\n            }}\n          >\n            View\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst marketTypes = { spot: \"S\", margin: \"M\", futures: \"F\" } as any;\n\nexport const AccountIcons = ({ account, accountPieChart }: any) => (\n  <div className=\"AccountPieChart\">\n    <div className=\"AccountTypeIconContainer\">\n      {marketTypes[account.supported_market_types[0]]}\n    </div>\n    {\"market_icon\" in account && (\n      <div className=\"AccountIconContainer\">\n        <div\n          className=\"AccountIcon\"\n          style={{\n            backgroundImage: `url(${account.market_icon})`,\n          }}\n        ></div>\n      </div>\n    )}\n    {account && accountPieChart.length > 0 ? (\n      <div className=\"AccountPieChartContainer\">\n        <AccountPieChart accountPieChart={accountPieChart} />\n      </div>\n    ) : (\n      <div className=\"AccountPieChartContainerEmpty\"></div>\n    )}\n  </div>\n);\n\nexport const AccountPieChart = ({ accountPieChart }: any) => (\n  <Pie\n    data={{\n      labels: accountPieChart.map((dataItem: any) => dataItem.code),\n      datasets: [\n        {\n          data: accountPieChart.map((dataItem: any) => dataItem.y),\n          backgroundColor: accountPieChart.map((dataItem: any) =>\n            dataItem.code.includes(\"USD\") && dataItem.code.length < 6\n              ? \"#00a59a\"\n              : stringToColour(dataItem.code)\n          ),\n          borderWidth: 0,\n        },\n      ],\n    }}\n    options={\n      {\n        plugins: {\n          legend: {\n            display: false,\n          },\n          tooltip: {\n            callbacks: {\n              label: (tooltipItem: any) => {\n                const dataset = tooltipItem.dataset;\n                const currentValue = dataset.data[tooltipItem.dataIndex];\n                return `${tooltipItem.label} ${currentValue}%`;\n              },\n            },\n            bodyFont: { size: 10 },\n          },\n        },\n      } as any\n    }\n  />\n);\n\nexport const AccountInfo = ({ account }: any) => (\n  <div className=\"AccountInfoContainer\">\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">Created:</div>\n      <div className=\"AccountInfoValue\">{`${moment(account.created_at).format(\n        \"DD/MM/YYYY\"\n      )}`}</div>\n    </div>\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">Updated:</div>\n      <div className=\"AccountInfoValue\">{`${moment(account.updated_at).format(\n        \"DD/MM/YYYY\"\n      )}`}</div>\n    </div>\n    <div className=\"AccountInfoRecordContainer\">\n      <div className=\"AccountInfoLabel\">API status:</div>\n      <div className=\"AccountInfoValue\">{`${\n        account.api_key_invalid ? \"Invalid\" : \"OK\"\n      }`}</div>\n    </div>\n  </div>\n);\n\nexport default AccountPreview;\n","export const ProfitChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const AccumulativeChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\nexport const TimeLineChartOptions = (\n  text: string,\n  tooltipCustomVaueFormat: any = null\n) => ({\n  lineTension: 0.5,\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: \"week\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n      gridLines: { offsetGridLines: true },\n    },\n    y: {\n      beginAtZero: true,\n    },\n  },\n  responsive: true,\n  maintainAspectRatio: false,\n  plugins: {\n    filler: {\n      propagate: true,\n      drawTime: \"beforeDatasetDraw\",\n    },\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        ...(tooltipCustomVaueFormat && { label: tooltipCustomVaueFormat }),\n      },\n    },\n  },\n});\n\nexport const LeaderbordChartOptions = (text: string, labels: any) => ({\n  indexAxis: \"y\" as const,\n  scales: {\n    x: {\n      autoSkip: false,\n      stacked: false,\n      beginAtZero: true,\n    },\n    y: {\n      stacked: true,\n      beginAtZero: true,\n      ticks: {\n        autoSkip: false,\n        callback: (value: any) => {\n          return labels[value].length > 35\n            ? labels[value].slice(0, 33) + \"...\"\n            : labels[value];\n        },\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"y\",\n    },\n  },\n});\n\nexport const DealsCountBarChartOptions = (\n  text: string,\n  isWeekUnit: boolean = true\n) => ({\n  scales: {\n    x: {\n      type: \"time\",\n      time: {\n        unit: isWeekUnit ? \"week\" : \"month\",\n        tooltipFormat: \"dddd, D MMM, YYYY\",\n      },\n      ticks: {\n        source: \"auto\",\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n\nexport const HistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  // crossAlign: \"near\",\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n      callbacks: {\n        label: (tooltipItem: any) => {\n          const dataset = tooltipItem.dataset;\n          const total = dataset.data.reduce(function (\n            previousValue: any,\n            currentValue: any\n          ) {\n            return previousValue + currentValue;\n          });\n          const currentValue = dataset.data[tooltipItem.dataIndex];\n          const percentage = Math.floor((currentValue / total) * 100 + 0.5);\n          return ` ${currentValue} deals (${percentage}%)`;\n        },\n        title: (tooltipItem: any) => {\n          const label = parseInt(tooltipItem[0].label);\n          return `Duration from ${label - 1} to ${label} hours`;\n        },\n      },\n    },\n  },\n});\n\nexport const NumberHistogramChartOptions = (\n  text: string,\n  xLabel: string,\n  yLabel: string\n) => ({\n  barPercentage: 1.25,\n  scales: {\n    x: {\n      beginAtZero: true,\n      suggestedMin: 0,\n      type: \"linear\",\n      ticks: {\n        source: \"auto\",\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: xLabel,\n      },\n    },\n    y: {\n      beginAtZero: true,\n      ticks: {\n        stepSize: 1,\n      },\n      title: {\n        display: true,\n        text: yLabel,\n      },\n    },\n  },\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n    title: {\n      display: true,\n      text,\n    },\n    tooltip: {\n      intersect: false,\n      mode: \"x\",\n    },\n  },\n});\n","import moment from \"moment\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport {\n  ButtonGroup,\n  FormControl,\n  Table,\n  ToggleButton,\n  FormCheck,\n  Button,\n} from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router\";\nimport { AccountsContext, ErrorsContext } from \"../../../App\";\nimport { IAccount } from \"../../../interfaces/Account\";\nimport {\n  fetchAccount,\n  fetchAccountPieChartData,\n  fetchAccountTableData,\n} from \"../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../utils/BotsUtils\";\nimport { AccountPieChart } from \"../AccountsList/AccountPreview/AccountPreview\";\nimport \"./AccountDetails.css\";\nimport DatePicker from \"react-datepicker\";\nimport { getAccountBalanceChartData } from \"../../../utils/ApiUtils\";\nimport { Line } from \"react-chartjs-2\";\nimport { TimeLineChartOptions } from \"../../../utils/ChartsUtils\";\nimport _ from \"lodash\";\n\nconst chartTooltipFormatLabel =\n  (quoteCurrency: string) => (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\nconst AccountDetails: FC<any> = () => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountTableData } = accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [accountId, setAccountId] = useState<any>(null);\n  const [account, setAccount] = useState<IAccount | null>(null);\n  const [accountPieChart, setAccountPieChart] = useState<any>(null);\n  const [accountTable, setAccountTable] = useState<any>(null);\n  const [accountHistoryData, setAccountHistoryData] = useState<any>(null);\n  const [accountMode, setAccountMode] = useState<any>(\"current\");\n  const [historyCurrency, setHistoryCurrency] = useState<any>(\"usd\");\n  const [historyDate, setHistoryDate] = useState<any>(\n    moment().subtract(1, \"months\").toDate()\n  );\n\n  let params = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (params.accountId) {\n      setAccountId(\n        params.accountId === \"summary\"\n          ? params.accountId\n          : parseInt(params.accountId)\n      );\n    }\n  }, [params]);\n\n  useEffect(() => {\n    if (accountId) {\n      fetchAccountPieChartData(\n        accountsDispatch,\n        accountsState,\n        errorsDispatch,\n        accountId\n      );\n      fetchAccountTableData(\n        accountsDispatch,\n        accountsState,\n        errorsDispatch,\n        accountId\n      );\n      fetchAccount(accountsDispatch, accountsState, errorsDispatch, accountId);\n    }\n  }, [accountId]);\n\n  useEffect(() => {\n    if (accountPieChartData && accountId in accountPieChartData) {\n      setAccountPieChart(accountPieChartData[accountId]);\n    }\n  }, [accountPieChartData, accountId]);\n\n  useEffect(() => {\n    if (accountTableData && accountId in accountTableData) {\n      setAccountTable(accountTableData[accountId]);\n    }\n  }, [accountTableData, accountId]);\n\n  useEffect(() => {\n    if (accounts && accountId in accounts) {\n      setAccount(accounts[accountId]);\n    }\n  }, [accounts, accountId]);\n\n  useEffect(() => {\n    if (accountId && historyDate) {\n      getAccountBalanceChartData(\n        accountId,\n        moment(historyDate).format(\"DD-MM-YYYY\")\n      ).then((result: any) => {\n        setAccountHistoryData(result);\n      });\n    }\n  }, [historyDate, accountId]);\n\n  return (\n    <div className=\"AccountDetails\">\n      <div style={{ display: \"flex\" }}>\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          className=\"AccountDetailsBackButton\"\n          onClick={() => {\n            navigate(-1);\n          }}\n        >\n          {`< Back`}\n        </Button>\n        <Button\n          style={{ marginLeft: \"16px\" }}\n          className=\"AccountDetailsBackButton\"\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            window.open(`https://3commas.io/accounts/${accountId}`, \"_blank\");\n          }}\n        >\n          Open in 3commas\n        </Button>\n      </div>\n      <div className=\"AccountDetailsMode\">\n        <div className=\"AccountDetailsControl\">\n          <ButtonGroup id=\"foo\">\n            <ToggleButton\n              key=\"current\"\n              id={`radio-account-current`}\n              type=\"radio\"\n              variant=\"outline-primary\"\n              name=\"radioAccountMode\"\n              value={\"current\"}\n              checked={accountMode === \"current\"}\n              onChange={(e) => {\n                setAccountMode(e.currentTarget.value);\n              }}\n            >\n              Current\n            </ToggleButton>\n            <ToggleButton\n              key=\"history\"\n              id={`radio-account-history`}\n              type=\"radio\"\n              variant=\"outline-primary\"\n              name=\"radioAccountMode\"\n              value={\"history\"}\n              checked={accountMode === \"history\"}\n              onChange={(e) => {\n                setAccountMode(e.currentTarget.value);\n              }}\n            >\n              History\n            </ToggleButton>\n          </ButtonGroup>\n        </div>\n        {accountMode === \"history\" && (\n          <div className=\"AccountDetailsControl\">\n            <ButtonGroup id=\"foo\">\n              <ToggleButton\n                key=\"usd\"\n                id={`radio-account-currency-usd`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioAccountCurrencyMode\"\n                value={\"usd\"}\n                checked={historyCurrency === \"usd\"}\n                onChange={(e) => {\n                  setHistoryCurrency(e.currentTarget.value);\n                }}\n              >\n                USD\n              </ToggleButton>\n              <ToggleButton\n                key=\"btc\"\n                id={`radio-account-currency-btc`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioAccountCurrencyMode\"\n                value={\"btc\"}\n                checked={historyCurrency === \"btc\"}\n                onChange={(e) => {\n                  setHistoryCurrency(e.currentTarget.value);\n                }}\n              >\n                BTC\n              </ToggleButton>\n            </ButtonGroup>\n          </div>\n        )}\n        {accountMode === \"history\" && (\n          <div className=\"AccountDetailsNamedControl\">\n            <div className=\"AccountDetailsFilterTitle\">From:</div>\n            <DatePicker\n              dateFormat=\"dd/MM/yyyy\"\n              selected={historyDate}\n              onChange={(date) => {\n                setHistoryDate(date as any);\n              }}\n              selectsStart\n              className=\"AccountDetailsDateFilter\"\n              strictParsing\n            />\n          </div>\n        )}\n      </div>\n      <div className=\"AccountDetailsOverview\">\n        {accountMode === \"current\" && (\n          <>\n            <div className=\"AccountDetailsOverviewPieChart\">\n              {account && accountPieChart && (\n                <AccountPieChart accountPieChart={accountPieChart} />\n              )}\n            </div>\n            {account && (\n              <div className=\"AccountDetailsOverviewTable\">\n                <div className=\"AccountNameContainer\">\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"AccountDetailsAccountIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <span className=\"AccountName\">{account.name}</span>\n                </div>\n                <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                  <thead>\n                    <tr>\n                      <th>Balance value</th>\n                      <th>24 hr change</th>\n                      <th>30 days change</th>\n                      <th>30 days change, %</th>\n                      <th>All time change</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td>{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_amount),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.day_profit_usd) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.day_profit_usd),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.usd_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_profit),\n                        currency: \"USD\",\n                      })} $`}</td>\n                      <td\n                        className={\n                          parseFloat(account.usd_profit_percentage) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.usd_profit_percentage),\n                        currency: \"USD\",\n                      })} %`}</td>\n                      <td\n                        className={\n                          parseFloat(account.total_usd_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.total_usd_profit),\n                        currency: \"USD\",\n                      })} $`}</td>\n                    </tr>\n                    <tr>\n                      <td>{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_amount),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.day_profit_btc) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.day_profit_btc),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.btc_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_profit),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                      <td\n                        className={\n                          parseFloat(account.btc_profit_percentage) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.btc_profit_percentage),\n                        currency: \"USD\",\n                      })} %`}</td>\n                      <td\n                        className={\n                          parseFloat(account.total_btc_profit) >= 0\n                            ? \"showGreen\"\n                            : \"showRed\"\n                        }\n                      >{`${getCurrencyFormat({\n                        value: parseFloat(account.total_btc_profit),\n                        currency: \"BTC\",\n                      })} BTC`}</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </div>\n            )}\n          </>\n        )}\n        {accountMode === \"history\" && accountHistoryData && (\n          <div className=\"AccountDetailsOverviewBalances\">\n            {account && (\n              <div className=\"AccountNameContainer\">\n                {\"market_icon\" in account && (\n                  <div\n                    className=\"AccountDetailsAccountIcon\"\n                    style={{\n                      backgroundImage: `url(${account.market_icon})`,\n                    }}\n                  ></div>\n                )}\n                <span className=\"AccountName\">{account.name}</span>\n              </div>\n            )}\n            <div className=\"AccountDetailsOverviewBalancesChart\">\n              <Line\n                options={\n                  TimeLineChartOptions(\n                    \"\",\n                    chartTooltipFormatLabel(\n                      historyCurrency === \"usd\" ? \"USD\" : \"BTC\"\n                    )\n                  ) as any\n                }\n                data={{\n                  labels: accountHistoryData.map((historyData: any) =>\n                    moment.unix(historyData.date).toDate()\n                  ),\n                  datasets: [\n                    {\n                      label: historyCurrency === \"usd\" ? \"USD\" : \"BTC\",\n                      data: accountHistoryData.map((historyData: any) =>\n                        historyCurrency === \"usd\"\n                          ? historyData.usd\n                          : historyData.btc\n                      ),\n                      borderColor: \"rgb(53, 162, 235)\",\n                      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    },\n                  ],\n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n      {accountTable && (\n        <AccountBalancesTable\n          accountTable={accountTable}\n          accountId={accountId}\n        />\n      )}\n    </div>\n  );\n};\n\nconst AccountBalancesTable: FC<any> = ({ accountTable, accountId }) => {\n  const [accountFilteredTable, setAccountFilteredTable] = useState<any>(null);\n  const [accountFilter, setAccountFilter] = useState<any>(\"\");\n  const [hideSmallBalances, setHideSmallBalances] = useState<any>(false);\n  const [balancesCurrency, setBalancesCurrency] = useState<any>(\"usd\");\n\n  useEffect(() => {\n    if (accountTable && !accountFilter && !hideSmallBalances) {\n      setAccountFilteredTable(\n        _.orderBy(accountTable, [\"percentage\"], [\"desc\"])\n      );\n    } else if (accountTable) {\n      setAccountFilteredTable(\n        _.orderBy(\n          accountTable\n            .filter(\n              (tableData: any) =>\n                tableData.currency_code &&\n                tableData.currency_code.includes(accountFilter.toUpperCase())\n            )\n            .filter((tableData: any) =>\n              hideSmallBalances\n                ? tableData.usd_value > 10 && tableData.percentage > 1\n                : true\n            ),\n          [\"percentage\"],\n          [\"desc\"]\n        )\n      );\n    }\n  }, [accountTable, accountFilter, hideSmallBalances]);\n\n  return (\n    <div className=\"AccountDetailsTableContainer\">\n      <div className=\"AccountDetailsTableFilters\">\n        <FormControl\n          onChange={(e: any) => {\n            setAccountFilter(e.target.value);\n          }}\n          value={accountFilter}\n          type=\"text\"\n          style={{ width: \"200px\", marginRight: \"16px\" }}\n        />\n        <FormCheck\n          type=\"switch\"\n          onChange={(e: any) => {\n            setHideSmallBalances(e.target.checked);\n          }}\n          value={hideSmallBalances}\n          id={`default-f`}\n          label={`Hide small balances`}\n        />\n        <ButtonGroup style={{ marginLeft: \"auto\" }}>\n          <ToggleButton\n            key=\"usd\"\n            id={`radio-account-balances-currency-usd`}\n            type=\"radio\"\n            variant=\"outline-primary\"\n            name=\"radioAccountBalancesCurrencyMode\"\n            value={\"usd\"}\n            checked={balancesCurrency === \"usd\"}\n            onChange={(e) => {\n              setBalancesCurrency(e.currentTarget.value);\n            }}\n          >\n            USD\n          </ToggleButton>\n          <ToggleButton\n            key=\"btc\"\n            id={`radio-account-balances-currency-btc`}\n            type=\"radio\"\n            variant=\"outline-primary\"\n            name=\"radioAccountBalancesCurrencyMode\"\n            value={\"btc\"}\n            checked={balancesCurrency === \"btc\"}\n            onChange={(e) => {\n              setBalancesCurrency(e.currentTarget.value);\n            }}\n          >\n            BTC\n          </ToggleButton>\n        </ButtonGroup>\n      </div>\n      <div className=\"AccountDetailsTable\">\n        {accountFilteredTable && (\n          <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n            <thead>\n              <tr>\n                <th>Token</th>\n                <th>Share</th>\n                <th>Price</th>\n                <th>Price change, 24h</th>\n                <th>Amount</th>\n                {accountId !== \"summary\" && <th>On orders</th>}\n                <th>Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              {accountFilteredTable.map((row: any) => (\n                <tr key={row.currency_code}>\n                  <td>\n                    {row.currency_name\n                      ? `${row.currency_name} (${row.currency_code})`\n                      : row.currency_code}\n                  </td>\n                  <td>{`${getCurrencyFormat({\n                    value: row.percentage,\n                    currency: \"USD\",\n                  })} %`}</td>\n                  <td>\n                    {balancesCurrency === \"usd\"\n                      ? `${getCurrencyFormat({\n                          value: row.current_price_usd,\n                          currency: \"USD\",\n                        })} $`\n                      : `${getCurrencyFormat({\n                          value: row.current_price,\n                          currency: \"BTC\",\n                        })} BTC`}\n                  </td>\n                  <td\n                    className={\n                      parseFloat(\n                        balancesCurrency === \"usd\"\n                          ? row.day_change_percent_usd\n                          : row.day_change_percent_btc\n                      ) >= 0\n                        ? \"showGreen\"\n                        : \"showRed\"\n                    }\n                  >{`${getCurrencyFormat({\n                    value:\n                      balancesCurrency === \"usd\"\n                        ? row.day_change_percent_usd\n                        : row.day_change_percent_btc,\n                    currency: \"USD\",\n                  })} %`}</td>\n                  <td>{`${getCurrencyFormat({\n                    value: row.position,\n                    currency: row.currency_code,\n                  })}`}</td>\n                  {accountId !== \"summary\" && (\n                    <td>{`${getCurrencyFormat({\n                      value: row.on_orders,\n                      currency: row.currency_code,\n                    })}`}</td>\n                  )}\n                  <td>\n                    {balancesCurrency === \"usd\"\n                      ? `${getCurrencyFormat({\n                          value: row.usd_value,\n                          currency: \"USD\",\n                        })} $`\n                      : `${getCurrencyFormat({\n                          value: row.btc_value,\n                          currency: \"BTC\",\n                        })} BTC`}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AccountDetails;\n","import React, { FC, useContext } from \"react\";\nimport { AccountsContext } from \"../../../App\";\nimport AccountPreview from \"./AccountPreview/AccountPreview\";\nimport \"./AccountsList.css\";\n\ninterface AccountsListProps {}\n\nconst AccountsList: FC<AccountsListProps> = () => {\n  const {\n    accountsState: { list },\n  } = useContext(AccountsContext);\n\n  return (\n    <div className=\"AccountsList\">\n      {list.map((accountId: any) => (\n        <AccountPreview accountId={accountId} key={accountId} />\n      ))}\n    </div>\n  );\n};\n\nexport default AccountsList;\n","import _ from \"lodash\";\nimport React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext } from \"../../../App\";\nimport { IAccount } from \"../../../interfaces/Account\";\nimport {\n  fetchAccount,\n  fetchAccountPieChartData,\n  fetchAccountTableData,\n} from \"../../../state/accounts/AccountsEffects\";\nimport { getCurrencyFormat } from \"../../../utils/BotsUtils\";\nimport { AccountPieChart } from \"../AccountsList/AccountPreview/AccountPreview\";\nimport \"./AccountsSummaryPreview.css\";\n\ninterface AccountsSummaryPreviewProps {}\n\nconst AccountsSummaryPreview: FC<AccountsSummaryPreviewProps> = () => {\n  const { accountsState, accountsDispatch } = useContext(AccountsContext);\n\n  const { accounts, accountPieChartData, accountTableData } = accountsState;\n\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [summary, setSummary] = useState<IAccount | null>(null);\n  const [summaryPieChart, setSummaryPieChart] = useState<any>(null);\n  const [summaryTableData, setSummaryTableData] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchAccountPieChartData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      \"summary\"\n    );\n    fetchAccountTableData(\n      accountsDispatch,\n      accountsState,\n      errorsDispatch,\n      \"summary\"\n    );\n    fetchAccount(accountsDispatch, accountsState, errorsDispatch, \"summary\");\n  }, []);\n\n  useEffect(() => {\n    if (\"summary\" in accountPieChartData) {\n      setSummaryPieChart(accountPieChartData[\"summary\"]);\n    }\n  }, [accountPieChartData]);\n\n  useEffect(() => {\n    if (\"summary\" in accountTableData) {\n      setSummaryTableData(\n        _.orderBy(accountTableData[\"summary\"], [\"percentage\"], [\"desc\"]).slice(\n          0,\n          3\n        )\n      );\n    }\n  }, [accountTableData]);\n\n  useEffect(() => {\n    if (\"summary\" in accounts) {\n      setSummary(accounts[\"summary\"]);\n    }\n  }, [accounts]);\n\n  return (\n    <div className=\"AccountsSummaryPreview\">\n      <div className=\"AccountsSummaryPreviewColumn\">\n        <div className=\"AccountNameContainer\">\n          <span className=\"AccountName\">Agrregate / Summary account</span>\n        </div>\n        <div className=\"AccountsSummaryPreviewCharts\">\n          <div className=\"AccountsSummaryPreviewPieChart\">\n            {summary && summaryPieChart && (\n              <AccountPieChart accountPieChart={summaryPieChart} />\n            )}\n          </div>\n          {summary && (\n            <div className=\"AccountsSummaryPreviewBalanceTable\">\n              <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n                <thead>\n                  <tr>\n                    <th>Balance value</th>\n                    <th>24 hr change</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{`${getCurrencyFormat({\n                      value: parseFloat(summary.usd_amount),\n                      currency: \"USD\",\n                    })} $`}</td>\n                    <td\n                      className={\n                        parseFloat(summary.day_profit_usd) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(summary.day_profit_usd),\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                  <tr>\n                    <td>{`${getCurrencyFormat({\n                      value: parseFloat(summary.btc_amount),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                    <td\n                      className={\n                        parseFloat(summary.day_profit_btc) >= 0\n                          ? \"showGreen\"\n                          : \"showRed\"\n                      }\n                    >{`${getCurrencyFormat({\n                      value: parseFloat(summary.day_profit_btc),\n                      currency: \"BTC\",\n                    })} BTC`}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"AccountsSummaryPreviewColumn\">\n        <div className=\"AccountNameContainer\">\n          <span className=\"AccountName\">Top assets</span>\n        </div>\n        {summaryTableData && (\n          <div className=\"AccountsSummaryPreviewAssetsTable\">\n            <Table size=\"sm\" style={{ fontSize: \"12px\" }}>\n              <thead>\n                <tr>\n                  <th>Token</th>\n                  <th>Amount</th>\n                  <th>Total value, $</th>\n                </tr>\n              </thead>\n              <tbody>\n                {summaryTableData.map((asset: any) => (\n                  <tr key={asset.currency_code}>\n                    <td>{asset.currency_code}</td>\n                    <td>{`${getCurrencyFormat({\n                      value: asset.position,\n                      currency: asset.currency_code,\n                    })}`}</td>\n                    <td>{`${getCurrencyFormat({\n                      value: asset.usd_value,\n                      currency: \"USD\",\n                    })} $`}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </Table>\n          </div>\n        )}\n      </div>\n      <div className=\"AccountsSummaryButtonContainer\">\n        <Button\n          className=\"AccountPreviewButton\"\n          onClick={() => {\n            navigate({\n              pathname: `/accounts/summary`,\n              search: window.location.search,\n            });\n          }}\n        >\n          View\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountsSummaryPreview;\n","import React, { FC } from \"react\";\nimport \"./Accounts.css\";\nimport AccountsList from \"./AccountsList/AccountsList\";\nimport AccountsSummaryPreview from \"./AccountsSummaryPreview/AccountsSummaryPreview\";\n\ninterface AccountsProps {}\n\nconst Accounts: FC<AccountsProps> = () => {\n  return (\n    <div className=\"Accounts\">\n      <AccountsSummaryPreview />\n      <AccountsList />\n    </div>\n  );\n};\n\nexport default Accounts;\n","import { IBot, IBotFilters } from \"../../interfaces/Bot\";\n\ninterface ISetNewBotsList {\n  type: \"setNewBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const setNewBotsList = (botsList: Array<IBot>): ISetNewBotsList => ({\n  type: \"setNewBotsList\",\n  payload: botsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToBotsList {\n  type: \"addToBotsList\";\n  payload: Array<IBot>;\n}\n\nexport const addToBotsList = (botsList: Array<IBot>): IAddToBotsList => ({\n  type: \"addToBotsList\",\n  payload: botsList,\n});\n\ninterface ISetBotsOffset {\n  type: \"setBotsOffset\";\n  payload: number;\n}\n\nexport const setBotsOffset = (offset: number): ISetBotsOffset => ({\n  type: \"setBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetBotsFilters {\n  type: \"setBotsFilters\";\n  payload: IBotFilters;\n}\n\nexport const setBotsFilters = (botsFilter: IBotFilters): ISetBotsFilters => ({\n  type: \"setBotsFilters\",\n  payload: botsFilter,\n});\n\ninterface ISetBot {\n  type: \"setBot\";\n  payload: { botId: number; bot: IBot };\n}\n\nexport const setBot = (botId: number, bot: IBot): ISetBot => ({\n  type: \"setBot\",\n  payload: { botId, bot },\n});\n\nexport type BotsAction =\n  | ISetNewBotsList\n  | ISetHasMore\n  | IAddToBotsList\n  | ISetBotsOffset\n  | ISetBotsFilters\n  | ISetBot;\n","import { getBot, getBots, getBotStats } from \"../../utils/ApiUtils\";\nimport { getMaxUsage } from \"../../utils/BotsUtils\";\nimport { getAverageDailyProfitFromAllDeals } from \"../../utils/DealsUtils\";\nimport { IDealsState } from \"../deals/DealsReducer\";\nimport { selectAllDealsWithin30Days } from \"../deals/DealsSelectors\";\nimport {\n  addToBotsList,\n  setBotsOffset,\n  setHasMore,\n  setNewBotsList,\n  setBot,\n} from \"./BotsActions\";\nimport { IBotsState } from \"./BotsReducer\";\n\nexport async function fetchBots(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  resetOffset: boolean = false,\n  customLimit?: number\n) {\n  botsDispatch(setHasMore(true));\n  const {\n    offset,\n    limit,\n    filters: { sorting, scope, type, account },\n  } = botsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    const data = await getBots(\n      offset,\n      offsetLimit,\n      sorting,\n      scope,\n      type,\n      account,\n      resetOffset\n    );\n    if (resetOffset) {\n      botsDispatch(setBotsOffset(offsetLimit));\n      botsDispatch(setNewBotsList(data));\n    } else {\n      botsDispatch(setBotsOffset(offset + offsetLimit));\n      botsDispatch(addToBotsList(data));\n    }\n    if (data.length < offsetLimit) {\n      botsDispatch(setHasMore(false));\n    }\n  } catch {\n    botsDispatch(setNewBotsList([]));\n    botsDispatch(setBotsOffset(offsetLimit));\n    botsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching bots list\",\n    });\n  }\n}\n\nexport async function fetchBot(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    const bot = await getBot(botId);\n    botsDispatch(setBot(botId, bot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching bot ${botId}`,\n    });\n  }\n}\n\nexport async function getMaxUsageEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number,\n  account: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"maxUsage\" in bots[botId])) {\n      const maxUsage = await getMaxUsage(botItem, account);\n      const bot = { ...botItem, maxUsage: maxUsage };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = { ...botItem, maxUsage: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching max usage for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getFundsLockedAndTodaysProfit(\n  botsDispatch: any,\n  botsState: IBotsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    if (!(\"fundsLocked\" in bots[botId])) {\n      const {\n        profits_in_usd: { today_usd_profit, funds_locked_in_active_deals },\n      } = await getBotStats(botId);\n\n      const bot = {\n        ...botItem,\n        fundsLocked: funds_locked_in_active_deals,\n        todayUsdProfit: today_usd_profit,\n      };\n      botsDispatch(setBot(botItem.id, bot));\n    }\n  } catch {\n    const bot = {\n      ...botItem,\n      fundsLocked: 0,\n      todayUsdProfit: 0,\n    };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching stats for bot ${botItem.name}`,\n    });\n  }\n}\n\nexport async function getAvgProfitEffect(\n  botsDispatch: any,\n  botsState: IBotsState,\n  dealsState: IDealsState,\n  errorsDispatch: any,\n  botId: number\n) {\n  const { bots } = botsState;\n  const botItem = bots[botId];\n  try {\n    const deals30daysForBot = selectAllDealsWithin30Days(dealsState, botId);\n    const bot = {\n      ...botItem,\n      avgProfit: getAverageDailyProfitFromAllDeals(deals30daysForBot),\n    };\n    botsDispatch(setBot(botItem.id, bot));\n  } catch {\n    const bot = { ...botItem, returns: 0 };\n    botsDispatch(setBot(botItem.id, bot));\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when getting returns for bot ${botItem.name}`,\n    });\n  }\n}\n","import { IDeal } from \"../../interfaces/Deal\";\n\ninterface IGetDealsList {\n  type: \"getDealsList\";\n  payload: { deals: Array<IDeal>; botId: number; periodInDays: number };\n}\n\nexport const getDealsList = (\n  deals: Array<IDeal>,\n  botId: number,\n  periodInDays: number\n): IGetDealsList => ({\n  type: \"getDealsList\",\n  payload: { deals, botId, periodInDays },\n});\n\ninterface IGetActiveDealsList {\n  type: \"getActiveDealsList\";\n  payload: { activeDeals: Array<IDeal>; botId: number };\n}\nexport const getActiveDealsList = (\n  activeDeals: Array<IDeal>,\n  botId: number\n): IGetActiveDealsList => ({\n  type: \"getActiveDealsList\",\n  payload: { activeDeals, botId },\n});\n\ninterface ISetOffset {\n  type: \"setOffset\";\n  payload: { botId: number; offset: number };\n}\n\nexport const setOffset = (botId: number, offset: number): ISetOffset => ({\n  type: \"setOffset\",\n  payload: { botId, offset },\n});\n\ninterface IResetDeals {\n  type: \"resetDeals\";\n  payload: { botId: number };\n}\n\nexport const resetDeals = (botId: number): IResetDeals => ({\n  type: \"resetDeals\",\n  payload: { botId },\n});\ninterface IResetActiveDeals {\n  type: \"resetActiveDeals\";\n  payload: { botId: number };\n}\n\nexport const resetActiveDeals = (botId: number): IResetActiveDeals => ({\n  type: \"resetActiveDeals\",\n  payload: { botId },\n});\n\nexport type DealsAction =\n  | IGetDealsList\n  | ISetOffset\n  | IResetDeals\n  | IGetActiveDealsList\n  | IResetActiveDeals;\n","import { getDeals } from \"../../utils/ApiUtils\";\nimport { getAllDealsForOneBot } from \"../../utils/DealsUtils\";\nimport {\n  getActiveDealsList,\n  getDealsList,\n  resetActiveDeals,\n  resetDeals,\n  setOffset,\n} from \"./DealsActions\";\nimport { IDealsState } from \"./DealsReducer\";\nimport {\n  INFINITY_IN_DAYS,\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n} from \"./DealsSelectors\";\n\nexport async function fetchDealsForBotFor30Days(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number\n) {\n  try {\n    if (is30daysDealsLoaded(dealsState, botId)) {\n      return;\n    }\n    const data = await getAllDealsForOneBot(botId, 30);\n    dealsDispatch(getDealsList(data, botId, 30));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport async function fetchAllDealsForBot(\n  dealsState: IDealsState,\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) {\n  try {\n    if (isAllDealsLoaded(dealsState, botId) && !reset) {\n      return;\n    }\n\n    if (reset) {\n      dealsDispatch(resetDeals(botId));\n    }\n\n    await fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botId\n    );\n    const data = await getAllDealsForOneBot(\n      botId,\n      INFINITY_IN_DAYS,\n      (offset: number) => {\n        dealsDispatch(setOffset(botId, offset));\n      }\n    );\n    dealsDispatch(getDealsList(data, botId, INFINITY_IN_DAYS));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching deals for bot ${botId}`,\n      });\n    }\n  }\n}\n\nexport const getAllActiveDeals = async (\n  dealsDispatch: any,\n  errorsDispatch: any,\n  botId: number,\n  reset = false\n) => {\n  try {\n    if (reset) {\n      dealsDispatch(resetActiveDeals(botId));\n    }\n    const data = await getDeals(botId, 0, 1000, \"active\", \"created_at\");\n    dealsDispatch(getActiveDealsList(data, botId));\n  } catch (e: any) {\n    if (!e.message.includes(\"This limiter has been stopped\")) {\n      errorsDispatch({\n        type: \"addError\",\n        payload: `Error when fetching active deals for bot ${botId}`,\n      });\n    }\n    return Promise.resolve([]);\n  }\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Bar, Doughnut } from \"react-chartjs-2\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  DealsCountBarChartOptions,\n  HistogramChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  dealsStatusesCounts,\n  getDealsCountPerDay,\n  getDealsDurationHistogramData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsMainCharts.css\";\n\nexport const DCABotDetailsMainCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n}) => {\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n  const [countsValues, setCountsValues] = useState<any>([[], []]);\n  const [dealsDurationHistogramData, setDealsDurationHistogramData] =\n    useState<any>([]);\n\n  const dealsStatusData = dealsStatusesCounts(deals);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  useEffect(() => {\n    setCountsValues(getDealsCountPerDay(filteredDeals, dateLabelsDays));\n    setDealsDurationHistogramData(getDealsDurationHistogramData(filteredDeals));\n  }, [filteredDeals]);\n\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            DealsCountBarChartOptions(\n              \"Finished deals per day\",\n              dateLabelsDays.length < 70\n            ) as any\n          }\n          data={{\n            labels: dateLabelsDays,\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: countsValues,\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Doughnut\n          options={\n            {\n              aspectRatio: 1.7,\n              plugins: {\n                title: {\n                  display: true,\n                  text: \"Finished deals by Status\",\n                },\n                tooltip: {\n                  callbacks: {\n                    label: (tooltipItem: any) => {\n                      const dataset = tooltipItem.dataset;\n                      const total = dataset.data.reduce(function (\n                        previousValue: any,\n                        currentValue: any\n                      ) {\n                        return currentValue\n                          ? previousValue + currentValue\n                          : previousValue;\n                      },\n                      0);\n                      const currentValue = dataset.data[tooltipItem.dataIndex];\n                      const percentage = Math.floor(\n                        (currentValue / total) * 100 + 0.5\n                      );\n                      const label = tooltipItem.label;\n\n                      return `${label}: ${currentValue} (${percentage}%)`;\n                    },\n                  },\n                },\n                legend: {\n                  labels: {\n                    filter: (legendItem: any, data: any) => {\n                      return data.datasets[0].data[legendItem.index];\n                    },\n                  },\n                },\n              },\n            } as any\n          }\n          width={300}\n          data={{\n            labels: dealsStatusData[0] as any,\n            datasets: [\n              {\n                data: dealsStatusData[1],\n                backgroundColor: [\n                  \"rgba(54, 162, 235, 0.2)\",\n                  \"rgba(255, 99, 132, 0.2)\",\n                  \"rgba(255, 206, 86, 0.2)\",\n                  \"rgba(75, 192, 192, 0.2)\",\n                  \"rgba(153, 102, 255, 0.2)\",\n                  \"rgba(255, 159, 64, 0.2)\",\n                  \"rgba(39, 47, 148, 0.2)\",\n                ],\n                borderColor: [\n                  \"rgba(54, 162, 235, 1)\",\n                  \"rgba(255, 99, 132, 1)\",\n                  \"rgba(255, 206, 86, 1)\",\n                  \"rgba(75, 192, 192, 1)\",\n                  \"rgba(153, 102, 255, 1)\",\n                  \"rgba(255, 159, 64, 1)\",\n                  \"rgba(39, 47, 148, 1)\",\n                ],\n                borderWidth: 1,\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            HistogramChartOptions(\n              \"Finished deals duration histogram, hours\",\n              \"Duration, hours\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsDurationHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsDurationHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneBotCurrencyLeaderbord,\n  getOneBotAccumulativeProfitsChartData,\n  getOneBotProfitsChartData,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsProfitsCharts.css\";\n\nexport const DCABotDetailsProfitsCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n\n  useEffect(() => {\n    setAccumulativeProfitsData(getOneBotAccumulativeProfitsChartData(deals));\n    setProfitsData(getOneBotProfitsChartData(deals));\n    setPairsLeaderbordData(getOneBotCurrencyLeaderbord(deals));\n  }, [deals]);\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={AccumulativeChartOptions(\"Accumulative Profit, $\") as any}\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: \"Accumulative Profit, $\",\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={ProfitChartOptions(\"Daily Profit, $\") as any}\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      {bot.type !== \"Bot::SingleBot\" && (\n        <div className=\"DCABotDetailsChartContainer\">\n          <Bar\n            options={\n              LeaderbordChartOptions(\n                \"Pairs leaderboard by profit\",\n                pairsLeaderbordData[0]\n              ) as any\n            }\n            data={{\n              labels: pairsLeaderbordData[0],\n              datasets: [\n                {\n                  label: \"Profit, $\",\n                  data: pairsLeaderbordData[1],\n                  borderColor: \"rgb(53, 162, 235)\",\n                  backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                },\n              ],\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  NumberHistogramChartOptions,\n  LeaderbordChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getDealsSOHistogramData,\n  getOneBotSOLeaderbord,\n} from \"../../../../utils/DealsUtils\";\nimport \"./DCABotDetailsSafetyCharts.css\";\n\nexport const DCABotDetailsSafetyCharts = ({\n  deals,\n  timeRangeValue,\n  dateLabelsDays,\n  bot,\n}: {\n  deals: IDeal[];\n  timeRangeValue: string;\n  dateLabelsDays: string[];\n  bot: IBot;\n}) => {\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n  const [dealsSOHistogramData, setDealsSOHistogramData] = useState<any>([]);\n  const [pairsLeaderbordData, setPairsLeaderbordData] = useState<any>([[], []]);\n  const [antiPairsLeaderbordData, setAntiPairsLeaderbordData] = useState<any>([\n    [],\n    [],\n  ]);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  useEffect(() => {\n    setDealsSOHistogramData(getDealsSOHistogramData(filteredDeals));\n    setPairsLeaderbordData(getOneBotSOLeaderbord(filteredDeals));\n    setAntiPairsLeaderbordData(getOneBotSOLeaderbord(filteredDeals, \"asc\"));\n  }, [filteredDeals]);\n\n  return (\n    <>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs with least SO completed\",\n              antiPairsLeaderbordData[0]\n            ) as any\n          }\n          data={{\n            labels: antiPairsLeaderbordData[0],\n            datasets: [\n              {\n                label: \"Average completed safety orders\",\n                data: antiPairsLeaderbordData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs with most SO completed\",\n              pairsLeaderbordData[0]\n            ) as any\n          }\n          data={{\n            labels: pairsLeaderbordData[0],\n            datasets: [\n              {\n                label: \"Average completed safety orders\",\n                data: pairsLeaderbordData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            NumberHistogramChartOptions(\n              \"Histogram of completed SO per deal\",\n              \"Number of completed safety orders\",\n              \"Number of deals\"\n            ) as any\n          }\n          data={{\n            labels: dealsSOHistogramData[0],\n            datasets: [\n              {\n                label: \"Finished deals\",\n                data: dealsSOHistogramData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport {\n  getDealAgeInDaysSinceOpened,\n  getLastNDays,\n} from \"../../../../utils/DealsUtils\";\nimport { DCABotDetailsMainCharts } from \"../DCABotDetailsMain/DCABotDetailsMainCharts\";\nimport { DCABotDetailsProfitsCharts } from \"../DCABotDetailsProfits/DCABotDetailsProfitsCharts\";\nimport { DCABotDetailsSafetyCharts } from \"../DCABotDetailsSafety/DCABotDetailsSafetyCharts\";\nimport \"./DCABotDetailsCharts.css\";\n\nexport const DCABotDetailsCharts = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  timeRangeValue,\n}: {\n  account: any;\n  bot: IBot;\n  timeRangeValue: string;\n  infoKey: string;\n  deals: IDeal[];\n}) => {\n  const [dateLabelsDays, setDateLabelsDays] = useState<string[]>([]);\n  useEffect(() => {\n    if (deals) {\n      if (timeRangeValue === \"allTime\") {\n        const oldestDealAgeInDaysSinceOpened =\n          deals.length > 0\n            ? Math.ceil(getDealAgeInDaysSinceOpened(deals.slice(-1).pop()))\n            : 0;\n        setDateLabelsDays(\n          getLastNDays(\n            oldestDealAgeInDaysSinceOpened > 30\n              ? oldestDealAgeInDaysSinceOpened\n              : 30\n          )\n        );\n      } else if (timeRangeValue === \"30d\") {\n        setDateLabelsDays(getLastNDays(30));\n      }\n    }\n  }, [deals]);\n  return (\n    <>\n      {deals && dateLabelsDays && bot && account && (\n        <div className=\"DCABotDetailsCharts\">\n          {infoKey === \"main\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"settings\" && (\n            <DCABotDetailsMainCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n            />\n          )}\n          {infoKey === \"profits\" && (\n            <DCABotDetailsProfitsCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n          {infoKey === \"safeties\" && (\n            <DCABotDetailsSafetyCharts\n              deals={deals}\n              timeRangeValue={timeRangeValue}\n              dateLabelsDays={dateLabelsDays}\n              bot={bot}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { useTable, usePagination, useSortBy } from \"react-table\";\n\nimport \"./DCABotDetailsDealsTable.css\";\nimport { Badge, Modal, Pagination, Table, Button } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport { getDeal } from \"../../../../utils/ApiUtils\";\n\nconst badgeVariant = {\n  Cancelled: \"secondary\",\n  StopLoss: \"danger\",\n  Failed: \"warning\",\n  Completed: \"success\",\n  \"Closed at Market Price\": \"dark\",\n  Liquidated: \"dark\",\n  Switched: \"secondary\",\n};\n\nexport const DCABotDetailsDealsTable = ({\n  bot,\n  deals,\n  dealStateSwitcher,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  dealStateSwitcher: string;\n}) => {\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"ID\",\n          accessor: \"id\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Pair\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.pair.split(\"_\").reverse().join(\"/\");\n          },\n          id: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: \"localized_status\",\n          Cell: ({ cell: { value } }: any) => (\n            // @ts-ignore\n            <Badge style={{ fontSize: \"12px\" }} bg={badgeVariant[value]}>\n              {value}\n            </Badge>\n          ),\n          disableSortBy: true,\n        },\n        {\n          Header: \"Start\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.created_at);\n          },\n          id: \"created_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => (\n            <>\n              <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n              <div>{moment(value).format(\"HH:mm\")}</div>\n            </>\n          ),\n        },\n        {\n          Header: \"End\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return new Date(originalRow.closed_at);\n          },\n          id: \"closed_at\",\n          sortType: \"datetime\",\n          Cell: ({ cell: { value } }: any) => {\n            return dealStateSwitcher === \"finished\" ? (\n              <>\n                <div>{moment(value).format(\"D MMM, YYYY\")}</div>\n                <div>{moment(value).format(\"HH:mm\")}</div>\n              </>\n            ) : (\n              <div />\n            );\n          },\n        },\n        {\n          Header: \"Duration\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            let start = moment.utc(originalRow.created_at);\n            let end = originalRow.closed_at\n              ? moment.utc(originalRow.closed_at)\n              : moment.utc();\n            return end.diff(start);\n          },\n          id: \"duration\",\n          Cell: ({ cell: { value } }: any) => {\n            const duration = moment.duration(value);\n            const days = Math.floor(duration.asDays());\n            const daysFormatted = days ? `${days}d ` : \"\";\n\n            //Get Hours\n            const hours = duration.hours();\n            const hoursFormatted = `${hours}h `;\n\n            //Get Minutes\n            const minutes = duration.minutes();\n            const minutesFormatted = `${minutes}m`;\n\n            return `${daysFormatted} ${hoursFormatted} ${minutesFormatted}`;\n          },\n        },\n        {\n          Header: \"Avg. entry price\",\n          id: \"bought_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.strategy === \"long\"\n              ? originalRow.bought_average_price\n              : originalRow.sold_average_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header:\n            dealStateSwitcher === \"finished\" ? \"Close price\" : \"Current price\",\n          id: \"sold_average_price\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            dealStateSwitcher === \"finished\"\n              ? originalRow.strategy === \"long\"\n                ? originalRow.sold_average_price\n                : originalRow.bought_average_price\n              : originalRow.current_price,\n          Cell: ({ cell: { value } }: any) =>\n            value\n              ? getCurrencyFormat({\n                  value: parseFloat(value),\n                  currency: \"marketPrice\",\n                })\n              : \"\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"TP price\",\n          accessor: \"take_profit_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n            const amount =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_amount,\n                    currency: baseCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_amount,\n                    currency: baseCurrency,\n                  });\n            const volume =\n              originalRow.strategy === \"long\"\n                ? getCurrencyFormat({\n                    value: originalRow.bought_volume,\n                    currency: quoteCurrency,\n                  })\n                : getCurrencyFormat({\n                    value: originalRow.sold_volume,\n                    currency: quoteCurrency,\n                  });\n            return `${amount} ${baseCurrency}!${volume} ${quoteCurrency}`;\n          },\n          id: \"volume\",\n          Cell: ({ cell: { value } }: any) => {\n            const values = value.split(\"!\");\n            return (\n              <>\n                <div>{values[0]}</div>\n                <div>{values[1]}</div>\n              </>\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Filled SO\",\n          id: \"completed_safety_orders_count\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${originalRow.completed_safety_orders_count}${\n              originalRow.completed_manual_safety_orders_count\n                ? ` (+${originalRow.completed_manual_safety_orders_count})`\n                : \"\"\n            }`,\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit, %\",\n          accessor:\n            dealStateSwitcher === \"finished\"\n              ? \"final_profit_percentage\"\n              : \"actual_profit_percentage\",\n          Cell: ({ cell: { value } }: any) => `${value}%`,\n          sortType: (a: any, b: any) => {\n            a =\n              dealStateSwitcher === \"finished\"\n                ? Number(a.original.final_profit_percentage)\n                : Number(a.original.actual_profit_percentage);\n            b =\n              dealStateSwitcher === \"finished\"\n                ? Number(b.original.final_profit_percentage)\n                : Number(b.original.actual_profit_percentage);\n            return a > b ? 1 : -1;\n          },\n        },\n        {\n          Header: \"Profit, $\",\n          accessor:\n            dealStateSwitcher === \"finished\"\n              ? \"usd_final_profit\"\n              : \"actual_usd_profit\",\n          sortType: (a: any, b: any) => {\n            a =\n              dealStateSwitcher === \"finished\"\n                ? Number(a.original.usd_final_profit)\n                : Number(a.original.actual_usd_profit);\n            b =\n              dealStateSwitcher === \"finished\"\n                ? Number(b.original.usd_final_profit)\n                : Number(b.original.actual_usd_profit);\n            return a > b ? 1 : -1;\n          },\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value);\n            return (\n              <Badge\n                style={{ fontSize: \"13px\" }}\n                bg={numberValue >= 0 ? \"success\" : \"danger\"}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency: \"USD\",\n                },\n                \"always\"\n              )} $`}</Badge>\n            );\n          },\n        },\n        {\n          Header: \"Profit in Base\",\n          id: \"profitBase\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.bought_amount) -\n              parseFloat(originalRow.sold_amount)\n            }!${originalRow.pair.split(\"_\")[1]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return dealStateSwitcher === \"finished\" ? (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            ) : (\n              \"\"\n            );\n          },\n          disableSortBy: true,\n        },\n        {\n          Header: \"Profit in Quote\",\n          id: \"profitQuote\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            `${\n              parseFloat(originalRow.sold_volume) -\n              parseFloat(originalRow.bought_volume)\n            }!${originalRow.pair.split(\"_\")[0]}`,\n\n          Cell: ({ cell: { value } }: any) => {\n            const numberValue = parseFloat(value.split(\"!\")[0]);\n            const currency = value.split(\"!\")[1];\n            return dealStateSwitcher === \"finished\" ? (\n              <span\n                style={{ color: numberValue >= 0 ? \"green\" : \"red\" }}\n              >{`${getCurrencyFormat(\n                {\n                  value: numberValue,\n                  currency,\n                },\n                \"always\"\n              )} ${currency}`}</span>\n            ) : (\n              \"\"\n            );\n          },\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    state: { pageIndex },\n  } = useTable(\n    {\n      columns,\n      data: deals,\n      disableSortRemove: true,\n      autoResetPage: true,\n      autoResetSortBy: false,\n      initialState: {\n        pageSize: 50,\n        sortBy:\n          dealStateSwitcher === \"finished\"\n            ? [{ id: \"closed_at\", desc: true }]\n            : [{ id: \"created_at\", desc: true }],\n      },\n    },\n    useSortBy,\n    usePagination\n  );\n  const [modalIsOpen, setModalIsOpen] = React.useState(false);\n  const [selectedDeal, setSelectedDeal] = React.useState(null as any);\n\n  return (\n    <div className=\"DCABotDetailsDealsTable\">\n      <div className=\"DCABotDetailsDealsTableContainer\">\n        <DealModal\n          modalIsOpen={modalIsOpen}\n          setModalIsOpen={setModalIsOpen}\n          dealId={selectedDeal}\n        />\n        {pageCount > 1 && (\n          <TablePagination\n            pageIndex={pageIndex}\n            pageCount={pageCount}\n            gotoPage={gotoPage}\n            nextPage={nextPage}\n            previousPage={previousPage}\n          />\n        )}\n        <Table striped bordered {...getTableProps()} hover>\n          <thead style={{ fontSize: \"14px\" }}>\n            {headerGroups.map((headerGroup) => (\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {headerGroup.headers.map((column) => (\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    <div style={{ display: \"flex\", width: \"100%\" }}>\n                      {column.render(\"Header\")}\n                      <div\n                        style={{\n                          marginLeft: \"auto\",\n                          cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                        }}\n                      >\n                        {column.isSorted\n                          ? column.isSortedDesc\n                            ? \" 🔽\"\n                            : \" 🔼\"\n                          : column.disableSortBy\n                          ? \"   \"\n                          : \" 📶\"}\n                      </div>\n                    </div>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n            {page.map((row, i) => {\n              prepareRow(row);\n              return (\n                <tr\n                  {...row.getRowProps()}\n                  onClick={() => {\n                    setSelectedDeal(row.original.id);\n                    setModalIsOpen(true);\n                  }}\n                  style={{ cursor: \"pointer\" }}\n                >\n                  {row.cells.map((cell) => {\n                    return (\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </div>\n    </div>\n  );\n};\n\nconst TablePagination = ({\n  pageIndex,\n  pageCount,\n  gotoPage,\n  nextPage,\n  previousPage,\n}: any) => {\n  const range = (start: number, end: number) =>\n    Array(end - start + 1)\n      .fill(0)\n      .map((_, idx) => start + idx);\n\n  const renderPaginationNumberItem = (page: any, pageIndex: any) => (\n    <Pagination.Item\n      active={page === pageIndex}\n      onClick={() => {\n        gotoPage(page);\n      }}\n      key={page}\n    >\n      {page + 1}\n    </Pagination.Item>\n  );\n\n  const renderPaginationBeginning = () => (\n    <>\n      <Pagination.First\n        onClick={() => {\n          gotoPage(0);\n        }}\n      />\n      <Pagination.Prev\n        onClick={() => {\n          previousPage();\n        }}\n      />\n      {pageIndex - 2 < 4 &&\n        renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n      {pageIndex - 1 < 4 &&\n        renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n    </>\n  );\n  const renderPaginationEnd = () => (\n    <>\n      <Pagination.Next\n        onClick={() => {\n          nextPage();\n        }}\n      />\n      <Pagination.Last\n        onClick={() => {\n          gotoPage(pageCount - 1);\n        }}\n      />\n    </>\n  );\n\n  return (\n    <>\n      {pageCount <= 16 && (\n        <Pagination>\n          {range(0, pageCount - 1).map((page) =>\n            renderPaginationNumberItem(page, pageIndex)\n          )}\n        </Pagination>\n      )}\n      {pageCount > 16 && (\n        <Pagination>\n          {pageIndex < 7 && (\n            <>\n              {range(0, 6).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n              {renderPaginationEnd()}\n            </>\n          )}\n\n          {pageIndex >= 7 && pageIndex <= pageCount - 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {renderPaginationNumberItem(pageIndex - 2, pageIndex)}\n              {renderPaginationNumberItem(pageIndex - 1, pageIndex)}\n              <Pagination.Item active>{pageIndex + 1}</Pagination.Item>\n              {renderPaginationNumberItem(pageIndex + 1, pageIndex)}\n              {renderPaginationNumberItem(pageIndex + 2, pageIndex)}\n              {renderPaginationEnd()}\n            </>\n          )}\n          {pageCount - pageIndex < 8 && (\n            <>\n              {renderPaginationBeginning()}\n              {range(pageCount - 7, pageCount - 1).map((page) =>\n                renderPaginationNumberItem(page, pageIndex)\n              )}\n            </>\n          )}\n        </Pagination>\n      )}\n    </>\n  );\n};\n\nconst DealModal = ({ modalIsOpen, setModalIsOpen, dealId }: any) => {\n  const [deal, setDeal] = React.useState(null as any);\n\n  useEffect(() => {\n    if (dealId) {\n      getDeal(dealId).then((dl) => {\n        setDeal(dl);\n      });\n    }\n  }, [dealId]);\n  return (\n    <>\n      {deal && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(false);\n          }}\n          scrollable\n          size=\"lg\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{deal.id}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {deal.bot_events.length > 0 && (\n              <Table striped hover>\n                <thead>\n                  <tr>\n                    <th>Date/Time</th>\n                    <th>Message</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {deal.bot_events.map((event: any) => (\n                    <tr key={event.created_at}>\n                      <td>\n                        {moment(event.created_at).format(\"D MMM, YYYY HH:mm\")}\n                      </td>\n                      <td>{event.message}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </Table>\n            )}\n            {deal.bot_events.length === 0 && (\n              <blockquote className=\"blockquote mb-0\">\n                <p>\n                  “Nothing can last forever. There isn't any memory, no matter\n                  how intense, that doesn't fade out at last.”{\" \"}\n                </p>\n                <footer className=\"blockquote-footer\">Juan Rulfo</footer>\n              </blockquote>\n            )}\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                window.open(`https://3commas.io/deals/${dealId}`, \"_blank\");\n              }}\n            >\n              Open in 3commas\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      )}\n    </>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport \"./CurrencyIcon.css\";\nimport iconsData from \"./coins_icons1.json\";\nimport _ from \"lodash\";\n\nconst CurrencyIcon = ({ currency, size = 15 }: any) => {\n  const formattedCurrency =\n    currency.length > 5\n      ? currency\n          .replace(\"USDT\", \"\")\n          .replace(\"BUSD\", \"\")\n          .replace(\"-PERP\", \"\")\n          .replace(\"USD\", \"\")\n      : currency;\n\n  const icons = useMemo(\n    () => _.chain(iconsData).keyBy(\"symbol\").mapValues(\"id\").value(),\n    []\n  );\n\n  return (\n    <div\n      className=\"CurrencyIcon\"\n      style={{\n        width: size,\n        height: size,\n        borderRadius: size,\n        backgroundSize: size,\n        backgroundImage: `url(https://s2.coinmarketcap.com/static/img/coins/64x64/${\n          icons[formattedCurrency.toUpperCase()]\n        }.png)`,\n      }}\n    ></div>\n  );\n};\n\nexport default CurrencyIcon;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { Badge } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport \"./BotPreview.css\";\nimport { getCurrencyFormat, getFundsLocked } from \"../../../../utils/BotsUtils\";\nimport {\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport {\n  getFundsLockedAndTodaysProfit,\n  getMaxUsageEffect,\n  getAvgProfitEffect,\n} from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { useNavigate } from \"react-router-dom\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport moment from \"moment\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport { useTranslation } from \"react-i18next\";\n\nconst strategyMap: any = {\n  nonstop: \"Non-stop\",\n  qfl: \"QFL\",\n  tv_custom_signal: \"TV custom signal\",\n  trading_view: \"TV\",\n  buy_or_strong_buy: \"Buy\",\n  strong_buy: \"Strong Buy\",\n  sell_or_strong_sell: \"Sell\",\n  strong_sell: \"Strong Sell\",\n  rsi: \"RSI\",\n  manual: \"Manual\",\n  ult: \"ULT\",\n  ta_preset: \"TA Preset\",\n  cqs_telegram: \"CQS Scalping\",\n  krypto_boss_free: \"HIRN Crypto Free\",\n};\n\nexport const getBotsStrategyName = (\n  strategiesState: any,\n  botsStrategy: string\n) => {\n  if (botsStrategy in strategyMap) {\n    return strategyMap[botsStrategy];\n  }\n\n  const marketsStrategy = strategiesState.strategies.find(\n    (marketStrategy: any) => marketStrategy.strategy_key === botsStrategy\n  );\n\n  if (marketsStrategy) {\n    return marketsStrategy.name;\n  }\n\n  return botsStrategy;\n};\n\nexport const BotPreview = ({ botItem, account }: any) => {\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { strategiesState } = useContext(StrategiesContext);\n\n  const [statsLoaded, setStatsLoaded] = useState(false);\n\n  const navigate = useNavigate();\n\n  const { deals } = dealsState;\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    getFundsLockedAndTodaysProfit(\n      botsDispatch,\n      botsState,\n      errorsDispatch,\n      botItem.id\n    ).then(() => {\n      setStatsLoaded(true);\n    });\n  }, [botItem]);\n\n  useEffect(() => {\n    if (statsLoaded) {\n      getMaxUsageEffect(\n        botsDispatch,\n        botsState,\n        errorsDispatch,\n        botItem.id,\n        account\n      ).then();\n    }\n  }, [account, botItem, statsLoaded]);\n\n  useEffect(() => {\n    if (\n      botItem &&\n      !(\"avgProfit\" in botItem) &&\n      \"maxUsage\" in botItem &&\n      is30daysDealsLoaded(dealsState, botItem.id)\n    ) {\n      getAvgProfitEffect(\n        botsDispatch,\n        botsState,\n        dealsState,\n        errorsDispatch,\n        botItem.id\n      );\n    }\n  }, [deals, botItem]);\n\n  const getDeals = async () => {\n    setDealsLimiter(Math.random());\n    fetchDealsForBotFor30Days(\n      dealsState,\n      dealsDispatch,\n      errorsDispatch,\n      botItem.id\n    );\n  };\n\n  const age = differenceInDays(moment(), moment(botItem.created_at));\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  });\n\n  const strategy =\n    botItem.strategy_list.length === 1\n      ? getBotsStrategyName(strategiesState, botItem.strategy_list[0].strategy)\n      : \"Combined\";\n\n  return (\n    <div className=\"BotPreview\">\n      <div className=\"BotPreviewRow\">\n        <div className=\"BotPreviewIconsSetContainer\">\n          <IconsSet bot={botItem} />\n          <BotInfo\n            strategy={botItem.strategy}\n            age={age}\n            is_enabled={botItem.is_enabled}\n          />\n          <div className=\"BotAvgProfit\">\n            <BotAvgProfit\n              maxUsage={botItem.maxUsage}\n              avgProfit={botItem.avgProfit}\n              getDeals={getDeals}\n              botId={botItem.id}\n            />\n          </div>\n        </div>\n        <div className=\"BotPreviewTableContainer\">\n          <BotName name={botItem.name} />\n          <Table\n            striped\n            size=\"sm\"\n            style={{ fontSize: \"12px\", marginBottom: \"0\" }}\n          >\n            <tbody>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>BotID</td>\n                <td>{botItem.id}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\", width: \"170px\" }}>Account</td>\n                <td>\n                  <div\n                    style={{\n                      display: \"flex\",\n                    }}\n                  >\n                    {\"market_icon\" in account && (\n                      <div\n                        className=\"BotMarketIcon\"\n                        style={{\n                          backgroundImage: `url(${account.market_icon})`,\n                        }}\n                      ></div>\n                    )}\n                    <a\n                      onClick={(e: any) => {\n                        e.preventDefault();\n                        navigate({\n                          pathname: `/accounts/${account.id}`,\n                          search: window.location.search,\n                        });\n                      }}\n                      href=\"#\"\n                    >\n                      {account.name}\n                    </a>\n                  </div>\n                </td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Strategy</td>\n                <td>{strategy}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Active deals/Max</td>\n                <td>{`${botItem.active_deals_count}/${botItem.max_active_deals}`}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Today's profit/Loss</td>\n                <td>{formatter.format(botItem.todayUsdProfit)}</td>\n              </tr>\n              <tr>\n                <td style={{ fontWeight: \"bold\" }}>Total profit/Loss</td>\n                <td>{formatter.format(botItem.finished_deals_profit_usd)}</td>\n              </tr>\n              <tr>\n                <>\n                  <OverlayTrigger\n                    delay={{ show: 100, hide: 200 }}\n                    overlay={<Tooltip>{t(\"dcaBotFundsUsedMaxUsage\")}</Tooltip>}\n                  >\n                    <td style={{ fontWeight: \"bold\" }}>\n                      Funds locked/Max usage\n                    </td>\n                  </OverlayTrigger>\n                  <td>{`${formatter.format(\n                    getFundsLocked(botItem)\n                  )}/${formatter.format(botItem.maxUsage)}`}</td>\n                </>\n              </tr>\n              <tr>\n                <>\n                  <OverlayTrigger\n                    delay={{ show: 100, hide: 200 }}\n                    overlay={<Tooltip>{t(\"dcaBotCurrentPnl\")}</Tooltip>}\n                  >\n                    <td style={{ fontWeight: \"bold\" }}>Current uPnL</td>\n                  </OverlayTrigger>\n                  <td>{formatter.format(botItem.active_deals_usd_profit)}</td>\n                </>\n              </tr>\n            </tbody>\n          </Table>\n          <div className=\"BotPreviewButtons\">\n            <Button\n              variant=\"primary\"\n              onClick={() => {\n                navigate({\n                  pathname: `/${botItem.id}`,\n                  search: window.location.search,\n                });\n              }}\n            >\n              {`View`}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const IconsSet = ({ bot }: any) => {\n  const quoteCurrency = bot.pairs[0].split(\"_\")[0];\n  const baseCurrency = bot.pairs[0].split(\"_\")[1];\n  const isMulti = bot.type === \"Bot::MultiBot\";\n  return (\n    <div className=\"IconsSetContainer\">\n      <div className=\"BotQuoteIconContainer\">\n        <CurrencyIcon currency={quoteCurrency} size={60} />\n      </div>\n      {isMulti ? (\n        <div className=\"BotBaseIconContainer\">\n          <img src={`/Multicoin_white.png`} alt=\"logo\" className=\"RobotsIcon\" />\n        </div>\n      ) : (\n        <div className=\"BotBaseIconContainer\">\n          <CurrencyIcon currency={baseCurrency} size={60} />\n        </div>\n      )}\n    </div>\n  );\n};\nexport const BotName = ({ name }: any) => (\n  <div className=\"BotNameContainer\">\n    <span className=\"BotName\">{name}</span>\n  </div>\n);\n\nexport const BotInfo = ({ strategy, age, is_enabled }: any) => (\n  <div className=\"BotInfoContainer\">\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Side:</div>\n      {strategy === \"long\" ? (\n        <Badge bg=\"success\">Long</Badge>\n      ) : (\n        <Badge bg=\"danger\">Short</Badge>\n      )}\n    </div>\n    <div className=\"BotInfoRecordContainer\">\n      <div className=\"BotInfoLabel\">Age:</div>\n      <div className=\"BotInfoValue\">{`${age} days`}</div>\n    </div>\n    {!is_enabled && (\n      <div className=\"BotInfoRecordContainer\">\n        <Badge bg=\"warning\" text=\"dark\">\n          Disabled\n        </Badge>\n      </div>\n    )}\n  </div>\n);\n\nexport const BotAvgProfit = ({ maxUsage, avgProfit, getDeals }: any) => {\n  const avgProfitCalculated = avgProfit || avgProfit === 0;\n  return (\n    <div className=\"BotAvgProfitContainer\">\n      {avgProfitCalculated && (\n        <>\n          <div\n            className=\"BotAvgProfitValue\"\n            style={{ color: avgProfit.value < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${getCurrencyFormat({\n              value: avgProfit.value || 0,\n              currency: \"USD\",\n            })} $`}\n          </div>\n          <div\n            className=\"BotAvgProfitPercent\"\n            style={{ color: avgProfit.value < 0 ? \"#FF0000\" : \"#198754\" }}\n          >\n            {`${getCurrencyFormat({\n              value: (avgProfit.value / maxUsage) * 100 || 0,\n              currency: \"USD\",\n            })} %`}\n          </div>\n        </>\n      )}\n      <div className=\"BotAvgProfitLabel\">Avg. Daily (30d)</div>\n      {!avgProfitCalculated && (\n        <Button\n          onClick={() => {\n            getDeals();\n          }}\n          variant=\"link\"\n          size=\"sm\"\n          active\n        >\n          Calculate\n        </Button>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  DealsContext,\n  ErrorsContext,\n  StrategiesContext,\n} from \"../../../../App\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  getCurrencyFormat,\n  getFundsLockedInBotCurrency,\n  getMaxUsageInBotCurrency,\n  getReservedFundsInBotCurrency,\n} from \"../../../../utils/BotsUtils\";\nimport { getAverageDealDuration } from \"../../../../utils/DealsUtils\";\nimport { getBotsStrategyName } from \"../../BotsList/BotPreview/BotPreview\";\nimport { useTranslation } from \"react-i18next\";\n\nimport \"./DCABotDetailsMainInfo.css\";\n\nexport const DCABotDetailsMainInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const { t } = useTranslation();\n\n  const { strategiesState } = useContext(StrategiesContext);\n  const { dealsState } = useContext(DealsContext);\n  const { activeDeals } = dealsState;\n\n  const navigate = useNavigate();\n\n  const [fundsLocked, setFundsLocked] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [fundsLockedShare, setFundsLockedShare] = useState(0);\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n  const [avgDealDuration, setAvgDealDuration] = useState<any>(0);\n\n  const [maxUsage, setMaxUsage] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [reservedFunds, setReservedFunds] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n  });\n\n  const botPairs =\n    bot.pairs.length === 1\n      ? bot.pairs[0].split(\"_\").reverse().join(\"/\")\n      : `${bot.pairs.length} pairs`;\n  const botMarket =\n    bot.pairs.length === 1 ? \"\" : `${bot.pairs[0].split(\"_\")[0]} market`;\n\n  const startCondition = bot.strategy_list.map((strategy: any) => (\n    <div key={`${Math.random()}`}>{`${getBotsStrategyName(\n      strategiesState,\n      strategy.strategy\n    )}${\n      strategy.options && strategy.options.type\n        ? `, ${getBotsStrategyName(strategiesState, strategy.options.type)}`\n        : ``\n    }${\n      strategy.options && strategy.options.percent\n        ? `, ${strategy.options.percent}%`\n        : ``\n    }${\n      strategy.options && strategy.options.time\n        ? `, ${strategy.options.time}`\n        : ``\n    }${\n      strategy.options && strategy.options.points\n        ? `, ${strategy.options.points}`\n        : ``\n    }`}</div>\n  ));\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      getMaxUsageInBotCurrency(bot, account).then((mxUsg) => {\n        setMaxUsage(mxUsg);\n      });\n    }\n  }, [bot, account]);\n\n  useEffect(() => {\n    if (bot && bot.id && bot.id in activeDeals) {\n      setReservedFunds(\n        getReservedFundsInBotCurrency(activeDeals[bot.id].list, bot, account)\n      );\n      setFundsLocked(\n        getFundsLockedInBotCurrency(activeDeals[bot.id].list, bot, account)\n      );\n    }\n  }, [activeDeals, bot]);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  useEffect(() => {\n    setAvgDealDuration(getAverageDealDuration(filteredDeals));\n  }, [filteredDeals]);\n\n  useEffect(() => {\n    if (maxUsage.value && fundsLocked.value) {\n      setFundsLockedShare(fundsLocked.value / maxUsage.value);\n    }\n  }, [maxUsage, fundsLocked]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Account</div>\n        <div className=\"BotInfoTableRow\">\n          <div style={{ display: \"flex\" }}>\n            {\"market_icon\" in account && (\n              <div\n                className=\"BotMarketIcon\"\n                style={{\n                  backgroundImage: `url(${account.market_icon})`,\n                }}\n              ></div>\n            )}\n            <a\n              onClick={(e: any) => {\n                e.preventDefault();\n                navigate({\n                  pathname: `/accounts/${account.id}`,\n                  search: window.location.search,\n                });\n              }}\n              href=\"#\"\n            >\n              {account.name}\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Bot pairs</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{botPairs}</div>\n          <div>{botMarket}</div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Deal start condition</div>\n        <div className=\"BotInfoTableRow\">{startCondition}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Active deals/Max</div>\n        <div className=\"BotInfoTableRow\">{`${bot.active_deals_count}/${bot.max_active_deals}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotFundsUsed\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Funds used</div>\n        </OverlayTrigger>\n        <div className=\"BotInfoTableRow\">\n          <div>{`${getCurrencyFormat(fundsLocked)} ${\n            fundsLocked.currency\n          }`}</div>\n          <div style={{ fontSize: \"10px\" }}>{`${percentFormatter.format(\n            fundsLockedShare\n          )} of max usage`}</div>\n        </div>\n      </div>\n\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotMaxUsage\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Max usage</div>\n        </OverlayTrigger>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(maxUsage)} ${\n          maxUsage.currency\n        }`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotReservedFunds\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Reserved funds</div>\n        </OverlayTrigger>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat(\n          reservedFunds\n        )} ${maxUsage.currency}`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total finished deals</div>\n        <div className=\"BotInfoTableRow\">{filteredDeals.length}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Avg deal duration</div>\n        <div className=\"BotInfoTableRow\">{`${avgDealDuration}`}</div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport { getCurrencyFormat, getReturns } from \"../../../../utils/BotsUtils\";\nimport {\n  getAverageDailyProfit,\n  getAverageProfitFromDeal,\n  getAverageTp,\n  getTotalProfitUsd,\n} from \"../../../../utils/DealsUtils\";\nimport { useTranslation } from \"react-i18next\";\n\nimport \"./DCABotDetailsProfitsInfo.css\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nexport const DCABotDetailsProfitsInfo = ({\n  account,\n  bot,\n  deals,\n  fromFilter,\n  toFilter,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const { t } = useTranslation();\n\n  const formatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n    signDisplay: \"always\",\n  });\n  const percentFormatter = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    minimumFractionDigits: 2,\n    signDisplay: \"always\",\n  });\n\n  const [averageTp, setAverageTp] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageProfitFromDeal, setAverageProfitFromDeal] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [averageDailyProfit, setAverageDailyProfit] = useState({\n    value: 0,\n    currency: \"\",\n  });\n  const [returns, setReturns] = useState({\n    value: 0,\n    currency: \"\",\n  });\n\n  const [totalProfitUsd, setTotalProfitUsd] = useState(0);\n  const [filteredDeals, setFilteredDeals] = useState<any>([]);\n\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n    setAverageDailyProfit(\n      getAverageDailyProfit(bot.created_at, deals, fromFilter, toFilter)\n    );\n    if (bot.maxUsage) {\n      setReturns({ value: getReturns(bot.maxUsage, deals), currency: \"%\" });\n    }\n    setTotalProfitUsd(getTotalProfitUsd(deals));\n  }, [deals, bot]);\n\n  useEffect(() => {\n    setAverageTp(getAverageTp(filteredDeals));\n    setAverageProfitFromDeal(getAverageProfitFromDeal(filteredDeals));\n  }, [filteredDeals]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Today's profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            (bot.todayUsdProfit || 0) < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(bot.todayUsdProfit || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Total profit/loss</div>\n        <div\n          className={`BotInfoTableRow ${\n            totalProfitUsd < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(totalProfitUsd)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotCurrentPnl\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Current uPnL</div>\n        </OverlayTrigger>\n        <div\n          className={`BotInfoTableRow ${\n            parseFloat(bot.active_deals_usd_profit) < 0\n              ? \"showRed\"\n              : \"showGreen\"\n          }`}\n        >\n          {formatter.format(parseFloat(bot.active_deals_usd_profit))}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotAverageTP\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Average TP, %</div>\n        </OverlayTrigger>\n        <div\n          className={`BotInfoTableRow ${\n            averageTp.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {`${getCurrencyFormat(averageTp)}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average profit from deal</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageProfitFromDeal.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageProfitFromDeal.value || 0)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average daily profit</div>\n        <div\n          className={`BotInfoTableRow ${\n            averageDailyProfit.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {formatter.format(averageDailyProfit.value)}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotMaxReturnsTime\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Returns</div>\n        </OverlayTrigger>\n        <div\n          className={`BotInfoTableRow ${\n            returns.value < 0 ? \"showRed\" : \"showGreen\"\n          }`}\n        >\n          {percentFormatter.format(returns.value)}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport {\n  getBaseOrderSize,\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSettingsInfo.css\";\n\nexport const DCABotDetailsSettingsInfo = ({\n  account,\n  bot,\n}: {\n  account: any;\n  bot: IBot;\n}) => {\n  const { t } = useTranslation();\n\n  const [baseOrderSize, setBaseOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setBaseOrderSize(getBaseOrderSize(bot, account));\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n    }\n  }, [bot, account]);\n\n  const leverage = bot.leverage_custom_value\n    ? parseInt(bot.leverage_custom_value)\n    : \"\";\n  const leverageType =\n    bot.leverage_type !== \"not_specified\" ? bot.leverage_type : \"\";\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Profit currency</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.profit_currency === \"quote_currency\" ? \"Quote\" : \"Base\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Take profit (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            {`${getCurrencyFormat({\n              value: parseFloat(bot.take_profit),\n              currency: \"%\",\n            })}%`}\n          </div>\n          <div>\n            {bot.take_profit_type === \"total\"\n              ? \"(from total volume)\"\n              : \"(from base volume)\"}\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Trailing</div>\n        <div className=\"BotInfoTableRow\">\n          {bot.trailing_enabled &&\n            `${getCurrencyFormat({\n              value: parseFloat(bot.trailing_deviation),\n              currency: \"%\",\n            })}%`}\n          {!bot.trailing_enabled && \"OFF\"}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Stop loss (timeout)</div>\n        <div className=\"BotInfoTableRow\">{`${getCurrencyFormat({\n          value: parseFloat(bot.stop_loss_percentage),\n          currency: \"%\",\n        })}% (${bot.stop_loss_timeout_in_seconds} s)`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Base order size (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>\n            <div>{`${getCurrencyFormat(baseOrderSize)} ${\n              baseOrderSize.currency\n            }${\n              baseOrderSize.additionalCurrency\n                ? ` (${baseOrderSize.additionalCurrency})`\n                : \"\"\n            }`}</div>\n            <div>{`(${bot.start_order_type})`}</div>\n          </div>\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Leverage (type)</div>\n        <div className=\"BotInfoTableRow\">\n          <div>{leverage || \"0\"}</div>\n          <div>{leverageType}</div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import _ from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { filterAllSuccessfulDeals } from \"../../../../state/deals/DealsSelectors\";\nimport {\n  getCurrencyFormat,\n  getSafetyOrderSize,\n} from \"../../../../utils/BotsUtils\";\nimport \"./DCABotDetailsSafetyInfo.css\";\n\nconst calculateMaxPriceDeviation = (\n  priceDeviation: any,\n  maxSafetyOrders: any,\n  stepScale: any\n) => {\n  return [...Array(maxSafetyOrders)].reduce(\n    (previousValue, currentValue, index) => {\n      return previousValue + priceDeviation * stepScale ** index;\n    },\n    0\n  );\n};\n\nconst DCABotDetailsSafetyInfo = ({\n  account,\n  bot,\n  deals,\n}: {\n  account: any;\n  bot: IBot;\n  deals: IDeal[];\n}) => {\n  const { t } = useTranslation();\n\n  const [safetyOrderSize, setSafetyOrderSize] = useState({\n    value: 0,\n    currency: \"\",\n    additionalCurrency: \"\",\n  });\n  const [maxPriceDeviation, setMaxPriceDeviation] = useState(0);\n\n  useEffect(() => {\n    if (bot.id && account.id) {\n      setSafetyOrderSize(getSafetyOrderSize(bot, account));\n      setMaxPriceDeviation(\n        calculateMaxPriceDeviation(\n          parseFloat(bot.safety_order_step_percentage),\n          bot.max_safety_orders,\n          parseFloat(bot.martingale_step_coefficient)\n        )\n      );\n    }\n  }, [bot, account]);\n\n  const [filteredDeals, setFilteredDeals] = useState<IDeal[]>([]);\n  useEffect(() => {\n    setFilteredDeals(filterAllSuccessfulDeals(deals));\n  }, [deals]);\n\n  const [avgSOCompleted, setAvgSOCompleted] = useState(0);\n  const [nonSOCompleted, setNonSOCompleted] = useState(0);\n  const [allSOCompleted, setAllSOCompleted] = useState(0);\n\n  useEffect(() => {\n    setAvgSOCompleted(\n      _.mean(\n        filteredDeals.map((deal) => {\n          return deal.completed_safety_orders_count;\n        })\n      )\n    );\n    setNonSOCompleted(\n      filteredDeals.filter((deal) => {\n        return deal.completed_safety_orders_count === 0;\n      }).length\n    );\n    setAllSOCompleted(\n      filteredDeals.filter((deal) => {\n        return deal.completed_safety_orders_count === bot.max_safety_orders;\n      }).length\n    );\n  }, [filteredDeals]);\n\n  return (\n    <div className=\"BotInfoTable\">\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Max safety trades (active)</div>\n        <div className=\"BotInfoTableRow\">{`${bot.max_safety_orders} (${bot.active_safety_orders_count})`}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotSafetyPriceDeviation\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Price deviation to open SO</div>\n        </OverlayTrigger>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: parseFloat(bot.safety_order_step_percentage),\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">SO size</div>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat(safetyOrderSize)} ${safetyOrderSize.currency}${\n            safetyOrderSize.additionalCurrency\n              ? ` (${safetyOrderSize.additionalCurrency})`\n              : \"\"\n          }`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotSafetyVolumeScale\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">SO volume scale</div>\n        </OverlayTrigger>\n        <div className=\"BotInfoTableRow\">\n          {bot.martingale_volume_coefficient}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotSafetyStepScale\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">SO step scale</div>\n        </OverlayTrigger>\n        <div className=\"BotInfoTableRow\">{bot.martingale_step_coefficient}</div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <OverlayTrigger\n          delay={{ show: 100, hide: 200 }}\n          overlay={<Tooltip>{t(\"dcaBotSafetyMaxPrice\")}</Tooltip>}\n        >\n          <div className=\"BotInfoTableHeader\">Max price deviation</div>\n        </OverlayTrigger>\n        <div className=\"BotInfoTableRow\">\n          {`${getCurrencyFormat({\n            value: maxPriceDeviation,\n            currency: \"%\",\n          })}%`}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">Average # SO completed</div>\n        <div className=\"BotInfoTableRow\">\n          {filteredDeals.length > 0 &&\n            getCurrencyFormat({\n              value: avgSOCompleted,\n              currency: \"%\",\n            })}\n        </div>\n      </div>\n\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">None SO completed</div>\n        <div className=\"BotInfoTableRow\">\n          {filteredDeals.length > 0 && (\n            <>\n              <div>{`${nonSOCompleted} deals`}</div>\n              <div>\n                {`${getCurrencyFormat({\n                  value: (nonSOCompleted / filteredDeals.length) * 100,\n                  currency: \"%\",\n                })}%`}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n      <div className=\"BotInfoTableColumn\">\n        <div className=\"BotInfoTableHeader\">All SO completed</div>\n        <div className=\"BotInfoTableRow\">\n          {filteredDeals.length > 0 && (\n            <>\n              <div>{`${allSOCompleted} deals`}</div>\n              <div>\n                {`${getCurrencyFormat({\n                  value: (allSOCompleted / filteredDeals.length) * 100,\n                  currency: \"%\",\n                })}%`}\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DCABotDetailsSafetyInfo;\n","import React from \"react\";\nimport { Tab, Tabs } from \"react-bootstrap\";\nimport { IBot } from \"../../../../interfaces/Bot\";\nimport { IDeal } from \"../../../../interfaces/Deal\";\nimport { BotInfo, IconsSet } from \"../../BotsList/BotPreview/BotPreview\";\nimport { DCABotDetailsMainInfo } from \"../DCABotDetailsMain/DCABotDetailsMainInfo\";\nimport { DCABotDetailsProfitsInfo } from \"../DCABotDetailsProfits/DCABotDetailsProfitsInfo\";\nimport { DCABotDetailsSettingsInfo } from \"../DCABotDetailsSettings/DCABotDetailsSettingsInfo\";\nimport moment from \"moment\";\nimport \"./DCABotDetailsInfo.css\";\nimport { differenceInDays } from \"../../../../utils/DealsUtils\";\nimport DCABotDetailsSafetyInfo from \"../DCABotDetailsSafety/DCABotDetailsSafetyInfo\";\n\nexport const DCABotDetailsInfo = ({\n  bot,\n  deals,\n  account,\n  infoKey,\n  setInfoKey,\n  fromFilter,\n  toFilter,\n}: {\n  bot: IBot;\n  deals: IDeal[];\n  account: any;\n  infoKey: string;\n  setInfoKey: any;\n  fromFilter: any;\n  toFilter: any;\n}) => {\n  const age = differenceInDays(moment(), moment(bot.created_at));\n  return (\n    <div className=\"DCABotDetailsInfo\">\n      <div className=\"DCABotDetailsInfoLogo\">\n        <IconsSet bot={bot}></IconsSet>\n        <BotInfo\n          strategy={bot.strategy}\n          age={age}\n          is_enabled={bot.is_enabled}\n        />\n      </div>\n      <div className=\"DCABotDetailsInfoTable\">\n        <Tabs activeKey={infoKey} onSelect={(k) => setInfoKey(k)}>\n          <Tab eventKey=\"main\" title=\"Main\" tabClassName=\"InfoTab\">\n            <DCABotDetailsMainInfo account={account} bot={bot} deals={deals} />\n          </Tab>\n          <Tab eventKey=\"settings\" title=\"Settings\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSettingsInfo account={account} bot={bot} />\n          </Tab>\n          <Tab eventKey=\"profits\" title=\"Profits\" tabClassName=\"InfoTab\">\n            <DCABotDetailsProfitsInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n              fromFilter={fromFilter}\n              toFilter={toFilter}\n            />\n          </Tab>\n          <Tab eventKey=\"safeties\" title=\"Safeties\" tabClassName=\"InfoTab\">\n            <DCABotDetailsSafetyInfo\n              account={account}\n              bot={bot}\n              deals={deals}\n            />\n          </Tab>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n","import moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  ProgressBar,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  AccountsContext,\n  BotsContext,\n  DealsContext,\n  ErrorsContext,\n} from \"../../../App\";\nimport { IBot } from \"../../../interfaces/Bot\";\nimport { IDeal } from \"../../../interfaces/Deal\";\nimport { fetchBot } from \"../../../state/bots/BotsEffects\";\nimport {\n  fetchAllDealsForBot,\n  getAllActiveDeals,\n} from \"../../../state/deals/DealsEffects\";\nimport {\n  is30daysDealsLoaded,\n  isAllDealsLoaded,\n  selectAllDeals,\n  selectAllDealsWithin30Days,\n} from \"../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../utils/ApiUtils\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\nimport \"./DCABotDetails.css\";\nimport { DCABotDetailsCharts } from \"./DCABotDetailsCharts/DCABotDetailsCharts\";\nimport { DCABotDetailsDealsTable } from \"./DCABotDetailsDealsTable/DCABotDetailsDealsTable\";\nimport { DCABotDetailsInfo } from \"./DCABotDetailsInfo/DCABotDetailsInfo\";\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst statusFilterOptions: any = [\n  { value: \"all\", label: \"All\" },\n  { value: \"Cancelled\", label: \"Cancelled\" },\n  { value: \"StopLoss\", label: \"StopLoss\" },\n  { value: \"Failed\", label: \"Failed\" },\n  { value: \"Completed\", label: \"Completed\" },\n  { value: \"Closed at Market Price\", label: \"Closed at Market Price\" },\n  { value: \"Liquidated\", label: \"Liquidated\" },\n  { value: \"Switched\", label: \"Switched\" },\n];\n\nconst filterByStatus = (deals: IDeal[], status: string) => {\n  return status === \"all\"\n    ? deals\n    : deals.filter((deal) => deal.localized_status === status);\n};\n\nconst filterByPair = (deals: IDeal[], pair: string) => {\n  return pair === \"all\" ? deals : deals.filter((deal) => deal.pair === pair);\n};\n\nconst filterFrom = (deals: IDeal[], dateFrom: any) => {\n  return !dateFrom ||\n    moment(\"01-04-2018\", \"MM-DD-YYYY\").isAfter(dateFrom, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateFrom, \"day\") ||\n          moment(deal.closed_at).isAfter(dateFrom)\n      );\n};\n\nconst filterTo = (deals: IDeal[], dateTo: any) => {\n  return !dateTo || moment().isSame(dateTo, \"day\")\n    ? deals\n    : deals.filter(\n        (deal) =>\n          moment(deal.closed_at).isSame(dateTo, \"day\") ||\n          moment(deal.closed_at).isBefore(dateTo)\n      );\n};\n\nexport const DCABotDetails = () => {\n  let params = useParams();\n  let navigate = useNavigate();\n\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { activeDeals } = dealsState;\n  const {\n    botsState: { bots },\n  } = useContext(BotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n  const [botId, setBotId] = useState(NaN);\n  const previousBotId = usePrevious(botId);\n  const [bot, setBot] = useState<IBot | null>(null);\n  const [botsDeals, setBotsDeals] = useState<IDeal[]>([]);\n  const [isDataLoading, setIsDataLoading] = useState(false);\n  const [isAllDataLoading, setIsAllDataLoading] = useState(false);\n  const [account, setAccount] = useState({});\n  const [infoKey, setInfoKey] = useState(\"main\");\n  const [percentLoadedDeals, setPercentLoadedDeals] = useState(0);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dealStateSwitcher, setDealStateSwitcher] = useState(\"finished\");\n  const [pairFilter, setPairFilter] = useState(\"all\");\n  const [pairFilterOptions, setPairFilterOptions] = useState([] as any);\n  const [fromFilter, setFromFilter] = useState(new Date(\"2018-04-02\"));\n  const [toFilter, setToFilter] = useState(new Date());\n\n  const clearFilters = () => {\n    setStatusFilter(\"all\");\n    setPairFilter(\"all\");\n    setFromFilter(new Date(\"2018-04-02\"));\n    setToFilter(new Date());\n  };\n\n  const timeRangeRadios = [\n    { name: \"30 days\", value: \"30d\" },\n    { name: \"All time\", value: \"allTime\" },\n  ];\n\n  const refreshData = () => {\n    setDealsLimiter(Math.random());\n    fetchBot(botsDispatch, botsState, errorsDispatch, botId);\n    fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId, true);\n    getAllActiveDeals(dealsDispatch, errorsDispatch, botId, true);\n  };\n\n  useEffect(() => {\n    if (params.botId) {\n      setBotId(parseInt(params.botId));\n    }\n  }, [params]);\n\n  useEffect(() => {\n    setDealsLimiter(Math.random());\n    if (botId && !previousBotId) {\n      fetchAllDealsForBot(dealsState, dealsDispatch, errorsDispatch, botId);\n      getAllActiveDeals(dealsDispatch, errorsDispatch, botId);\n    }\n  }, [botId]);\n\n  useEffect(() => {\n    if (bot) {\n      setAccount(accounts[bot.account_id]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    if (botId) {\n      setBot(bots[botId]);\n    }\n  }, [botId, bots]);\n\n  useEffect(() => {\n    if (botId) {\n      if (timeRangeValue === \"30d\") {\n        setIsDataLoading(!is30daysDealsLoaded(dealsState, botId));\n      } else if (timeRangeValue === \"allTime\") {\n        setIsDataLoading(!isAllDealsLoaded(dealsState, botId));\n      }\n      setIsAllDataLoading(!isAllDealsLoaded(dealsState, botId));\n    }\n  }, [dealsState, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      clearFilters();\n      setBotsDeals(deals);\n    }\n  }, [isDataLoading, isAllDataLoading, timeRangeValue, botId]);\n\n  useEffect(() => {\n    if (botId) {\n      let deals: any = [];\n      if (timeRangeValue === \"30d\") {\n        deals = selectAllDealsWithin30Days(dealsState, botId);\n      } else if (timeRangeValue === \"allTime\") {\n        deals = selectAllDeals(dealsState, botId);\n      }\n      deals = filterByPair(deals, pairFilter);\n      deals = filterByStatus(deals, statusFilter);\n      deals = filterTo(deals, toFilter);\n      deals = filterFrom(deals, fromFilter);\n      setBotsDeals(deals);\n    }\n  }, [pairFilter, statusFilter, fromFilter, toFilter]);\n\n  useEffect(() => {\n    if (\n      botId &&\n      bot &&\n      dealsState.deals[botId] &&\n      dealsState.deals[botId].offset\n    ) {\n      const loadedDeals = dealsState.deals[botId].offset || 0;\n      setPercentLoadedDeals(\n        Math.ceil((loadedDeals * 100) / parseFloat(bot.finished_deals_count))\n      );\n    }\n  }, [dealsState, botId, bot]);\n\n  useEffect(() => {\n    if (bot) {\n      setPairFilterOptions([\n        { value: \"all\", label: \"All\" },\n        ...bot.pairs.map((pair) => ({\n          value: pair,\n          label: pair.split(\"_\").reverse().join(\"/\"),\n        })),\n      ]);\n    }\n  }, [bot]);\n\n  useEffect(() => {\n    return () => {\n      // reset limiter everytime to stop all the jobs\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  return (\n    <div className=\"DCABotDetails\">\n      <Button\n        variant=\"primary\"\n        size=\"sm\"\n        className=\"DCABotDetailsGetBackButton\"\n        onClick={() => {\n          navigate(-1);\n        }}\n      >\n        {`< Back to bots list`}\n      </Button>\n      {!isAllDataLoading && (\n        <Button\n          variant=\"primary\"\n          size=\"sm\"\n          onClick={() => {\n            refreshData();\n          }}\n        >\n          {`Refresh data`}\n        </Button>\n      )}\n      {isDataLoading && !percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar now={100} animated className=\"BotDetailsProgressBar\" />\n          </div>\n        </>\n      )}\n      {isDataLoading && !!percentLoadedDeals && (\n        <>\n          <div className=\"BotDetailsProgressBarContainer\">\n            <ProgressBar\n              now={percentLoadedDeals}\n              label={`${percentLoadedDeals}%`}\n              className=\"BotDetailsProgressBar\"\n            />\n          </div>\n        </>\n      )}\n      {!isDataLoading && bot && account && (\n        <>\n          <DCABotDetailsCharts\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            timeRangeValue={timeRangeValue}\n          />\n          <div className=\"BotDetailsControlsContainer\">\n            <div className=\"BotDetailsControl\">\n              <ButtonGroup>\n                <ToggleButton\n                  id={`radio-finished`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radio-dealStateSwitcher\"\n                  value={\"finished\"}\n                  checked={dealStateSwitcher === \"finished\"}\n                  onChange={(e) => setDealStateSwitcher(e.currentTarget.value)}\n                >\n                  Finished\n                </ToggleButton>\n                <ToggleButton\n                  id={`radio-active`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radio-dealStateSwitcher\"\n                  value={\"active\"}\n                  checked={dealStateSwitcher === \"active\"}\n                  onChange={(e) => setDealStateSwitcher(e.currentTarget.value)}\n                >\n                  Active\n                </ToggleButton>\n              </ButtonGroup>\n            </div>\n            {dealStateSwitcher === \"finished\" && (\n              <>\n                {\" \"}\n                <div className=\"BotDetailsControl\">\n                  <ButtonGroup>\n                    {timeRangeRadios.map((radio, idx) => (\n                      <ToggleButton\n                        key={idx}\n                        id={`radio-${idx}`}\n                        type=\"radio\"\n                        variant=\"outline-primary\"\n                        name=\"radio\"\n                        value={radio.value}\n                        checked={timeRangeValue === radio.value}\n                        onChange={(e) =>\n                          setTimeRangeValue(e.currentTarget.value)\n                        }\n                      >\n                        {radio.name}\n                      </ToggleButton>\n                    ))}\n                  </ButtonGroup>\n                </div>\n                <div className=\"BotDetailsControl\">\n                  <div className=\"BotDetailsFilterTitle\">Status:</div>\n                  <Select\n                    onChange={(option: any): void => {\n                      setStatusFilter(option.value);\n                    }}\n                    value={\n                      statusFilterOptions.find(\n                        (option: any) => option.value === statusFilter\n                      ) as any\n                    }\n                    className=\"BotDetailsStatusFilter\"\n                    theme={(theme) => ({\n                      ...theme,\n                      colors: {\n                        ...theme.colors,\n                        primary25: \"#00a59a\",\n                        primary: \"#00a59a\",\n                      },\n                    })}\n                    options={statusFilterOptions as any}\n                  />\n                </div>\n                {bot && bot.pairs.length > 1 && (\n                  <div className=\"BotDetailsControl\">\n                    <div className=\"BotDetailsFilterTitle\">Pair:</div>\n                    <Select\n                      onChange={(option: any): void => {\n                        setPairFilter(option.value);\n                      }}\n                      value={\n                        pairFilterOptions.find(\n                          (option: any) => option.value === pairFilter\n                        ) as any\n                      }\n                      className=\"BotDetailsPairFilter\"\n                      options={pairFilterOptions as any}\n                      theme={(theme) => ({\n                        ...theme,\n                        colors: {\n                          ...theme.colors,\n                          primary25: \"#00a59a\",\n                          primary: \"#00a59a\",\n                        },\n                      })}\n                    />\n                  </div>\n                )}\n                {timeRangeValue === \"allTime\" && (\n                  <>\n                    <div className=\"BotDetailsControl\">\n                      <div className=\"BotDetailsFilterTitle\">From:</div>\n                      <DatePicker\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={fromFilter}\n                        onChange={(date) => {\n                          setFromFilter(date as any);\n                        }}\n                        selectsStart\n                        startDate={fromFilter}\n                        endDate={toFilter}\n                        className=\"BotDetailsDateFilter\"\n                        strictParsing\n                      />\n                    </div>\n                    <div className=\"BotDetailsControl\">\n                      <div className=\"BotDetailsFilterTitle\">To:</div>\n                      <DatePicker\n                        dateFormat=\"dd/MM/yyyy\"\n                        selected={toFilter}\n                        onChange={(date) => setToFilter(date as any)}\n                        selectsEnd\n                        startDate={fromFilter}\n                        endDate={toFilter}\n                        minDate={fromFilter}\n                        className=\"BotDetailsDateFilter\"\n                        strictParsing\n                      />\n                    </div>\n                  </>\n                )}\n                <div className=\"BotDetailsControl\">\n                  <Button\n                    variant=\"primary\"\n                    onClick={() => {\n                      clearFilters();\n                    }}\n                  >\n                    {`Clear filters`}\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n          <div className=\"DCABotInfoGroup\">\n            <div className=\"DCABotName\">{bot.name}</div>\n            <div className=\"DCABotId\">{`(Bot ID: ${bot.id})`}</div>\n            <div className=\"DCABotLinkTo3Commas\">\n              <Button\n                onClick={() => {\n                  window.open(`https://3commas.io/bots/${botId}`, \"_blank\");\n                }}\n                variant=\"link\"\n                size=\"sm\"\n                active\n              >\n                Open in 3Commas\n              </Button>\n            </div>\n          </div>\n          <DCABotDetailsInfo\n            bot={bot}\n            deals={botsDeals}\n            account={account}\n            infoKey={infoKey}\n            setInfoKey={setInfoKey}\n            fromFilter={fromFilter}\n            toFilter={toFilter}\n          />\n          {dealStateSwitcher === \"finished\" && botsDeals.length > 0 && (\n            <DCABotDetailsDealsTable\n              bot={bot}\n              deals={botsDeals}\n              dealStateSwitcher={dealStateSwitcher}\n            />\n          )}\n          {dealStateSwitcher === \"active\" &&\n            bot.id &&\n            bot.id in activeDeals &&\n            activeDeals[bot.id].list.length > 0 && (\n              <DCABotDetailsDealsTable\n                bot={bot}\n                deals={activeDeals[bot.id].list}\n                dealStateSwitcher={dealStateSwitcher}\n              />\n            )}\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, BotsContext } from \"../../../App\";\nimport Select from \"react-select\";\nimport \"./BotsFilters.css\";\nimport { setBotsFilters } from \"../../../state/bots/BotsActions\";\n\nconst BotsFilters = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    accountsState: { accounts, list },\n  } = useContext(AccountsContext);\n\n  const { filters } = botsState;\n\n  const updateFilter = async (filterItem: any) => {\n    botsDispatch(\n      setBotsFilters({\n        ...botsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...list.map((accountId: any) => ({\n      value: accountId,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${accounts[accountId].market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{accounts[accountId].name}</span>\n        </div>\n      ),\n      label_id: accounts[accountId].name,\n    })),\n  ];\n\n  const scopeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"enabled\", label: \"Enabled\" },\n    { value: \"disabled\", label: \"Disabled\" },\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"long\", label: \"Long\" },\n    { value: \"short\", label: \"Short\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    { value: \"created_at-desc\", label: \"Age (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Age (Oldest first)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"botsFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <div className=\"BotsFilters\">\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Account</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ account: option.value });\n          }}\n          value={accountsOptions.find(\n            (option: any) => option.value === filters.account\n          )}\n          options={accountsOptions}\n          className=\"AccountFilter\"\n          filterOption={(candidate, input) =>\n            candidate.data.label_id.includes(input)\n          }\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Status</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ scope: option.value });\n          }}\n          value={scopeOptions.find(\n            (option: any) => option.value === filters.scope\n          )}\n          options={scopeOptions}\n          className=\"ScopeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Side</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ type: option.value });\n          }}\n          value={typeOptions.find(\n            (option: any) => option.value === filters.type\n          )}\n          options={typeOptions}\n          className=\"TypeFilter\"\n        />\n      </div>\n      <div className=\"BotsFilterGroup\">\n        <div className=\"FilterTitle\">Sort by</div>\n        <Select\n          onChange={(option: any) => {\n            updateFilter({ sorting: option.value });\n          }}\n          value={sortingOptions.find(\n            (option: any) => option.value === filters.sorting\n          )}\n          options={sortingOptions}\n          className=\"Sorting\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BotsFilters;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { BotsContext, DealsContext, ErrorsContext } from \"../../../../App\";\nimport { fetchBots } from \"../../../../state/bots/BotsEffects\";\nimport { fetchDealsForBotFor30Days } from \"../../../../state/deals/DealsEffects\";\nimport { is30daysDealsLoaded } from \"../../../../state/deals/DealsSelectors\";\nimport { getDealsLimiter, setDealsLimiter } from \"../../../../utils/ApiUtils\";\nimport \"./BotsListCharts.css\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  calculateProfitPerDayForListOfBots,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"../../../../utils/DealsUtils\";\nimport {\n  getBotsLeaderboardChartData,\n  getCurrencyFormat,\n  getAllActiveDeals,\n  getSummirizedUpnl,\n  getSummirizedFundsLocked,\n} from \"../../../../utils/BotsUtils\";\nimport _ from \"lodash\";\n\nconst BotsListCharts = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const { dealsState, dealsDispatch } = useContext(DealsContext);\n  const { deals } = dealsState;\n  const { list, hasMore, offset, bots } = botsState;\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [dealsLoaded, setDealsLoaded] = useState(false);\n  const [botsLoaded, setBotsLoaded] = useState(false);\n\n  const [numberHandled, setNumberHandled] = useState(0);\n  const [avgProfit, setAvgProfit] = useState(0);\n  const [activeDeals, setActiveDeals] = useState(0);\n  const [summirizedUpnl, setSummirizedUpnl] = useState(0);\n  const [summirizedFundsLocked, setSummirizedFundsLocked] = useState(0);\n  const [profitsChartData, setProfitsChartData] = useState<any>([[], []]);\n  const [accumulativeProfitsChartData, setAccumulativeProfitsChartData] =\n    useState<any>([[], []]);\n  const [botsLeaderboardChartData, setBotsLeaderboardChartData] = useState<any>(\n    [[], [], []]\n  );\n\n  //first get all bots\n  const getBotsList = async () => {\n    if (hasMore && offset !== 0) {\n      await fetchBots(botsDispatch, botsState, errorsDispatch, false, 100);\n    }\n  };\n\n  useEffect(() => {\n    getBotsList().then(() => {\n      if (!hasMore) {\n        setBotsLoaded(true);\n      }\n    });\n  }, [offset]);\n\n  // get deals\n  const getBoatsDeals = async () => {\n    setDealsLimiter(Math.random());\n\n    for (const botId of list) {\n      if (!is30daysDealsLoaded(dealsState, botId)) {\n        await fetchDealsForBotFor30Days(\n          dealsState,\n          dealsDispatch,\n          errorsDispatch,\n          botId\n        );\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (botsLoaded) {\n      getBoatsDeals().then(() => {\n        setDealsLoaded(true);\n      });\n    }\n  }, [botsLoaded]);\n\n  // then calculate data for charts\n  useEffect(() => {\n    if (dealsLoaded) {\n      const profitsObject = calculateProfitPerDayForListOfBots(\n        dealsState,\n        list\n      );\n      setProfitsChartData(getProfitChartData(profitsObject));\n      setAccumulativeProfitsChartData(\n        getAccumulativeProfitChartData(profitsObject)\n      );\n      setBotsLeaderboardChartData(\n        getBotsLeaderboardChartData(botsState, dealsState)\n      );\n      setAvgProfit(_.sum(getProfitChartData(profitsObject)[1]) / 30);\n      setActiveDeals(getAllActiveDeals(botsState));\n      setSummirizedUpnl(getSummirizedUpnl(botsState));\n      setSummirizedFundsLocked(getSummirizedFundsLocked(botsState));\n    }\n  }, [dealsLoaded, bots]);\n\n  // reset limiter everytime to stop all the jobs\n  useEffect(() => {\n    return () => {\n      const dealsLimiter = getDealsLimiter();\n      dealsLimiter\n        .stop({ dropWaitingJobs: true })\n        .then(() => dealsLimiter.disconnect());\n    };\n  }, []);\n\n  // update data for loader\n  useEffect(() => {\n    const botsWithLoadedDeals = list.filter((botId: number) =>\n      is30daysDealsLoaded(dealsState, botId)\n    );\n    setNumberHandled((botsWithLoadedDeals.length / list.length) * 100);\n  }, [deals]);\n\n  return (\n    <div className=\"BotsListCharts\">\n      {!dealsLoaded && (\n        <div className=\"ProgressBar\">\n          {!botsLoaded ? (\n            <ProgressBar animated now={100} />\n          ) : (\n            <ProgressBar\n              now={Math.ceil(numberHandled)}\n              label={`${Math.ceil(numberHandled)}%`}\n            />\n          )}\n        </div>\n      )}\n      {dealsLoaded && (\n        <>\n          <div className=\"ChartContainer\">\n            <div className=\"SummirizedDataContainer\">\n              <div className=\"SummirizedData\">\n                <div className=\"SummirizedDataName\">Average Daily profit</div>\n                <div\n                  className=\"SummirizedDataValue\"\n                  style={{ color: avgProfit < 0 ? \"#FF0000\" : \"#198754\" }}\n                >\n                  {`${getCurrencyFormat(\n                    {\n                      value: avgProfit,\n                      currency: \"USD\",\n                    },\n                    \"always\"\n                  )} $`}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"ChartContainer\">\n            <div className=\"SummirizedDataContainer\">\n              <div className=\"SummirizedData\">\n                <div className=\"SummirizedDataName\">Active Deals</div>\n                <div className=\"SummirizedDataValue\">{activeDeals}</div>\n              </div>\n              <div className=\"SummirizedData\">\n                <div className=\"SummirizedDataName\">uPNL</div>\n                <div\n                  className=\"SummirizedDataValue\"\n                  style={{ color: avgProfit < 0 ? \"#FF0000\" : \"#198754\" }}\n                >\n                  {`${getCurrencyFormat(\n                    {\n                      value: summirizedUpnl,\n                      currency: \"USD\",\n                    },\n                    \"always\"\n                  )} $`}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"ChartContainer\">\n            <div className=\"SummirizedDataContainer\">\n              <div className=\"SummirizedData\">\n                <div className=\"SummirizedDataName\">Funds Locked</div>\n                <div className=\"SummirizedDataValue\">\n                  {`${getCurrencyFormat({\n                    value: summirizedFundsLocked,\n                    currency: \"USD\",\n                  })} $`}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"ChartContainer\">\n            <Line\n              options={\n                AccumulativeChartOptions(\n                  \"Total Accumulative Profit (30 days), $\"\n                ) as any\n              }\n              data={{\n                labels: accumulativeProfitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Accumulative Profit, $\",\n                    data: accumulativeProfitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                    fill: { value: 0 },\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={ProfitChartOptions(\"Total Profit (30 days), $\") as any}\n              data={{\n                labels: profitsChartData[0],\n                datasets: [\n                  {\n                    label: \"Profit, $\",\n                    data: profitsChartData[1],\n                    borderColor: \"rgb(53, 162, 235)\",\n                    backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n          <div className=\"ChartContainer\">\n            <Bar\n              options={\n                LeaderbordChartOptions(\n                  \"Leaderboard by profit (30 days), $\",\n                  botsLeaderboardChartData[0]\n                ) as any\n              }\n              data={{\n                labels: botsLeaderboardChartData[0],\n                datasets: [\n                  {\n                    label: \"Profits, $\",\n                    data: botsLeaderboardChartData[1],\n                    borderColor: \"rgb(255, 99, 132)\",\n                    backgroundColor: \"rgba(255, 99, 132, 0.8)\",\n                  },\n                ],\n              }}\n            />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default BotsListCharts;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { BotPreview } from \"./BotPreview/BotPreview\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport \"./BotsList.css\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  BotsContext,\n  DealsContext,\n} from \"../../../App\";\nimport { Button, Spinner } from \"react-bootstrap\";\nimport { fetchBots } from \"../../../state/bots/BotsEffects\";\nimport BotsListCharts from \"./BotsListCharts/BotsListCharts\";\nimport { usePrevious } from \"../../../utils/GeneralUtils\";\n\nconst haveAllBotsDealsFor30Days = (botsList: any, deals: any) =>\n  botsList.every((botId: any) => botId in deals);\n\nexport const BotsList = () => {\n  const { botsState, botsDispatch } = useContext(BotsContext);\n  const {\n    dealsState: { deals },\n  } = useContext(DealsContext);\n  const { list, hasMore, filters, bots } = botsState;\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [showCharts, setShowCharts] = useState(false);\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const previousFilters = usePrevious(filters);\n\n  useEffect(() => {\n    if (!previousFilters && list.length) {\n      setShowCharts(haveAllBotsDealsFor30Days(list, deals));\n    } else {\n      setShowCharts(false);\n      fetchBots(botsDispatch, botsState, errorsDispatch, true).then();\n    }\n  }, [filters]);\n\n  return isNothingFound ? (\n    <div className=\"FallbackContainer\">\n      <p style={{ textAlign: \"center\" }}>\n        <b>No results found =(</b>\n      </p>\n    </div>\n  ) : (\n    <InfiniteScroll\n      dataLength={list.length}\n      next={async () => {\n        if (list.length) {\n          await fetchBots(botsDispatch, botsState, errorsDispatch, false);\n        }\n      }}\n      hasMore={hasMore}\n      loader={\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      }\n      endMessage={\n        <p style={{ textAlign: \"center\" }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n    >\n      {showCharts ? (\n        <BotsListCharts />\n      ) : (\n        <div className=\"ShowChartsButtonContainer\">\n          <Button\n            className=\"ShowChartsButton\"\n            onClick={() => {\n              setShowCharts(true);\n            }}\n          >\n            Calculate profits\n          </Button>\n        </div>\n      )}\n      <div className=\"BotsList\">\n        {list.map((botId: number) => (\n          <BotPreview\n            botItem={bots[botId]}\n            key={botId}\n            account={accounts[bots[botId].account_id]}\n          />\n        ))}\n      </div>\n      {list.length === 0 && (\n        <div className=\"SpinnerContainer\">\n          <Spinner animation=\"grow\" />\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n","import React from \"react\";\nimport BotsFilters from \"./BotsFilters/BotsFilters\";\nimport { BotsList } from \"./BotsList/BotsList\";\nimport \"./DCABots.css\";\n\nexport const DCABots = () => (\n  <>\n    <BotsFilters />\n    <BotsList />\n  </>\n);\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { IGridBot } from \"../interfaces/GridBot\";\nimport {\n  differenceInDays,\n  differenceInHours,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\nimport { getCurrencyValueInUsd } from \"./GeneralUtils\";\n\nconst cryptoCoins: any = {\n  BTC: \"bitcoin\",\n  ETH: \"ethereum\",\n  BNB: \"binancecoin\",\n  USDT: \"tether\",\n  USDC: \"usd-coin\",\n  XRP: \"ripple\",\n  TRX: \"tron\",\n  BUSD: \"binance-usd\",\n  DOGE: \"dogecoin\",\n};\n\nexport const getInitialInvestment = async (gridBot: IGridBot) => {\n  const startPrice = parseFloat(gridBot.start_price);\n  const quantityPerGrid = parseFloat(gridBot.quantity_per_grid);\n\n  const pureInitialGrids = gridBot.grid_lines\n    .slice()\n    .sort((a: any, b: any) => {\n      return (\n        Math.abs(startPrice - parseFloat(a.price)) -\n        Math.abs(startPrice - parseFloat(b.price))\n      );\n    })\n    .slice();\n\n  pureInitialGrids.shift();\n\n  const baseInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) > startPrice)\n      .map((gridLine: any) => quantityPerGrid)\n  );\n\n  const quoteInvestment = _.sum(\n    pureInitialGrids\n      .filter((gridLine: any) => parseFloat(gridLine.price) < startPrice)\n      .map((gridLine: any) => parseFloat(gridLine.price) * quantityPerGrid)\n  );\n\n  const allInQuote = quoteInvestment + baseInvestment * startPrice;\n\n  let allInUsd = 0;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const createdOnDay = moment.utc(gridBot.updated_at);\n\n  if (quoteCurrency.includes(\"USD\")) {\n    allInUsd = allInQuote;\n  } else if (quoteCurrency in cryptoCoins) {\n    const marketData: any = await fetch(\n      `https://api.coingecko.com/api/v3/coins/${\n        cryptoCoins[quoteCurrency]\n      }/history?date=${createdOnDay.format(\"DD-MM-YYYY\")}&localization=false`\n    ).then((response: any) => response.json());\n\n    allInUsd = allInQuote * marketData.market_data.current_price.usd;\n  } else {\n    if (moment().utc().diff(createdOnDay, \"days\") < 366) {\n      const marketData: any = await fetch(\n        `https://api.currconv.com/api/v7/convert?apiKey=8ae78b023a9240049d4d56f97c81020a&q=${quoteCurrency}_USD&compact=ultra&date=${createdOnDay.format(\n          \"YYYY-MM-DD\"\n        )}&apiKey=e4dcebf8eb9df2180846`\n      ).then((response: any) => response.json());\n\n      allInUsd =\n        allInQuote *\n        marketData[`${quoteCurrency}_USD`][createdOnDay.format(\"YYYY-MM-DD\")];\n    }\n  }\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nexport const getCurrentInvestment = async (gridBot: IGridBot) => {\n  const currentPrice = parseFloat(gridBot.current_price);\n\n  const baseInvestment = parseFloat(gridBot.investment_base_currency);\n\n  const quoteInvestment = parseFloat(gridBot.investment_quote_currency);\n\n  const allInQuote = quoteInvestment + baseInvestment * currentPrice;\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const allInUsd = await getCurrencyValueInUsd(\n    \"binance\",\n    quoteCurrency,\n    allInQuote\n  );\n\n  return { baseInvestment, quoteInvestment, allInQuote, allInUsd };\n};\n\nconst hoursWithin30Days = 24 * 30;\n\nexport const getProfitAgeInHours = (profit: any) =>\n  differenceInHours(moment(), moment(profit.created_at));\n\nexport const getProfitsWithin30days = (profits: any) =>\n  profits.profits.filter(\n    (profit: any) => getProfitAgeInHours(profit) <= hoursWithin30Days\n  );\n\nexport const getMarketOrderAgeInHours = (marketOrder: any) =>\n  differenceInHours(moment(), moment(marketOrder.created_at));\n\nexport const getMarketOrdersWithin30days = (marketOrders: any) =>\n  marketOrders.grid_lines_orders.filter(\n    (marketOrder: any) =>\n      getMarketOrderAgeInHours(marketOrder) <= hoursWithin30Days\n  );\n\nexport const getObjectOfProfitPerDay = (\n  profits: Array<any>,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const dateStringProfits = (item: any) =>\n    moment(item.created_at).format(\"YYYY-MM-DD\");\n  let resultProfits = _.groupBy(profits, dateStringProfits);\n\n  const dateStringMarketOrders = (item: any) =>\n    moment(item.updated_at).format(\"YYYY-MM-DD\");\n  let resultMarketOrders = _.groupBy(marketOrders, dateStringMarketOrders);\n\n  const objectProfits = _.mapValues(resultProfits, (profits: Array<any>) =>\n    _.sum(profits.map((profit: any) => parseFloat(profit.profit)))\n  );\n\n  const objectMarketOrders = _.mapValues(\n    resultMarketOrders,\n    (marketOrders: Array<any>) =>\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01 *\n      -1\n  );\n\n  return _.mergeWith({}, objectProfits, objectMarketOrders, _.add);\n};\n\nexport const getOneGridBotAccumulativeProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getAccumulativeProfitChartData(botsProfits, difference);\n};\n\nexport const getOneGridBotProfitsChartData = (\n  profits: any[],\n  gridBot: IGridBot,\n  timeRangeValue: any,\n  marketOrders: any[],\n  tradingFee: number\n) => {\n  const botsProfits = getObjectOfProfitPerDay(\n    profits,\n    marketOrders,\n    tradingFee\n  );\n  const difference =\n    timeRangeValue === \"30d\"\n      ? 31\n      : Math.max(\n          differenceInDays(moment(), moment(gridBot.created_at)) + 1,\n          31\n        );\n  return getProfitChartData(botsProfits, difference);\n};\n","import { IGridBot, IGridBotFilters } from \"../../interfaces/GridBot\";\n\ninterface ISetNewGridBotsList {\n  type: \"setNewGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const setNewGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): ISetNewGridBotsList => ({\n  type: \"setNewGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToGridBotsList {\n  type: \"addToGridBotsList\";\n  payload: Array<IGridBot>;\n}\n\nexport const addToGridBotsList = (\n  gridBotsList: Array<IGridBot>\n): IAddToGridBotsList => ({\n  type: \"addToGridBotsList\",\n  payload: gridBotsList,\n});\n\ninterface ISetGridBotsOffset {\n  type: \"setGridBotsOffset\";\n  payload: number;\n}\n\nexport const setGridBotsOffset = (offset: number): ISetGridBotsOffset => ({\n  type: \"setGridBotsOffset\",\n  payload: offset,\n});\n\ninterface ISetGridBotsFilters {\n  type: \"setGridBotsFilters\";\n  payload: IGridBotFilters;\n}\n\nexport const setGridBotsFilters = (\n  gridBotsFilter: IGridBotFilters\n): ISetGridBotsFilters => ({\n  type: \"setGridBotsFilters\",\n  payload: gridBotsFilter,\n});\n\ninterface ISetGridBot {\n  type: \"setGridBot\";\n  payload: { gridBotId: number; gridBot: IGridBot };\n}\n\nexport const setGridBot = (\n  gridBotId: number,\n  gridBot: IGridBot\n): ISetGridBot => ({\n  type: \"setGridBot\",\n  payload: { gridBotId, gridBot },\n});\n\nexport type GridBotsAction =\n  | ISetNewGridBotsList\n  | ISetHasMore\n  | IAddToGridBotsList\n  | ISetGridBotsOffset\n  | ISetGridBotsFilters\n  | ISetGridBot;\n","import _ from \"lodash\";\nimport {\n  getGridBot,\n  getGridBots,\n  getGridBotsMarketOrders,\n  getGridBotsProfits,\n} from \"../../utils/ApiUtils\";\nimport { getCurrencyValueInUsd } from \"../../utils/GeneralUtils\";\nimport {\n  getCurrentInvestment,\n  getInitialInvestment,\n} from \"../../utils/GridBotsUtils\";\nimport {\n  addToGridBotsList,\n  setHasMore,\n  setNewGridBotsList,\n  setGridBot,\n} from \"./GridBotsActions\";\nimport { IGridBotsState } from \"./GridBotsReducer\";\n\nconst spotAccountsTypes = [\n  \"Account::BinanceAccount\",\n  \"Accounts::Ftx\",\n  \"Account::HuobiAccount\",\n  \"Account::OkexAccount\",\n  \"Account::KucoinAccount\",\n  \"Account::GateIoAccount\",\n  \"Account::KrakenAccount\",\n  \"Account::BitfinexAccount\",\n  \"Account::BinanceUsAccount\",\n  \"Account::BitstampAccount\",\n  \"Accounts::GeminiAccount\",\n  \"Account::BittrexAccount\",\n  \"Account::GdaxAccount\",\n  \"Account::PaperTradingAccount\",\n];\n\nexport async function fetchGridBots(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  gridBotsDispatch(setHasMore(true));\n  gridBotsDispatch(setNewGridBotsList([]));\n  const {\n    limit,\n    filters: { sorting, account },\n  } = gridBotsState;\n\n  const offsetLimit = customLimit ? customLimit : limit;\n  try {\n    let offset = 0;\n    let hasMore = true;\n\n    while (hasMore) {\n      const data: any = await getGridBots(\n        offset,\n        offsetLimit,\n        sorting,\n        account,\n        spotAccountsTypes\n      );\n      if (data.error) {\n        break;\n      }\n      gridBotsDispatch(addToGridBotsList(data));\n      offset = offset + offsetLimit;\n      if (data.length < offsetLimit) {\n        hasMore = false;\n      }\n    }\n    gridBotsDispatch(setHasMore(false));\n  } catch {\n    gridBotsDispatch(setNewGridBotsList([]));\n    gridBotsDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching grid bots list\",\n    });\n  }\n}\n\nexport async function fetchGridBot(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  try {\n    const gridBot = await getGridBot(gridBotId);\n    gridBotsDispatch(setGridBot(gridBotId, gridBot));\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching grid bot ${gridBotId}`,\n    });\n  }\n}\n\nexport async function fetchInitialInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"initialInvestments\" in gridBotItem) ||\n      !gridBotItem.initialInvestments\n    ) {\n      const initialInvestments = await getInitialInvestment(gridBotItem);\n      return initialInvestments;\n    } else {\n      return gridBotItem.initialInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching initial investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchCurrentInvestments(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (\n      !(\"currentInvestments\" in gridBotItem) ||\n      !gridBotItem.currentInvestments\n    ) {\n      const currentInvestments = await getCurrentInvestment(gridBotItem);\n      return currentInvestments;\n    } else {\n      return gridBotItem.currentInvestments;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching current investments for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchProfits(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  const quoteCurrency = gridBotItem.pair.split(\"_\")[0];\n  const baseCurrency = gridBotItem.pair.split(\"_\")[1];\n  const currency =\n    gridBotItem.profit_currency_type === \"quote\" ? quoteCurrency : baseCurrency;\n  try {\n    if (!(\"profits\" in gridBotItem) || !gridBotItem.profits) {\n      const profits = await getGridBotsProfits(gridBotId);\n      const sumProfits = _.sum(\n        profits.map((profit: any) => parseFloat(profit.profit))\n      );\n      const sumProfitsUsd = await getCurrencyValueInUsd(\n        \"binance\",\n        currency,\n        sumProfits\n      );\n      return { profits, sumProfitsUsd };\n    } else {\n      return gridBotItem.profits;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching profits for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchMarketOrders(\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n  try {\n    if (!(\"marketOrders\" in gridBotItem) || !gridBotItem.marketOrders) {\n      const marketOrders = await getGridBotsMarketOrders(gridBotId);\n      return marketOrders;\n    } else {\n      return gridBotItem.marketOrders;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${gridBotItem.name}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchGridBotsMetrics(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  // const initialInvestments = await fetchInitialInvestments(\n  //   gridBotsState,\n  //   errorsDispatch,\n  //   gridBotId\n  // );\n  // const currentInvestments = await fetchCurrentInvestments(\n  //   gridBotsState,\n  //   errorsDispatch,\n  //   gridBotId\n  // );\n  const profits = await fetchProfits(gridBotsState, errorsDispatch, gridBotId);\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    // initialInvestments,\n    // currentInvestments,\n    profits,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n\nexport async function fetchDetails(\n  gridBotsDispatch: any,\n  gridBotsState: IGridBotsState,\n  errorsDispatch: any,\n  gridBotId: number\n) {\n  const marketOrders = await fetchMarketOrders(\n    gridBotsState,\n    errorsDispatch,\n    gridBotId\n  );\n\n  const { gridBots } = gridBotsState;\n  const gridBotItem = gridBots[gridBotId];\n\n  const gridBot = {\n    ...gridBotItem,\n    marketOrders,\n  };\n  await gridBotsDispatch(setGridBot(gridBotId, gridBot));\n}\n","import React, { useContext } from \"react\";\nimport { AccountsContext, GridBotsContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\n\nimport \"./GridBotsListTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\nimport { useTranslation } from \"react-i18next\";\n\nconst GridBotsListTable = ({ values, investment, setModalGridBotId }: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n  const { list, gridBots } = gridBotsState;\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n  const { t } = useTranslation();\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account_id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const accountId = accountsList.filter(\n              (accId: any) => accId === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${accounts[accountId].market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{accounts[accountId].name}</div>\n              </div>\n            );\n          },\n        },\n        {\n          Header: \"Name\",\n          accessor: \"name\",\n          disableSortBy: true,\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Price range\",\n          tipText: t(\"gridBotPriceRange\"),\n          accessor: (originalRow: any, rowIndex: any) => {\n            return `${originalRow.upper_price}_${originalRow.lower_price}_${originalRow.grids_quantity} levels`;\n          },\n          id: \"price_range\",\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const range = value.split(\"_\");\n            return (\n              <div>\n                <div\n                  style={{\n                    color: \"#00A59A\",\n                  }}\n                >\n                  {range[0]}\n                </div>\n                <div\n                  style={{\n                    color: \"#EE7D8B\",\n                  }}\n                >\n                  {range[1]}\n                </div>\n                <div\n                  style={{\n                    fontSize: \"12px\",\n                  }}\n                >\n                  {range[2]}\n                </div>\n              </div>\n            );\n          },\n        },\n        {\n          Header: \"Start price\",\n          accessor: \"start_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Current price\",\n          accessor: \"current_price\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Active orders\",\n          tipText: t(\"gridBotActiveOrders\"),\n          accessor: (originalRow: any, rowIndex: any) => {\n            const grigLinesNumber = originalRow.grid_lines.length;\n            const sellOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"sell\"\n            ).length;\n            const buyOrdersNumber = originalRow.grid_lines.filter(\n              (line: any) => line.order_placed && line.side === \"buy\"\n            ).length;\n\n            return (\n              <>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"danger\">\n                    {sellOrdersNumber}\n                  </Badge>\n                </div>\n                <div style={{ marginBottom: \"3px\" }}>\n                  <Badge style={{ fontSize: \"14px\" }} bg=\"success\">\n                    {buyOrdersNumber}\n                  </Badge>\n                </div>\n                {/* {sellOrdersNumber + buyOrdersNumber !== grigLinesNumber - 1 && (\n                  <div style={{ marginBottom: \"3px\" }}>\n                    <OverlayTrigger\n                      key=\"right\"\n                      placement=\"right\"\n                      overlay={\n                        <Tooltip id={`tooltip-${originalRow.id}`}>\n                          Bot was unable to place all orders on the exchange.\n                          This may heavily impact your trading results and PnL\n                          reports on this page. Please contact 3commas support\n                          to check the error details.\n                        </Tooltip>\n                      }\n                    >\n                      <Badge style={{ fontSize: \"16px\" }} bg=\"warning\">\n                        {\"\\u26A0\"}\n                      </Badge>\n                    </OverlayTrigger>\n                  </div>\n                )} */}\n              </>\n            );\n          },\n          id: \"activeOrder\",\n          disableSortBy: true,\n        },\n        // {\n        //   Header: \"Initial investment\",\n        //   tipText: t(\"gridBotInitialInvestment\"),\n        //   accessor: (originalRow: any, rowIndex: any) => {\n        //     const quoteCurrency = originalRow.pair.split(\"_\")[0];\n        //     const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n        //     if (!originalRow.initialInvestments) {\n        //       return \"\";\n        //     } else if (investment === \"balances\") {\n        //       return (\n        //         <>\n        //           <div style={{ display: \"flex\" }}>\n        //             <CurrencyIcon currency={baseCurrency} />\n        //             <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n        //               value: originalRow.initialInvestments.baseInvestment,\n        //               currency: baseCurrency,\n        //             })} ${baseCurrency}`}</div>\n        //           </div>\n        //           <div style={{ display: \"flex\" }}>\n        //             <CurrencyIcon currency={quoteCurrency} />\n        //             <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n        //               value: originalRow.initialInvestments.quoteInvestment,\n        //               currency: quoteCurrency,\n        //             })} ${quoteCurrency}`}</div>\n        //           </div>\n        //         </>\n        //       );\n        //     } else {\n        //       const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n        //       const val =\n        //         values === \"usd\"\n        //           ? originalRow.initialInvestments.allInUsd\n        //           : originalRow.initialInvestments.allInQuote;\n        //       return (\n        //         <div style={{ display: \"flex\" }}>\n        //           <CurrencyIcon currency={cur} />\n        //           <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n        //             value: val,\n        //             currency: cur,\n        //           })} ${cur}`}</div>\n        //         </div>\n        //       );\n        //     }\n        //   },\n        //   id: \"initial_investment\",\n        //   disableSortBy: true,\n        // },\n        // {\n        //   Header: \"Current investment\",\n        //   tipText: t(\"gridBotCurrentInvestment\"),\n        //   accessor: (originalRow: any, rowIndex: any) => {\n        //     const quoteCurrency = originalRow.pair.split(\"_\")[0];\n        //     const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n        //     if (!originalRow.currentInvestments) {\n        //       return \"\";\n        //     } else if (investment === \"balances\") {\n        //       return (\n        //         <>\n        //           <div style={{ display: \"flex\" }}>\n        //             <CurrencyIcon currency={baseCurrency} />\n        //             <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n        //               value: originalRow.currentInvestments.baseInvestment,\n        //               currency: baseCurrency,\n        //             })} ${baseCurrency}`}</div>\n        //           </div>\n        //           <div style={{ display: \"flex\" }}>\n        //             <CurrencyIcon currency={quoteCurrency} />\n        //             <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n        //               value: originalRow.currentInvestments.quoteInvestment,\n        //               currency: quoteCurrency,\n        //             })} ${quoteCurrency}`}</div>\n        //           </div>\n        //         </>\n        //       );\n        //     } else {\n        //       const cur = values === \"usd\" ? \"USD\" : quoteCurrency;\n        //       const val =\n        //         values === \"usd\"\n        //           ? originalRow.currentInvestments.allInUsd\n        //           : originalRow.currentInvestments.allInQuote;\n        //       return (\n        //         <div style={{ display: \"flex\" }}>\n        //           <CurrencyIcon currency={cur} />\n        //           <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n        //             value: val,\n        //             currency: cur,\n        //           })} ${cur}`}</div>\n        //         </div>\n        //       );\n        //     }\n        //   },\n        //   id: \"current_investment\",\n        //   disableSortBy: true,\n        // },\n        // {\n        //   Header: \"Investment change\",\n        //   accessor: (originalRow: any, rowIndex: any) => {\n        //     const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n        //     if (\n        //       !originalRow.currentInvestments ||\n        //       !originalRow.initialInvestments\n        //     ) {\n        //       return \"\";\n        //     } else if (investment === \"balances\" || values === \"quote\") {\n        //       const invesmentChange =\n        //         originalRow.currentInvestments.allInQuote -\n        //         originalRow.initialInvestments.allInQuote;\n        //       return (\n        //         <>\n        //           <div>\n        //             <div>{`${getCurrencyFormat({\n        //               value: invesmentChange,\n        //               currency: quoteCurrency,\n        //             })} ${quoteCurrency}`}</div>\n        //           </div>\n        //           <div\n        //             className={\n        //               invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n        //             }\n        //           >{`${getCurrencyFormat({\n        //             value: originalRow.initialInvestments.allInQuote\n        //               ? (invesmentChange /\n        //                   originalRow.initialInvestments.allInQuote) *\n        //                 100\n        //               : 0,\n        //             currency: \"USD\",\n        //           })} %`}</div>\n        //         </>\n        //       );\n        //     } else {\n        //       const invesmentChange =\n        //         originalRow.currentInvestments.allInUsd -\n        //         originalRow.initialInvestments.allInUsd;\n        //       return (\n        //         <>\n        //           <div>\n        //             <div>{`${getCurrencyFormat({\n        //               value: invesmentChange,\n        //               currency: \"USD\",\n        //             })} USD`}</div>\n        //           </div>\n        //           <div\n        //             className={\n        //               invesmentChange >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n        //             }\n        //           >{`${getCurrencyFormat({\n        //             value: originalRow.initialInvestments.allInUsd\n        //               ? (invesmentChange /\n        //                   originalRow.initialInvestments.allInUsd) *\n        //                 100\n        //               : 0,\n        //             currency: \"USD\",\n        //           })} %`}</div>\n        //         </>\n        //       );\n        //     }\n        //   },\n        //   id: \"investment_change\",\n        //   disableSortBy: true,\n        // },\n        {\n          Header: \"Bot profit\",\n          tipText: t(\"gridBotProfit\"),\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            if (!originalRow.profits || !originalRow.profits.profits) {\n              return \"\";\n            } else {\n              const profits = _.sum(\n                originalRow.profits.profits.map((profit: any) =>\n                  parseFloat(profit.profit)\n                )\n              );\n              const currency =\n                originalRow.profit_currency_type === \"quote\"\n                  ? quoteCurrency\n                  : baseCurrency;\n              return (\n                <div>{`${getCurrencyFormat({\n                  value: profits,\n                  currency: currency,\n                })} ${currency}`}</div>\n              );\n            }\n          },\n          id: \"bot_profit\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Bot profit, $\",\n          tipText: t(\"gridBotProfit\"),\n          accessor: (originalRow: any, rowIndex: any) => {\n            if (!originalRow.profits || !originalRow.profits.sumProfitsUsd) {\n              return \"\";\n            } else {\n              return (\n                <div>{`${getCurrencyFormat({\n                  value: originalRow.profits.sumProfitsUsd,\n                  currency: \"USD\",\n                })} USD`}</div>\n              );\n            }\n          },\n          id: \"bot_profit_usd\",\n          disableSortBy: true,\n        },\n        // {\n        //   Header: \"Bot profit\",\n        //   tipText: t(\"gridBotProfit\"),\n        //   accessor: (originalRow: any, rowIndex: any) => {},\n        //   id: \"bot_profit\",\n        //   disableSortBy: true,\n        // },\n        // {\n        //   Header: \"Total PnL\",\n        //   tipText: t(\"gridBotTotalPnl\"),\n        //   accessor: (originalRow: any, rowIndex: any) => {\n        //     const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n        //     if (\n        //       !originalRow.profits ||\n        //       !originalRow.currentInvestments ||\n        //       !originalRow.initialInvestments\n        //     ) {\n        //       return \"\";\n        //     } else if (investment === \"balances\" || values === \"quote\") {\n        //       const quoteProfit = _.sum(\n        //         originalRow.profits.map((profit: any) =>\n        //           parseFloat(profit.profit)\n        //         )\n        //       );\n        //       const pnl =\n        //         quoteProfit +\n        //         originalRow.currentInvestments.allInQuote -\n        //         originalRow.initialInvestments.allInQuote;\n        //       const pnlPercent =\n        //         (pnl / originalRow.initialInvestments.allInQuote) * 100;\n        //       return (\n        //         <>\n        //           <div>\n        //             {`${getCurrencyFormat({\n        //               value: pnl,\n        //               currency: quoteCurrency,\n        //             })} ${quoteCurrency}`}\n        //           </div>\n        //           <div\n        //             className={\n        //               pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n        //             }\n        //           >{`${getCurrencyFormat({\n        //             value: pnlPercent,\n        //             currency: \"USD\",\n        //           })} %`}</div>\n        //         </>\n        //       );\n        //     } else {\n        //       const usdProfit = _.sum(\n        //         originalRow.profits.map((profit: any) =>\n        //           parseFloat(profit.usd_profit)\n        //         )\n        //       );\n        //       const pnl =\n        //         usdProfit +\n        //         originalRow.currentInvestments.allInUsd -\n        //         originalRow.initialInvestments.allInUsd;\n        //       const pnlPercent =\n        //         (pnl / originalRow.initialInvestments.allInUsd) * 100;\n        //       return (\n        //         <>\n        //           <div>\n        //             {`${getCurrencyFormat({\n        //               value: pnl,\n        //               currency: \"USD\",\n        //             })} USD`}\n        //           </div>\n        //           <div\n        //             className={\n        //               pnlPercent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n        //             }\n        //           >{`${getCurrencyFormat({\n        //             value: pnlPercent,\n        //             currency: \"USD\",\n        //           })} %`}</div>\n        //         </>\n        //       );\n        //     }\n        //   },\n        //   id: \"total_PnL\",\n        //   disableSortBy: true,\n        // },\n        {\n          Header: \"Stats\",\n          Cell: ({ cell: { value } }: any) => {\n            return (\n              <div\n                style={{\n                  display: \"flex\",\n                  width: \"100%\",\n                  height: \"100%\",\n                  alignItems: \"center\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <img className=\"stats\" src={`stats.png`} alt=\"stats\" />\n              </div>\n            );\n          },\n          id: \"stats\",\n          disableSortBy: true,\n        },\n      ] as any,\n    [investment, values]\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((gridBotId: number) => gridBots[gridBotId]),\n    });\n\n  const renderColumnHeader = (column: any) => (\n    <div style={{ display: \"flex\", width: \"100%\" }}>\n      {column.render(\"Header\")}\n      <div\n        style={{\n          marginLeft: \"auto\",\n          cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n        }}\n      >\n        {column.isSorted ? (column.isSortedDesc ? \" 🔽\" : \" 🔼\") : \"   \"}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"GridBotsListTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  {(column as any).tipText ? (\n                    <OverlayTrigger\n                      delay={{ show: 100, hide: 200 }}\n                      overlay={<Tooltip>{(column as any).tipText}</Tooltip>}\n                    >\n                      {renderColumnHeader(column)}\n                    </OverlayTrigger>\n                  ) : (\n                    renderColumnHeader(column)\n                  )}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalGridBotId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default GridBotsListTable;\n","import _ from \"lodash\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getOneGridBotAccumulativeProfitsChartData,\n  getOneGridBotProfitsChartData,\n} from \"../../../../utils/GridBotsUtils\";\nimport \"./GridBotDetailsCharts.css\";\n\nconst GridBotDetailsCharts = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const quoteCurrency = gridBot.pair.split(\"_\")[0];\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: quoteCurrency,\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getOneGridBotAccumulativeProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n    setProfitsData(\n      getOneGridBotProfitsChartData(\n        profits,\n        gridBot,\n        timeRangeValue,\n        marketOrders,\n        tradingFee\n      )\n    );\n  }, [profits, marketOrders, tradingFee]);\n\n  return (\n    <div className=\"GridBotDetailsCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, ${quoteCurrency}`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, ${quoteCurrency}`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, ${quoteCurrency}`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default GridBotDetailsCharts;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { GridBotsContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./GridBotDetailsTable.css\";\n\nconst GridBotDetailsTable = ({\n  gridBotId,\n  profits,\n  marketOrders,\n  tradingFee,\n  timeRangeValue,\n}: any) => {\n  const { gridBotsState } = useContext(GridBotsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const currency =\n    gridBot.profit_currency_type === \"quote\"\n      ? gridBot.pair.split(\"_\")[0]\n      : gridBot.pair.split(\"_\")[1];\n\n  const [profit, setProfit] = useState(0);\n  const [avgProfit, setAvgProfit] = useState(0);\n  const [returns, setReturns] = useState(0);\n  const [running, setRunning] = useState(0);\n\n  useEffect(() => {\n    const summarizedProfits = _.sum(\n      profits.map((profit: any) => parseFloat(profit.profit))\n    );\n    const summarizedMarketOrders =\n      _.sum(\n        marketOrders.map((marketOrder: any) => parseFloat(marketOrder.total))\n      ) *\n      tradingFee *\n      0.01;\n    const realProfit = summarizedProfits - summarizedMarketOrders;\n\n    const quoteInvestment = gridBot.initialInvestments\n      ? gridBot.initialInvestments.allInQuote\n      : 0;\n    const realReturns = quoteInvestment\n      ? (realProfit * 100) / quoteInvestment\n      : 0;\n\n    const start = moment.utc(gridBot.created_at);\n    const end = gridBot.closed_at\n      ? moment.utc(gridBot.closed_at)\n      : moment.utc();\n\n    setProfit(realProfit);\n    setReturns(realReturns);\n    setRunning(end.diff(start, \"days\"));\n  }, [gridBot, profits, marketOrders, tradingFee, timeRangeValue]);\n\n  useEffect(() => {\n    let period = 1;\n\n    if (timeRangeValue === \"30d\") {\n      period = running > 30 ? 30 : running;\n    } else {\n      period = running;\n    }\n\n    const realAvgProfit = period ? profit / period : 0;\n    setAvgProfit(realAvgProfit);\n  }, [running, profit]);\n\n  return profits && marketOrders ? (\n    <Table hover>\n      <thead>\n        <tr>\n          <th>Days running</th>\n          <th>Transactions</th>\n          <th>Avg. daily</th>\n          <th>Bot profit</th>\n          {/* <th>Returns</th> */}\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{running}</td>\n          <td>{profits ? profits.length : \"\"}</td>\n          <td>{`${getCurrencyFormat({\n            value: avgProfit,\n            currency: currency,\n          })} ${currency}`}</td>\n          <td>{`${getCurrencyFormat({\n            value: profit,\n            currency: currency,\n          })} ${currency}`}</td>\n          {/* <td>{`${getCurrencyFormat({\n            value: returns,\n            currency: \"USD\",\n          })} %`}</td> */}\n        </tr>\n      </tbody>\n    </Table>\n  ) : (\n    <></>\n  );\n};\n\nexport default GridBotDetailsTable;\n","import React, { useEffect, useContext, useState } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  FormControl,\n  InputGroup,\n  Modal,\n  ToggleButton,\n} from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport { fetchDetails } from \"../../../state/gridBots/GridBotsEffects\";\nimport {\n  getMarketOrdersWithin30days,\n  getProfitsWithin30days,\n} from \"../../../utils/GridBotsUtils\";\nimport \"./GridBotDetails.css\";\nimport GridBotDetailsCharts from \"./GridBotDetailsCharts/GridBotDetailsCharts\";\nimport GridBotDetailsTable from \"./GridBotDetailsTable/GridBotDetailsTable\";\n\nconst timeRangeRadios = [\n  { name: \"30 days\", value: \"30d\" },\n  { name: \"All time\", value: \"allTime\" },\n];\n\nconst GridBotDetails = ({ modalIsOpen, setModalIsOpen, gridBotId }: any) => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const { gridBots } = gridBotsState;\n\n  const gridBot = gridBots[gridBotId];\n\n  const [tradingFee, setTradingFee] = useState(0);\n\n  const [timeRangeValue, setTimeRangeValue] = useState(\"30d\");\n\n  const [marketOrders, setMarketOrders] = useState([]);\n  const [profits, setProfits] = useState();\n\n  const [account, setAccount] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  const inputTradingFee = (e: any) => {\n    if (e.target.value >= 0 && e.target.value <= 100) {\n      setTradingFee(e.target.value);\n    }\n  };\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && !gridBot.marketOrders) {\n      fetchDetails(\n        gridBotsDispatch,\n        gridBotsState,\n        errorsDispatch,\n        gridBotId\n      ).then();\n    }\n    if (gridBot) {\n      setAccount(accounts[gridBot.account_id]);\n    }\n  }, [gridBot]);\n\n  useEffect(() => {\n    if (gridBot && gridBot.profits && gridBot.marketOrders) {\n      if (timeRangeValue === \"30d\") {\n        setMarketOrders(\n          getMarketOrdersWithin30days(gridBot.marketOrders).filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(getProfitsWithin30days(gridBot.profits));\n      } else {\n        setMarketOrders(\n          gridBot.marketOrders.grid_lines_orders.filter(\n            (marketOrder: any) => marketOrder.status_string === \"Filled\"\n          )\n        );\n        setProfits(gridBot.profits.profits);\n      }\n    }\n  }, [gridBot, timeRangeValue]);\n\n  return (\n    <>\n      {gridBot && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              {`${gridBot.name}: ${gridBot.pair\n                .split(\"_\")\n                .reverse()\n                .join(\"/\")}`}\n              {account && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    marginTop: \"4px\",\n                  }}\n                >\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"BotMarketIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <a\n                    onClick={(e: any) => {\n                      e.preventDefault();\n                      navigate({\n                        pathname: `/accounts/${account.id}`,\n                        search: window.location.search,\n                      });\n                    }}\n                    href=\"#\"\n                  >\n                    {account.name}\n                  </a>\n                </div>\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"GridBotsDetailsFilters\">\n              <div className=\"GridBotListControl\">\n                <div className=\"FilterTitle\">Time range</div>\n                <ButtonGroup>\n                  {timeRangeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio\"\n                      value={radio.value}\n                      checked={timeRangeValue === radio.value}\n                      onChange={(e) => setTimeRangeValue(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n              {/* <div\n                className=\"GridBotListControl\"\n                style={{ width: \"150px\", marginLeft: \"auto\" }}\n              >\n                <div className=\"FilterTitle\">Trading fee</div>\n                <InputGroup>\n                  <FormControl\n                    onChange={inputTradingFee}\n                    value={tradingFee}\n                    type=\"number\"\n                  />\n                  <InputGroup.Text>%</InputGroup.Text>\n                </InputGroup>\n              </div> */}\n            </div>\n            {profits && (\n              <>\n                <GridBotDetailsTable\n                  gridBotId={gridBotId}\n                  profits={profits}\n                  marketOrders={marketOrders}\n                  tradingFee={tradingFee}\n                  timeRangeValue={timeRangeValue}\n                />\n                <GridBotDetailsCharts\n                  gridBotId={gridBotId}\n                  profits={profits}\n                  marketOrders={marketOrders}\n                  tradingFee={tradingFee}\n                  timeRangeValue={timeRangeValue}\n                />\n              </>\n            )}\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default GridBotDetails;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport { AccountsContext, ErrorsContext, GridBotsContext } from \"../../../App\";\nimport {\n  fetchGridBotsMetrics,\n  fetchGridBots,\n} from \"../../../state/gridBots/GridBotsEffects\";\nimport Select from \"react-select\";\n\nimport \"./GridBotsList.css\";\nimport GridBotsListTable from \"./GridBotsListTable/GridBotsListTable\";\nimport { setGridBotsFilters } from \"../../../state/gridBots/GridBotsActions\";\nimport { isSpotAccount } from \"../../../utils/BotsUtils\";\nimport GridBotDetails from \"../GridBotDetails/GridBotDetails\";\nimport GridBotListMetrics from \"./GridBotListMetrics/GridBotListMetrics\";\n\nexport const investmentRadios = [\n  { name: \"Value\", value: \"value\" },\n  { name: \"Balances\", value: \"balances\" },\n];\nexport const valuesRadios = [\n  { name: \"USD\", value: \"usd\" },\n  { name: \"Quote\", value: \"quote\" },\n];\n\nconst GridBotsList = () => {\n  const { gridBotsState, gridBotsDispatch } = useContext(GridBotsContext);\n  const { list, hasMore, filters } = gridBotsState;\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const [investment, setInvestment] = useState(\"value\");\n  const [values, setValues] = useState(\"usd\");\n  const [modalGridBotId, setModalGridBotId] = useState(\"\");\n\n  const updateFilter = async (filterItem: any) => {\n    gridBotsDispatch(\n      setGridBotsFilters({\n        ...gridBotsState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const isNothingFound = !hasMore && list.length === 0;\n\n  const accountsOptions = [\n    { value: \"\", label: \"All spot accounts\", label_id: \"All\" },\n    ...accountsList\n      .filter((accountId: any) =>\n        isSpotAccount(accounts[accountId].market_code)\n      )\n      .map((accountId: any) => ({\n        value: accountId,\n        label: (\n          <div className=\"AccountFilterItem\">\n            <div>\n              <div\n                className=\"AccountMarketIcon\"\n                style={{\n                  backgroundImage: `url(${accounts[accountId].market_icon})`,\n                }}\n              ></div>\n            </div>\n            <span>{accounts[accountId].name}</span>\n          </div>\n        ),\n        label_id: accounts[accountId].name,\n      })),\n  ];\n\n  useEffect(() => {\n    fetchGridBots(gridBotsDispatch, gridBotsState, errorsDispatch).then();\n  }, [filters]);\n\n  useEffect(() => {\n    if (!hasMore) {\n      for (const gridBotId of list) {\n        fetchGridBotsMetrics(\n          gridBotsDispatch,\n          gridBotsState,\n          errorsDispatch,\n          gridBotId\n        ).then();\n      }\n    }\n  }, [hasMore, list]);\n\n  return (\n    <>\n      {/* <GridBotListMetrics /> */}\n      <div className=\"GridBotsFilters\">\n        <div className=\"GridBotsFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            onChange={(option: any) => {\n              updateFilter({ account: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.account\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        {/* <div className=\"GridBotListControl\">\n          <div className=\"FilterTitle\">Investment</div>\n          <ButtonGroup id=\"foo\">\n            {investmentRadios.map((radio, idx) => (\n              <ToggleButton\n                key={radio.value}\n                id={`radio-${radio.value}`}\n                type=\"radio\"\n                variant=\"outline-primary\"\n                name=\"radioInvestment\"\n                value={radio.value}\n                checked={investment === radio.value}\n                onChange={(e) => {\n                  setInvestment(e.currentTarget.value);\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div> */}\n        {/* {investment === \"value\" && (\n          <div className=\"GridBotListControl\">\n            <div className=\"FilterTitle\">Show values in</div>\n            <ButtonGroup id=\"bar\">\n              {valuesRadios.map((radio, idx) => (\n                <ToggleButton\n                  key={radio.value}\n                  id={`radio-${radio.value}`}\n                  type=\"radio\"\n                  variant=\"outline-primary\"\n                  name=\"radioValues\"\n                  value={radio.value}\n                  checked={values === radio.value}\n                  onChange={(e) => setValues(e.currentTarget.value)}\n                >\n                  {radio.name}\n                </ToggleButton>\n              ))}\n            </ButtonGroup>\n          </div>\n        )} */}\n      </div>\n      {isNothingFound ? (\n        <div className=\"FallbackContainer\">\n          <p style={{ textAlign: \"center\" }}>\n            <b>No results found =(</b>\n          </p>\n        </div>\n      ) : (\n        <div className=\"GridBotsList\">\n          <GridBotsListTable\n            values={values}\n            investment={investment}\n            setModalGridBotId={setModalGridBotId}\n          />\n          {!!modalGridBotId && (\n            <GridBotDetails\n              modalIsOpen={!!modalGridBotId}\n              setModalIsOpen={setModalGridBotId}\n              gridBotId={modalGridBotId}\n            />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default GridBotsList;\n","import React from \"react\";\nimport \"./GridBots.css\";\nimport GridBotsList from \"./GridBotsList/GridBotsList\";\n\nconst GridBots = () => (\n  <>\n    {/* <BotsFilters /> */}\n    <GridBotsList />\n  </>\n);\n\nexport default GridBots;\n","import { ISmartTrade, ISmartTradeFilters } from \"../../interfaces/SmartTrade\";\n\ninterface ISetNewSmartTradesList {\n  type: \"setNewSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const setNewSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): ISetNewSmartTradesList => ({\n  type: \"setNewSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetHasMore {\n  type: \"setHasMore\";\n  payload: boolean;\n}\n\nexport const setHasMore = (hasMore: boolean): ISetHasMore => ({\n  type: \"setHasMore\",\n  payload: hasMore,\n});\n\ninterface IAddToSmartTradesList {\n  type: \"addToSmartTradesList\";\n  payload: Array<ISmartTrade>;\n}\n\nexport const addToSmartTradesList = (\n  smartTradesList: Array<ISmartTrade>\n): IAddToSmartTradesList => ({\n  type: \"addToSmartTradesList\",\n  payload: smartTradesList,\n});\n\ninterface ISetSmartTradesOffset {\n  type: \"setSmartTradesOffset\";\n  payload: number;\n}\n\nexport const setSmartTradesOffset = (\n  offset: number\n): ISetSmartTradesOffset => ({\n  type: \"setSmartTradesOffset\",\n  payload: offset,\n});\n\ninterface ISetSmartTradesFilters {\n  type: \"setSmartTradesFilters\";\n  payload: ISmartTradeFilters;\n}\n\nexport const setSmartTradesFilters = (\n  smartTradesFilter: ISmartTradeFilters\n): ISetSmartTradesFilters => ({\n  type: \"setSmartTradesFilters\",\n  payload: smartTradesFilter,\n});\n\ninterface ISetSmartTrade {\n  type: \"setSmartTrade\";\n  payload: { smartTradeId: number; smartTrade: ISmartTrade };\n}\n\nexport const setSmartTrade = (\n  smartTradeId: number,\n  smartTrade: ISmartTrade\n): ISetSmartTrade => ({\n  type: \"setSmartTrade\",\n  payload: { smartTradeId, smartTrade },\n});\n\nexport type SmartTradesAction =\n  | ISetNewSmartTradesList\n  | ISetHasMore\n  | IAddToSmartTradesList\n  | ISetSmartTradesOffset\n  | ISetSmartTradesFilters\n  | ISetSmartTrade;\n","import { getSmartTrades, getSmartTradeTrades } from \"../../utils/ApiUtils\";\nimport { convertFilterValueToDate } from \"../../utils/GeneralUtils\";\nimport {\n  addToSmartTradesList,\n  setHasMore,\n  setNewSmartTradesList,\n  setSmartTrade,\n} from \"./SmartTradesActions\";\nimport { ISmartTradesState } from \"./SmartTradesReducer\";\n\nexport async function fetchSmartTrades(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  customLimit?: number\n) {\n  smartTradesDispatch(setHasMore(true));\n  smartTradesDispatch(setNewSmartTradesList([]));\n  const {\n    limit,\n    filters: { sorting, accountId, type, pair, status, from },\n  } = smartTradesState;\n\n  const perPage = customLimit ? customLimit : limit;\n  const fromDate = convertFilterValueToDate(from);\n  try {\n    let hasMore = true;\n    let page = 1;\n\n    while (hasMore) {\n      const data: any = await getSmartTrades(\n        page,\n        perPage,\n        sorting,\n        accountId,\n        type,\n        pair,\n        status,\n        fromDate\n      );\n      if (data.error) {\n        break;\n      }\n      smartTradesDispatch(addToSmartTradesList(data));\n      page = page + 1;\n      if (data.length < perPage) {\n        hasMore = false;\n      }\n    }\n    smartTradesDispatch(setHasMore(false));\n  } catch {\n    smartTradesDispatch(setNewSmartTradesList([]));\n    smartTradesDispatch(setHasMore(false));\n    errorsDispatch({\n      type: \"addError\",\n      payload: \"Error when fetching smart trades list\",\n    });\n  }\n}\n\nexport async function fetchTrades(\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n  try {\n    if (!(\"trades\" in smartTradeItem) || !smartTradeItem.trades) {\n      const smartTradeTrades = await getSmartTradeTrades(smartTradeId);\n      return smartTradeTrades;\n    } else {\n      return smartTradeItem.trades;\n    }\n  } catch {\n    errorsDispatch({\n      type: \"addError\",\n      payload: `Error when fetching market orders for grid bot ${smartTradeItem.id}`,\n    });\n    return {};\n  }\n}\n\nexport async function fetchDetails(\n  smartTradesDispatch: any,\n  smartTradesState: ISmartTradesState,\n  errorsDispatch: any,\n  smartTradeId: number\n) {\n  const trades = await fetchTrades(\n    smartTradesState,\n    errorsDispatch,\n    smartTradeId\n  );\n\n  const { smartTrades } = smartTradesState;\n  const smartTradeItem = smartTrades[smartTradeId];\n\n  const smartTrade = {\n    ...smartTradeItem,\n    trades,\n  };\n  await smartTradesDispatch(setSmartTrade(smartTradeId, smartTrade));\n}\n","import React, { useContext } from \"react\";\nimport { Badge, Table } from \"react-bootstrap\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport \"./SmartTradeDetailsStatusTable.css\";\n\nconst SmartTradeDetailsStatusTable = ({ smartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n\n  const { smartTrades } = smartTradesState;\n\n  const smartTrade = smartTrades[smartTradeId];\n\n  return (\n    <div className=\"SmartTradeDetailsStatusTable\">\n      {smartTrade && (\n        <Table striped>\n          <thead>\n            <tr>\n              <th>Average entry</th>\n              <th>Average close</th>\n              <th>Current price</th>\n              <th>PnL, $</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr style={{ fontSize: \"14px\" }}>\n              <td>{`${\n                smartTrade.data.type === \"smart_sell\" ||\n                smartTrade.data.type === \"smart_buy\"\n                  ? smartTrade.position.price.value\n                  : smartTrade.data.average_enter_price\n              }`}</td>\n              <td>{`${\n                smartTrade.data.average_close_price\n                  ? smartTrade.data.average_close_price\n                  : \"\"\n              }`}</td>\n              <td>{`${\n                smartTrade.data.current_price\n                  ? smartTrade.data.current_price.last\n                  : \"\"\n              }`}</td>\n              <td>\n                {smartTrade.profit.usd ? (\n                  <Badge\n                    bg={smartTrade.profit.usd >= 0 ? \"success\" : \"danger\"}\n                    style={{ fontSize: \"13px\" }}\n                  >{`${getCurrencyFormat({\n                    value: smartTrade.profit.usd,\n                    currency: \"USD\",\n                  })}$`}</Badge>\n                ) : (\n                  \"\"\n                )}\n              </td>\n            </tr>\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradeDetailsStatusTable;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport \"./SmartTradeDetailsTable.css\";\n\nconst SmartTradeDetailsTable = ({ smartTradeId, trades }: any) => {\n  const triggerSignMap: any = {\n    less: \"<\",\n    less_or_equal: \"<=\",\n    greater_or_equal: \">=\",\n    greater: \">\",\n  };\n\n  return (\n    trades && (\n      <div className=\"SmartTradeDetailsTable\">\n        <Table striped>\n          <thead>\n            <tr>\n              <th>Order</th>\n              <th>Price</th>\n              <th>Amount</th>\n              <th>Total</th>\n              <th>Trigger</th>\n              <th>Trailing</th>\n              <th>Status</th>\n              <th>Created</th>\n              <th>Updated</th>\n            </tr>\n          </thead>\n          <tbody>\n            {trades.map((trade: any) => (\n              <tr style={{ fontSize: \"14px\" }} key={trade.id}>\n                <td>{`${trade.order_type} ${trade.order_side}`}</td>\n                <td>\n                  <div>{`Desired: ${\n                    trade.initial_price ? trade.initial_price : \"\"\n                  }`}</div>\n                  <div>{`Real: ${\n                    trade.realised_price ? trade.realised_price : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`Desired: ${\n                    trade.initial_amount ? trade.initial_amount : \"\"\n                  }`}</div>\n                  <div>{`Real: ${\n                    trade.realised_amount ? trade.realised_amount : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`Desired: ${\n                    trade.initial_total ? trade.initial_total : \"\"\n                  }`}</div>\n                  <div>{`Real: ${\n                    trade.realised_total ? trade.realised_total : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`${\n                    trade.trigger_condition\n                      ? triggerSignMap[trade.trigger_condition]\n                      : \"\"\n                  } ${trade.trigger_price ? trade.trigger_price : \"\"}`}</div>\n                </td>\n                <td>\n                  <div>{`${trade.trail_value ? trade.trail_value : \"\"} ${\n                    trade.trail_percentage ? `(${trade.trail_percentage}%)` : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`${trade.status ? trade.status : \"\"}`}</div>\n                </td>\n                <td>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.created_at).format(\"DD/MM/YYYY\")\n                      : \"\"\n                  }`}</div>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.created_at).format(\"HH:mm\")\n                      : \"\"\n                  }`}</div>\n                </td>\n                <td>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.updated_at).format(\"DD/MM/YYYY\")\n                      : \"\"\n                  }`}</div>\n                  <div>{`${\n                    trade.updated_at\n                      ? moment(trade.updated_at).format(\"HH:mm\")\n                      : \"\"\n                  }`}</div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    )\n  );\n};\n\nexport default SmartTradeDetailsTable;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ButtonGroup, Modal, ToggleButton } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  AccountsContext,\n  ErrorsContext,\n  SmartTradesContext,\n} from \"../../../App\";\nimport { fetchDetails } from \"../../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTradeDetails.css\";\nimport SmartTradeDetailsStatusTable from \"./SmartTradeDetailsStatusTable/SmartTradeDetailsStatusTable\";\nimport SmartTradeDetailsTable from \"./SmartTradeDetailsTable/SmartTradeDetailsTable\";\n\nconst purposeRadios = [\n  { name: \"Position\", value: \"position\" },\n  { name: \"Take profit\", value: \"take_profit\" },\n  { name: \"Reduce funds\", value: \"reduce_funds\" },\n  { name: \"Stop loss\", value: \"stop_loss\" },\n  { name: \"Panic\", value: \"panic\" },\n  { name: \"All\", value: \"\" },\n];\n\nconst SmartTradeDetails = ({\n  modalIsOpen,\n  setModalIsOpen,\n  smartTradeId,\n}: any) => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { smartTrades } = smartTradesState;\n  const smartTrade = smartTrades[smartTradeId];\n  const { errorsDispatch } = useContext(ErrorsContext);\n\n  const [purpose, setPurpose] = useState(\"\");\n  const [trades, setTrades] = useState([]);\n  const [account, setAccount] = useState<any>(null);\n\n  const navigate = useNavigate();\n\n  const {\n    accountsState: { accounts },\n  } = useContext(AccountsContext);\n\n  useEffect(() => {\n    if (smartTradeId) {\n      fetchDetails(\n        smartTradesDispatch,\n        smartTradesState,\n        errorsDispatch,\n        smartTradeId\n      ).then();\n    }\n  }, [smartTradeId]);\n\n  useEffect(() => {\n    if (smartTrade && smartTrade.trades) {\n      setTrades(smartTrade.trades);\n    }\n    if (smartTrade) {\n      setAccount(accounts[smartTrade.account.id]);\n    }\n  }, [smartTrade]);\n\n  useEffect(() => {\n    if (purpose) {\n      setTrades(\n        smartTrade.trades.filter(\n          (trade: any) => trade.trade_purpose === purpose\n        )\n      );\n    } else {\n      if (smartTrade && smartTrade.trades) {\n        setTrades(smartTrade.trades);\n      }\n    }\n  }, [purpose]);\n\n  return (\n    <>\n      {smartTrade && (\n        <Modal\n          show={modalIsOpen}\n          onHide={() => {\n            setModalIsOpen(\"\");\n          }}\n          scrollable\n          size=\"xl\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>\n              {`${smartTrade.pair\n                .split(\"_\")\n                .reverse()\n                .join(\"/\")} (Trade ID: ${smartTradeId})`}\n              {account && (\n                <div\n                  style={{\n                    display: \"flex\",\n                    fontSize: \"14px\",\n                    marginTop: \"4px\",\n                  }}\n                >\n                  {\"market_icon\" in account && (\n                    <div\n                      className=\"BotMarketIcon\"\n                      style={{\n                        backgroundImage: `url(${account.market_icon})`,\n                      }}\n                    ></div>\n                  )}\n                  <a\n                    onClick={(e: any) => {\n                      e.preventDefault();\n                      navigate({\n                        pathname: `/accounts/${account.id}`,\n                        search: window.location.search,\n                      });\n                    }}\n                    href=\"#\"\n                  >\n                    {account.name}\n                  </a>\n                </div>\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div>\n              <div className=\"SmartTradeDetailsControl\">\n                <SmartTradeDetailsStatusTable smartTradeId={smartTradeId} />\n              </div>\n              <div className=\"SmartTradeDetailsControl\">\n                <ButtonGroup>\n                  {purposeRadios.map((radio, idx) => (\n                    <ToggleButton\n                      key={idx}\n                      id={`detail-position-range-radio-${idx}`}\n                      type=\"radio\"\n                      variant=\"outline-primary\"\n                      name=\"radio-detail-position\"\n                      value={radio.value}\n                      checked={purpose === radio.value}\n                      onChange={(e) => setPurpose(e.currentTarget.value)}\n                    >\n                      {radio.name}\n                    </ToggleButton>\n                  ))}\n                </ButtonGroup>\n              </div>\n            </div>\n            {trades && (\n              <SmartTradeDetailsTable\n                smartTradeId={smartTradeId}\n                trades={trades}\n              />\n            )}\n          </Modal.Body>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradeDetails;\n","import _ from \"lodash\";\nimport moment from \"moment\";\nimport { ISmartTrade } from \"../interfaces/SmartTrade\";\nimport {\n  differenceInDays,\n  getAccumulativeProfitChartData,\n  getProfitChartData,\n} from \"./DealsUtils\";\nimport { convertFilterValueToDate } from \"./GeneralUtils\";\n\nexport const getObjectOfSmartTradesProfitsPerDay = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n  const dateStringProfits = (item: any) =>\n    moment(item.data.closed_at).format(\"YYYY-MM-DD\");\n\n  let resultProfits = _.groupBy(filteredSmartTrades, dateStringProfits);\n\n  return _.mapValues(resultProfits, (smartTrades: Array<any>) =>\n    _.sum(\n      smartTrades.map((smartTrade: any) => parseFloat(smartTrade.profit.usd))\n    )\n  );\n};\n\nexport const getSmartTradesProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\nexport const getSmartTradesAccumulativeProfitsChartData = (\n  smartTrades: Array<ISmartTrade>,\n  from: any\n) => {\n  const dateFrom = convertFilterValueToDate(from);\n  const smartTradesProfitsByDays =\n    getObjectOfSmartTradesProfitsPerDay(smartTrades);\n  if (dateFrom) {\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), moment(dateFrom))\n    );\n  } else {\n    const oldestTradeDate = moment.min(\n      _.keys(smartTradesProfitsByDays).map((day: any) => moment(day))\n    );\n    return getAccumulativeProfitChartData(\n      smartTradesProfitsByDays,\n      differenceInDays(moment(), oldestTradeDate)\n    );\n  }\n};\n\nexport const getSmartTradesPairsLeaderboardChartData = (\n  smartTrades: Array<ISmartTrade>\n) => {\n  const filteredSmartTrades = smartTrades.filter(\n    (smartTrade: any) => smartTrade.data.closed_at && smartTrade.profit.usd\n  );\n\n  const groupedResultProfits = _.groupBy(filteredSmartTrades, \"pair\");\n\n  const resultProfits = _.mapValues(\n    groupedResultProfits,\n    (groupedSmartTrades: any) =>\n      _.sum(\n        groupedSmartTrades.map((smartTrade: any) =>\n          parseFloat(smartTrade.profit.usd)\n        )\n      )\n  );\n\n  const sortedProfits = _(resultProfits)\n    .toPairs()\n    .orderBy([1], [\"desc\"])\n    .value()\n    .slice(0, 10);\n  const labels = sortedProfits.map((profit) =>\n    profit[0].split(\"_\").reverse().join(\"/\")\n  );\n  const values = sortedProfits.map((profit) => profit[1]);\n\n  return [labels, values];\n};\n","import React, { FC, useContext, useEffect, useState } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { SmartTradesContext } from \"../../../../App\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport {\n  AccumulativeChartOptions,\n  LeaderbordChartOptions,\n  ProfitChartOptions,\n} from \"../../../../utils/ChartsUtils\";\nimport {\n  getSmartTradesAccumulativeProfitsChartData,\n  getSmartTradesPairsLeaderboardChartData,\n  getSmartTradesProfitsChartData,\n} from \"../../../../utils/SmartTradesUtil\";\nimport \"./SmartTradesCharts.css\";\n\ninterface SmartTradesChartsProps {}\n\nconst SmartTradesCharts: FC<SmartTradesChartsProps> = () => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, hasMore, smartTrades, filters } = smartTradesState;\n\n  const [accumulativeProfitsData, setAccumulativeProfitsData] = useState<any>([\n    [],\n    [],\n  ]);\n  const [profitsData, setProfitsData] = useState<any>([[], []]);\n  const [pairProfitsLeaderboardData, setPairProfitsLeaderboardData] =\n    useState<any>([[], []]);\n\n  const chartTooltipFormatLabel = (tooltipItem: any) => {\n    return `${tooltipItem.dataset.label}: ${getCurrencyFormat({\n      value: tooltipItem.parsed.y,\n      currency: \"USD\",\n    })}`;\n  };\n\n  useEffect(() => {\n    setAccumulativeProfitsData(\n      getSmartTradesAccumulativeProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setProfitsData(\n      getSmartTradesProfitsChartData(\n        list.map((id: any) => smartTrades[id]),\n        filters.from\n      )\n    );\n    setPairProfitsLeaderboardData(\n      getSmartTradesPairsLeaderboardChartData(\n        list.map((id: any) => smartTrades[id])\n      )\n    );\n  }, [list]);\n\n  return !hasMore ? (\n    <div className=\"SmartTradesCharts\">\n      <div className=\"DCABotDetailsChartContainer\">\n        <Line\n          options={\n            AccumulativeChartOptions(\n              `Accumulative Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: accumulativeProfitsData[0],\n            datasets: [\n              {\n                label: `Accumulative Profit, $`,\n                data: accumulativeProfitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n                fill: { value: 0 },\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            ProfitChartOptions(\n              `Daily Profit, $`,\n              chartTooltipFormatLabel\n            ) as any\n          }\n          data={{\n            labels: profitsData[0],\n            datasets: [\n              {\n                label: `Profit, $`,\n                data: profitsData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n      <div className=\"DCABotDetailsChartContainer\">\n        <Bar\n          options={\n            LeaderbordChartOptions(\n              \"Pairs leaderboard by profit\",\n              pairProfitsLeaderboardData[0]\n            ) as any\n          }\n          data={{\n            labels: pairProfitsLeaderboardData[0],\n            datasets: [\n              {\n                label: \"Profit, $\",\n                data: pairProfitsLeaderboardData[1],\n                borderColor: \"rgb(53, 162, 235)\",\n                backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n              },\n            ],\n          }}\n        />\n      </div>\n    </div>\n  ) : (\n    <div className=\"SmartTradesChartsSpiner\">\n      <Spinner animation=\"grow\" />\n    </div>\n  );\n};\n\nexport default SmartTradesCharts;\n","import React, { useContext, useEffect } from \"react\";\nimport { AccountsContext, SmartTradesContext } from \"../../../../App\";\nimport Select from \"react-select\";\nimport \"./SmartTradesFilters.css\";\nimport DatePicker from \"react-datepicker\";\nimport { setSmartTradesFilters } from \"../../../../state/smartTrades/SmartTradesActions\";\nimport { ButtonGroup, ToggleButton } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nconst timeRangeRadios = [\n  { name: \"Today\", value: \"today\" },\n  { name: \"Week\", value: \"week\" },\n  { name: \"Month\", value: \"month\" },\n  { name: \"All time\", value: \"allTime\" },\n  { name: \"Custom\", value: \"custom\" },\n];\n\nconst SmartTradesFilters = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const { filters, hasMore, list } = smartTradesState;\n\n  const updateFilter = async (filterItem: any) => {\n    smartTradesDispatch(\n      setSmartTradesFilters({\n        ...smartTradesState.filters,\n        ...filterItem,\n      })\n    );\n  };\n\n  const accountsOptions = [\n    { value: \"\", label: \"All\", label_id: \"All\" },\n    ...accountsList.map((accountId: any) => ({\n      value: accountId,\n      label: (\n        <div className=\"AccountFilterItem\">\n          <div>\n            <div\n              className=\"AccountMarketIcon\"\n              style={{\n                backgroundImage: `url(${accounts[accountId].market_icon})`,\n              }}\n            ></div>\n          </div>\n          <span>{accounts[accountId].name}</span>\n        </div>\n      ),\n      label_id: accounts[accountId].name,\n    })),\n  ];\n\n  const typeOptions: any = [\n    { value: \"\", label: \"All\" },\n    { value: \"simple_buy\", label: \"Simple buy\" },\n    { value: \"simple_sell\", label: \"Simple sell\" },\n    { value: \"smart_sell\", label: \"Smart sell\" },\n    { value: \"smart_cover\", label: \"Smart cover\" },\n    { value: \"smart_buy\", label: \"Smart buy\" },\n    { value: \"smart_trade\", label: \"Smart trade\" },\n  ];\n\n  const statusOptions: any = [\n    { value: \"all\", label: \"All\" },\n    { value: \"active\", label: \"Active\" },\n    { value: \"finished\", label: \"Finished\" },\n    { value: \"successfully_finished\", label: \"Successfully finished\" },\n    { value: \"cancelled\", label: \"Cancelled\" },\n    { value: \"failed\", label: \"Failed\" },\n  ];\n\n  const sortingOptions: any = [\n    { value: \"profit-desc\", label: \"Profit (Highest First)\" },\n    { value: \"profit-asc\", label: \"Profit (Lowest First)\" },\n    {\n      value: \"profit_percentage-desc\",\n      label: \"Profit percentage (Highest First)\",\n    },\n    {\n      value: \"profit_percentage-asc\",\n      label: \"Profit percentage (Lowest First)\",\n    },\n    { value: \"created_at-desc\", label: \"Opened (Youngest first)\" },\n    { value: \"created_at-asc\", label: \"Opened (Oldest first)\" },\n    { value: \"closed_at-desc\", label: \"Closed (Youngest first)\" },\n    { value: \"closed_at-asc\", label: \"Closed (Oldest first)\" },\n    { value: \"status-desc\", label: \"Status (Highest First)\" },\n    { value: \"status-asc\", label: \"Status (Lowest First)\" },\n  ];\n\n  useEffect(() => {\n    try {\n      localStorage.setItem(\"smartTradesFiltersState\", JSON.stringify(filters));\n    } catch {}\n  }, [filters]);\n\n  return (\n    <>\n      <div className=\"SmartTradesFilters\">\n        <div className=\"SmartTradesTimeRangeContainer\">\n          <ButtonGroup>\n            {timeRangeRadios.map((radio, idx) => (\n              <ToggleButton\n                key={idx}\n                id={`radio-${idx}`}\n                type=\"radio\"\n                disabled={hasMore}\n                variant=\"outline-primary\"\n                name=\"radio\"\n                value={radio.value}\n                checked={filters.from.label === radio.value}\n                onChange={(e) => {\n                  updateFilter({\n                    from: { ...filters.from, label: e.currentTarget.value },\n                  });\n                }}\n              >\n                {radio.name}\n              </ToggleButton>\n            ))}\n          </ButtonGroup>\n        </div>\n        {filters.from.label === \"custom\" && (\n          <div className=\"SmartTradesTimeRangeContainer\">\n            <div className=\"FilterTitle\">From</div>\n            <DatePicker\n              dateFormat=\"yyyy-MM-dd\"\n              disabled={hasMore}\n              selected={\n                filters.from.from\n                  ? moment(filters.from.from).toDate()\n                  : moment().toDate()\n              }\n              onChange={(date: any) => {\n                updateFilter({\n                  from: {\n                    label: \"custom\",\n                    from: moment(date).format(\"YYYY-MM-DD\"),\n                  },\n                });\n              }}\n              selectsStart\n              className=\"SmartTradesDateFilter\"\n              strictParsing\n            />\n          </div>\n        )}\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Account</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ accountId: option.value });\n            }}\n            value={accountsOptions.find(\n              (option: any) => option.value === filters.accountId\n            )}\n            options={accountsOptions}\n            className=\"AccountFilter\"\n            filterOption={(candidate, input) =>\n              candidate.data.label_id.includes(input)\n            }\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Status</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ status: option.value });\n            }}\n            value={statusOptions.find(\n              (option: any) => option.value === filters.status\n            )}\n            options={statusOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Type</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ type: option.value });\n            }}\n            value={typeOptions.find(\n              (option: any) => option.value === filters.type\n            )}\n            options={typeOptions}\n            className=\"TypeFilter\"\n          />\n        </div>\n        <div className=\"SmartTradesFilterGroup\">\n          <div className=\"FilterTitle\">Sort by</div>\n          <Select\n            isDisabled={hasMore}\n            onChange={(option: any) => {\n              updateFilter({ sorting: option.value });\n            }}\n            value={sortingOptions.find(\n              (option: any) => option.value === filters.sorting\n            )}\n            options={sortingOptions}\n            className=\"Sorting\"\n          />\n        </div>\n      </div>\n      {!hasMore && (\n        <div className=\"SmartTradesFilters\">{`Total: ${list.length}`}</div>\n      )}\n    </>\n  );\n};\n\nexport default SmartTradesFilters;\n","import React, { useContext } from \"react\";\nimport { AccountsContext, SmartTradesContext } from \"../../../../App\";\nimport { useTable } from \"react-table\";\nimport { Badge, Table } from \"react-bootstrap\";\n\nimport \"./SmartTradesTable.css\";\nimport { getCurrencyFormat } from \"../../../../utils/BotsUtils\";\nimport CurrencyIcon from \"../../../CommonComponents/CurrencyIcon/CurrencyIcon\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\n\nconst smartTradeTypes: any = {\n  simple_buy: \"Simple Buy\",\n  simple_sell: \"Simple Sell\",\n  smart_sell: \"Smart Sell\",\n  smart_trade: \"Smart Trade\",\n  smart_cover: \"Smart Cover\",\n  smart_buy: \"Smart Buy\",\n};\n\nconst SmartTradesTable = ({ setModalSmartTradeId }: any) => {\n  const { smartTradesState } = useContext(SmartTradesContext);\n  const { list, smartTrades } = smartTradesState;\n\n  const {\n    accountsState: { accounts, list: accountsList },\n  } = useContext(AccountsContext);\n\n  const columns = React.useMemo(\n    () =>\n      [\n        {\n          Header: \"Account\",\n          id: \"account\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            return originalRow.account.id;\n          },\n          disableSortBy: true,\n          Cell: ({ cell: { value } }: any) => {\n            const accountId = accountsList.filter(\n              (accId: any) => accId === value\n            )[0];\n            return (\n              <div style={{ display: \"flex\" }}>\n                <div\n                  className=\"AccountMarketIcon\"\n                  style={{\n                    backgroundImage: `url(${accounts[accountId].market_icon})`,\n                  }}\n                ></div>\n                <div style={{ width: \"100px\" }}>{accounts[accountId].name}</div>\n              </div>\n            );\n          },\n        },\n\n        {\n          Header: \"Pair\",\n          Cell: ({ cell: { value } }: any) => {\n            const baseCurrency = value.split(\"_\")[1];\n\n            return (\n              <div style={{ display: \"flex\" }}>\n                <CurrencyIcon currency={baseCurrency} />\n                <div style={{ marginLeft: \"4px\" }}>\n                  {value.split(\"_\").reverse().join(\"/\")}\n                </div>\n              </div>\n            );\n          },\n          accessor: \"pair\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Side\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const side = originalRow.position.type === \"buy\" ? \"LONG\" : \"SHORT\";\n            return side;\n          },\n          id: \"side\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Type\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            smartTradeTypes[originalRow.data.type],\n\n          id: \"type\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Status\",\n          accessor: (originalRow: any, rowIndex: any) =>\n            originalRow.status.title,\n\n          id: \"status\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, %\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_percent = parseFloat(originalRow.profit.percent);\n            return pnl_percent ? (\n              <div\n                className={\n                  pnl_percent >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"\n                }\n              >{`${getCurrencyFormat({\n                value: pnl_percent,\n                currency: \"USD\",\n              })}%`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_percent\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n\n            const pnl = parseFloat(originalRow.profit.volume);\n            return pnl ? (\n              <div\n                className={pnl >= 0 ? \"PositiveNumber\" : \"NegativeNumber\"}\n              >{`${getCurrencyFormat({\n                value: pnl,\n                currency: quoteCurrency,\n              })} ${quoteCurrency}`}</div>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_quote\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"PnL, $\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const pnl_usd = parseFloat(originalRow.profit.usd);\n            return pnl_usd ? (\n              <Badge\n                bg={pnl_usd >= 0 ? \"success\" : \"danger\"}\n                style={{ fontSize: \"13px\" }}\n              >{`${getCurrencyFormat({\n                value: pnl_usd,\n                currency: \"USD\",\n              })}$`}</Badge>\n            ) : (\n              \"\"\n            );\n          },\n          id: \"pnl_usd\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Volume\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const quoteCurrency = originalRow.pair.split(\"_\")[0];\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={baseCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.units.value,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  <CurrencyIcon currency={quoteCurrency} />\n                  <div style={{ marginLeft: \"4px\" }}>{`${getCurrencyFormat({\n                    value: originalRow.position.total.value,\n                    currency: quoteCurrency,\n                  })} ${quoteCurrency}`}</div>\n                </div>\n              </>\n            );\n          },\n\n          id: \"volume\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Margin and Leverage\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const baseCurrency = originalRow.pair.split(\"_\")[1];\n\n            return originalRow.leverage.enabled ? (\n              <>\n                <div style={{ display: \"flex\" }}>\n                  <div>{`${getCurrencyFormat({\n                    value: originalRow.margin.total,\n                    currency: baseCurrency,\n                  })} ${baseCurrency}`}</div>\n                </div>\n                <div style={{ display: \"flex\" }}>\n                  {originalRow.leverage && (\n                    <div>\n                      {`x${Math.floor(originalRow.leverage.value)} ${\n                        originalRow.leverage.type\n                      }`}\n                    </div>\n                  )}\n                </div>\n              </>\n            ) : (\n              \"\"\n            );\n          },\n\n          id: \"margin\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Created at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.created_at);\n            return (\n              <>\n                <div>{date.format(\"DD/MM/YYYY\")}</div>\n                <div>{date.format(\"HH:mm\")}</div>\n              </>\n            );\n          },\n\n          id: \"created_at\",\n          disableSortBy: true,\n        },\n        {\n          Header: \"Closed at\",\n          accessor: (originalRow: any, rowIndex: any) => {\n            const date = moment(originalRow.data.closed_at);\n            return (\n              originalRow.data.closed_at && (\n                <>\n                  <div>{date.format(\"DD/MM/YYYY\")}</div>\n                  <div>{date.format(\"HH:mm\")}</div>\n                </>\n              )\n            );\n          },\n\n          id: \"closed_at\",\n          disableSortBy: true,\n        },\n      ] as any,\n    []\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({\n      columns,\n      data: list.map((smartTradeId: number) => smartTrades[smartTradeId]),\n    });\n\n  return (\n    <div className=\"SmartTradesTable\">\n      <Table hover {...getTableProps()}>\n        <thead style={{ fontSize: \"14px\" }}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div style={{ display: \"flex\", width: \"100%\" }}>\n                    {column.render(\"Header\")}\n                    <div\n                      style={{\n                        marginLeft: \"auto\",\n                        cursor: column.disableSortBy ? \"auto\" : \"pointer\",\n                      }}\n                    >\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" 🔽\"\n                          : \" 🔼\"\n                        : \"   \"}\n                    </div>\n                  </div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody style={{ fontSize: \"14px\" }} {...getTableBodyProps()}>\n          {rows.map((row: any, i) => {\n            prepareRow(row);\n            return (\n              <tr\n                style={{ height: \"112px\", cursor: \"pointer\" }}\n                {...row.getRowProps()}\n                onClick={() => {\n                  setModalSmartTradeId(row.original.id);\n                }}\n              >\n                {row.cells.map((cell: any) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default SmartTradesTable;\n","import React, { FC, useContext, useState } from \"react\";\nimport { AccountsContext } from \"../../../App\";\nimport SmartTradeDetails from \"../SmartTradeDetails/SmartTradeDetails\";\nimport SmartTradesCharts from \"./SmartTradesCharts/SmartTradesCharts\";\nimport SmartTradesFilters from \"./SmartTradesFilters/SmartTradesFilters\";\nimport \"./SmartTradesList.css\";\nimport SmartTradesTable from \"./SmartTradesTable/SmartTradesTable\";\n\ninterface SmartTradesListProps {}\n\nconst SmartTradesList: FC<SmartTradesListProps> = () => {\n  const [modalSmartTradeId, setModalSmartTradeId] = useState(\"\");\n\n  return (\n    <div className=\"SmartTradesList\">\n      <SmartTradesCharts />\n      <SmartTradesFilters />\n      <SmartTradesTable setModalSmartTradeId={setModalSmartTradeId} />\n      {!!modalSmartTradeId && (\n        <SmartTradeDetails\n          modalIsOpen={!!modalSmartTradeId}\n          setModalIsOpen={setModalSmartTradeId}\n          smartTradeId={modalSmartTradeId}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default SmartTradesList;\n","import React, { FC, useContext, useEffect } from \"react\";\nimport { ErrorsContext, SmartTradesContext } from \"../../App\";\nimport { fetchSmartTrades } from \"../../state/smartTrades/SmartTradesEffects\";\nimport \"./SmartTrades.css\";\nimport SmartTradesList from \"./SmartTradesList/SmartTradesList\";\n\ninterface SmartTradesProps {}\n\nconst SmartTrades: FC<SmartTradesProps> = () => {\n  const { smartTradesState, smartTradesDispatch } =\n    useContext(SmartTradesContext);\n  const { errorsDispatch } = useContext(ErrorsContext);\n  const { filters } = smartTradesState;\n\n  useEffect(() => {\n    fetchSmartTrades(\n      smartTradesDispatch,\n      smartTradesState,\n      errorsDispatch\n    ).then();\n  }, [filters]);\n\n  return (\n    <div className=\"SmartTrades\">\n      <SmartTradesList />\n    </div>\n  );\n};\n\nexport default SmartTrades;\n","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport AccountDetails from \"./components/Accounts/AccountDetails/AccountDetails\";\nimport Accounts from \"./components/Accounts/Accounts\";\nimport { DCABotDetails } from \"./components/DCABots/DCABotDetails/DCABotDetails\";\nimport { DCABots } from \"./components/DCABots/DCABots\";\nimport GridBots from \"./components/GridBots/GridBots\";\nimport SmartTrades from \"./components/SmartTrades/SmartTrades\";\n\nconst Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<DCABots />} />\n        <Route path=\":botId\" element={<DCABotDetails />} />\n        <Route path=\"/gridbots\" element={<GridBots />} />\n        <Route path=\"/smarttrades\" element={<SmartTrades />} />\n        <Route path=\"/accounts\" element={<Accounts />} />\n        <Route path=\"/accounts/:accountId\" element={<AccountDetails />} />\n      </Route>\n    </Routes>\n  );\n};\n\nexport default Router;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n// don't want to use this?\n// have a look at the Quick start guide \n// for passing in lng and translations on init\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  // want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'en',\n    debug: true,\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    }\n  });\n\n\nexport default i18n;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Router from \"./Router\";\nimport \"./i18n\";\n\nconst ROUTE_BASENAME = \"/botanfree\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <BrowserRouter basename={ROUTE_BASENAME}> */}\n    <BrowserRouter>\n      <Router />\n    </BrowserRouter>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}